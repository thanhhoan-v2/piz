This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-01T01:58:53.291Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  (auth)/
    forgot-password/
      page.tsx
    sign-in/
      page.tsx
    sign-up/
      page.tsx
    layout.tsx
  (user-profile)/
    [userName]/
      post/
        [postId]/
          comment/
            [commentId]/
              page.tsx
          page.tsx
      saved/
        page.tsx
      page.tsx
  activity/
    page.tsx
  protected/
    page.tsx
  search/
    page.tsx
  settings/
    page.tsx
  layout.tsx
  middleware.ts
  page.tsx
assets/
  images/
    down-right-arrow.svg
atoms/
  theme.ts
  user.ts
components/
  animation/
    GlibberishText.tsx
  layout/
    footer/
      index.tsx
    headerBar/
      HeaderBarCustomTheme.tsx
      HeaderBarDropdownMenu.tsx
      HeaderBarLogo.tsx
      HeaderBarNavigation.tsx
      index.tsx
    sideBar/
      index.tsx
      SidebarDesktop.tsx
      SidebarItem.tsx
      SidebarMobile.tsx
    index.tsx
  ui/
    button/
      AuthButton.tsx
      FollowButton.tsx
    comment/
      CommentCommentButton.tsx
      CommentReactButton.tsx
      CommentShareButton.tsx
      index.tsx
    form/
      PostForm.tsx
      PostFormMentionDropdown.tsx
      SignInForm.tsx
      SignUpForm.tsx
    input/
      InputEmail.tsx
      InputPassword.tsx
      InputStrongPassword.tsx
      InputUsername.tsx
    loadings/
      loading-screen.tsx
    modal/
      WelcomeModal.tsx
    post/
      index.tsx
      PostCommentButton.tsx
      PostDropdownMenu.tsx
      PostFormDesktop.tsx
      PostList.tsx
      PostReactButton.tsx
      PostSaveButton.tsx
      PostShareButton.tsx
      PostUserInfo.tsx
      PostVisibilityBadge.tsx
    search/
      SearchBar.tsx
      SearchList.tsx
    skeleton/
      SearchResultSkeleton.tsx
    toast/
      index.tsx
      Toaster.tsx
      useToast.ts
    toggle/
      ThemeToggle.tsx
    AlertDialog.tsx
    Avatar.tsx
    AvatarStack.tsx
    Badge.tsx
    Button.tsx
    Card.tsx
    Command.tsx
    Dialog.tsx
    Drawer.tsx
    DropdownMenu.tsx
    Icons.tsx
    Input.tsx
    Label.tsx
    Logo.tsx
    Progress.tsx
    Select.tsx
    Separator.tsx
    Sheet.tsx
    Skeleton.tsx
    Tabs.tsx
    Textarea.tsx
    Toggle.tsx
    Tooltip.tsx
constants/
  color.ts
  dot-env.ts
  route.ts
hooks/
  auth/
    useSignIn.ts
    useSignOut.ts
    useSignUp.ts
  form/
    useDebounce.ts
prisma/
  schema/
    dbml/
      schema.dbml
    schema.prisma
  createClient.ts
providers/
  index.tsx
  QueryProvider.tsx
  StoreProvider.tsx
  ThemeProvider.tsx
queries/
  client/
    appUser.ts
    comment.ts
    noti.ts
    post.ts
    remove.ts
  server/
    comment.ts
    follow.ts
    noti.ts
    post.ts
    postReaction.ts
    report.ts
    saved.ts
    user.ts
  getQueryClient.ts
styles/
  globals.css
utils/
  cn.ts
  comment-tree.helpers.ts
  image.helpers.ts
  navigation.helpers.tsx
  page.helpers.ts
  queryKeyFactory.ts
  string.helpers.ts
  time.helpers.ts
  uuid.helpers.ts
.gitignore
.stylelintrc.json
biome.jsonc
components.json
next.config.mjs
package.json
postcss.config.js
README.md
renovate.json
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/(auth)/forgot-password/page.tsx
================
import { Button } from "@components/ui/Button"
import { Card, CardContent, CardHeader } from "@components/ui/Card"
import { Input } from "@components/ui/Input"
import { Label } from "@components/ui/Label"
import Link from "next/link"

export default function ForgotPasswordPage() {
	return (
		<>
			<Card className="w-full max-w-sm border-none">
				<CardHeader>
					<h2 className="mt-6 text-center font-bold text-3xl text-gray-900 tracking-tight dark:text-gray-50">
						Forgot your password?
					</h2>
					<p className="mt-2 text-center text-gray-600 text-sm dark:text-gray-400">
						Enter the email address associated with your account and we'll send
						you a link to reset your password.
					</p>
				</CardHeader>
				<CardContent>
					<form className="space-y-6" action="#" method="POST">
						<div>
							<Label htmlFor="email" className="sr-only">
								Email address
							</Label>
							<Input
								id="email"
								name="email"
								type="email"
								autoComplete="email"
								required
								placeholder="Email address"
							/>
						</div>
						<Button type="submit" className="w-full">
							Reset password
						</Button>
					</form>
				</CardContent>

				<div className="flex justify-center">
					<Link
						href="/sign-in"
						className="text-md decoration-pink-400 underline-offset-4 hover:underline hover:decoration-wavy"
					>
						Back to login
					</Link>
				</div>
			</Card>
		</>
	)
}

================
File: app/(auth)/sign-in/page.tsx
================
import SignInForm from "@components/ui/form/SignInForm"

export default function SignInPage() {
	return <SignInForm />
}

================
File: app/(auth)/sign-up/page.tsx
================
import SignUpForm from "@components/ui/form/SignUpForm"

export default function SignUpPage() {
	return <SignUpForm />
}

================
File: app/(auth)/layout.tsx
================
import Footer from "@components/layout/footer"

export default function AuthLayout({
	children,
}: { children: React.ReactNode }) {
	return (
		<>
      {/* h-screen -> signin page OK, singup NOT OK */}
			<div className="h-screen w-screen flex-center">
				<main className="w-full flex-center px-4">{children}</main>
				<Footer />
			</div>
		</>
	)
}

================
File: app/(user-profile)/[userName]/post/[postId]/comment/[commentId]/page.tsx
================
"use client"

import { Separator } from "@components/ui/Separator"
import PostComment, { type CommentWithChildren } from "@components/ui/comment"
import Post from "@components/ui/post"
import { useQueryAllComments, useQueryComment } from "@queries/client/comment"
import { useQueryPost } from "@queries/client/post"
import {
	buildCommentTree,
	extractFromCommentTreeById,
} from "@utils/comment-tree.helpers"
import Link from "next/link"

export default function CommentPage({
	params,
}: { params: { userName: string; postId: string; commentId: string } }) {
	const userName = params.userName
	const postId = params.postId
	const commentId = params.commentId

	const { data: post } = useQueryPost({ postId })
	const { data: comment } = useQueryComment({ commentId })
	const {
		data: unstructuredAllComments,
		isSuccess: isQueryAllCommentsSuccess,
	} = useQueryAllComments({ postId })

	const allCommentsFromPost = unstructuredAllComments
		? buildCommentTree(unstructuredAllComments)
		: null

	let comments: CommentWithChildren[] = []
	if (allCommentsFromPost) {
		comments = extractFromCommentTreeById(allCommentsFromPost, commentId)
	}

	return (
		<>
			<div className="flex-col">
				{post ? <Post {...post} /> : <>Could not load post</>}

				{/* <div className="flex-center"> */}
				{/* 	<Separator */}
				{/* 		className="my-[-20px] h-[50px] w-[20px] rounded-lg bg-background-item" */}
				{/* 		orientation="vertical" */}
				{/* 	/> */}
				{/* </div> */}

				{/* {comment && <PostComment {...comment} />} */}

				<div className="mt-2 mb-4 w-full flex-center gap-4">
					<Separator className="w-1/3" />
					<Link
						className="text-center decoration-pink-400 underline-offset-4 hover:underline hover:decoration-wavy"
						href={`/${userName}/post/${postId}`}
					>
						See full discussion
					</Link>
					<Separator className="w-1/3" />
				</div>

				{isQueryAllCommentsSuccess && comments ? (
					<div className="flex-col">
						{comments?.map((childComment) => (
							<PostComment
								key={childComment.id}
								{...childComment}
								childrenComment={{
									...childComment,
									children: childComment.children ?? [],
								}}
							/>
						))}
					</div>
				) : (
					<></>
				)}
			</div>
		</>
	)
}

================
File: app/(user-profile)/[userName]/post/[postId]/page.tsx
================
"use client"

import PostComment from "@components/ui/comment"
import Post from "@components/ui/post"
import { useQueryAllComments } from "@queries/client/comment"
import { useQueryPost } from "@queries/client/post"
import { buildCommentTree } from "@utils/comment-tree.helpers"

export default function PostPage({ params }: { params: { postId: string } }) {
	const postId = params.postId
	const { data: post } = useQueryPost({ postId })
	const { data: unstructuredComments } = useQueryAllComments({ postId })

	const comments = unstructuredComments
		? buildCommentTree(unstructuredComments)
		: null

	// const queryClient = useQueryClient()
	// React.useEffect(() => {
	// 	queryClient.setQueryData(queryKey.comment.all, comments)
	// }, [comments])

	return (
		<>
			{post ? (
				<div className="mt-[100px] flex-col">
					<Post {...post} />

					{comments && comments.length > 0 ? (
						<>
							{comments.map((comment) => (
								<PostComment
									childrenComment={{
										...comment,
										children: comment.children ?? [],
									}}
									key={comment.id}
									{...comment}
								/>
							))}
						</>
					) : (
						<>No comments</>
					)}
				</div>
			) : (
				<>Failed to load post 😢</>
			)}
		</>
	)
}

================
File: app/(user-profile)/[userName]/saved/page.tsx
================
export default function UserSavedPostsPage() {
	return <>saved posts</>
}

================
File: app/(user-profile)/[userName]/page.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "@components/ui/Avatar"
import { AvatarStack } from "@components/ui/AvatarStack"
import Post from "@components/ui/post"
import type { Post as IPost } from "@prisma/client"
import { getAllUserPosts } from "@queries/server/post"
import { getViewingUserInfo } from "@queries/server/user"
import { cn } from "@utils/cn"
import { avatarPlaceholder } from "@utils/image.helpers"
import { firstLetterToUpper } from "@utils/string.helpers"
import type { Metadata } from "next"

export async function generateMetadata({
	params,
}: {
	params: { userName: string }
}): Promise<Metadata> {
	const userName = params.userName
	return {
		title: `${userName} ✧ Piz`,
		description: `Profile page of user ${userName}.`,
	}
}

export default async function UserPage({
	params,
}: { params: { userName: string } }) {
	const userName = params.userName

	// App user, the main user
	// const {
	// 	data: { user: appUser },
	// } = await supabase.auth.getUser()

	// Viewing user, another person
	const viewingUser = await getViewingUserInfo(userName)

	// Get all posts by the viewing user
	let posts: IPost[] = []
	if (viewingUser) {
		const data = await getAllUserPosts(viewingUser.id)
		if (data) posts = data
	}

	// Get the first three follower avatar urls for AvatarStack
	const firstThreeAvatarUrls: { name: string; image: string }[] = []
	// if (appUser) {
	// 	const data = await getFirstThreeFollowerAvatarUrls({ userId: appUser.id })
	// 	if (data) firstThreeAvatarUrls = data
	// }

	// Get number of followers
	const noFollowers = 0
	// if (appUser) {
	// 	const data = await countUserFollowers({ userId: appUser.id })
	// 	if (data) noFollowers = data
	// }

	return (
		<>
			<div>
				<div
					className={cn("mt-[100px] laptop:w-[650px] flex-between gap-5 px-4")}
				>
					<div className="text-start">
						<h1 className="text-3xl text-bold">
							{viewingUser
								? firstLetterToUpper(viewingUser.fullName)
								: "Unknown User"}
						</h1>
						<h2 className="text-gray-400">
							@{viewingUser?.userName ?? "unknown"}
						</h2>
					</div>

					<div className="">
						<Avatar className="h-24 w-24">
							<AvatarImage src={viewingUser?.avatarUrl ?? avatarPlaceholder} />
							<AvatarFallback>Piz</AvatarFallback>
						</Avatar>
					</div>
				</div>

				<div className="mt-5 flex-start-center gap-5 px-4">
					<AvatarStack
						avatars={firstThreeAvatarUrls}
						showHiddenAvatarLength={false}
					/>
					<p>{noFollowers} followers</p>
				</div>

				{/* if the user viewing profile is the main user */}
				{/* {viewingUser?.id === appUser?.id ? ( */}
				{/* 	<Button variant="outline" className="mt-5 w-full"> */}
				{/* 		Edit profile */}
				{/* 	</Button> */}
				{/* ) : ( */}
				{/* 	<> */}
				{/* 		{appUser && viewingUser ? ( */}
				{/* 			<FollowButton */}
				{/* 				followerId={appUser.id} // Follower is the main user */}
				{/* 				followeeId={viewingUser.id} // Followee is the viewing user, the person is requested to follow */}
				{/* 			/> */}
				{/* 		) : ( */}
				{/* 			<Button disabled>Follow</Button> */}
				{/* 		)} */}
				{/* 	</> */}
				{/* )} */}

				{/* user posts */}
				<div className="mt-5">
					{posts.map(
						({
							id,
							userId,
							userName,
							userAvatarUrl,
							content,
							visibility,
							createdAt,
							updatedAt,
							isDeleted,
						}) => (
							<Post
								key={id} // no need to pass
								id={id}
								userId={userId}
								userName={userName}
								userAvatarUrl={userAvatarUrl}
								content={content}
								visibility={visibility}
								createdAt={createdAt}
								updatedAt={updatedAt}
								isDeleted={isDeleted}
							/>
						),
					)}
				</div>
			</div>
		</>
	)
}

================
File: app/activity/page.tsx
================
"use client"

import { Avatar, AvatarImage } from "@components/ui/Avatar"
import type { NotificationType } from "@prisma/client"
import { useQueryAppUser } from "@queries/client/appUser"
import { useQueryAllNotifications } from "@queries/client/noti"
import { avatarPlaceholder } from "@utils/image.helpers"

const notiMap: Record<string, string> = {
	FOLLOW: "followed",
	FOLLOW_SUGGEST: "should follow",
	COMMENT: "commented",
	TAG: "tagged",
	REACT: "reacted",
}

export default function ActivityPage() {
	const {
		data: user,
		isLoading: isUserLoading,
		isError: isUserError,
	} = useQueryAppUser()

	const {
		data: notiList,
		isLoading,
		isSuccess,
		isError,
		isFetching,
	} = useQueryAllNotifications({ userId: user?.id })

	if (isUserError) return <div>Error fetching your information 😢</div>
	if (isUserLoading) return <div>Fetching your information...</div>

	if (isError) return <div>Error loading activities 😢</div>
	if (isLoading || isFetching) return <div>Loading activities...</div>

	if (isSuccess)
		return (
			<>
				<div className="mt-[100px] flex-col gap-3">
					{notiList?.map((noti) => {
						return (
							<div
								key={noti.id}
								className="w-[600px] flex-y-center gap-1 rounded-lg bg-background-item p-6"
							>
								<div className="flex-y-center gap-3">
									<Avatar>
										<AvatarImage
											src={noti?.sender?.avatarUrl ?? avatarPlaceholder}
										/>
									</Avatar>
									<p>{noti?.sender?.userName}</p>
								</div>
								<div>
									<p>{notiMap[noti.notificationType as NotificationType]}</p>
								</div>
								<div>
									<p>you</p>
								</div>
							</div>
						)
					})}
				</div>
			</>
		)
}

================
File: app/protected/page.tsx
================
import { ROUTE } from "@constants/route"
import { useSupabaseServer } from "@hooks/supabase/server"
import { redirect } from "next/navigation"

export default async function ProtectedPage() {
	const supabase = useSupabaseServer()

	const {
		data: { user },
	} = await supabase.auth.getUser()

	if (!user) {
		return redirect(ROUTE.SIGN_IN)
	}

	return (
		<div className="flex w-full flex-1 flex-col items-center gap-20">
			<div className="w-full">
				<div className="bg-purple-950 py-6 text-center font-bold">
					This is a protected page that you can only see as an authenticated
					user
				</div>
				<nav className="flex h-16 w-full justify-center border-b border-b-foreground/10">
					<div className="flex w-full max-w-4xl items-center justify-between p-3 text-sm">
						{/* <AuthButton /> */}
					</div>
				</nav>
			</div>
		</div>
	)
}

================
File: app/search/page.tsx
================
"use server"
import SearchBar from "@components/ui/search/SearchBar"

export default async function SearchPage() {
	// const { data: user } = await supabase.auth.getUser()
	// const userId = user?.user?.id
	// const randomUserList = await getRandomUserList(userId, 10)

	return (
		<>
			<div className="mt-[100px] flex-col">
				<SearchBar />
				{/* {randomUserList && user && ( */}
				{/* 	<SearchList */}
				{/* 		searchResults={randomUserList} */}
				{/* 		appUserId={user?.user?.id} */}
				{/* 	/> */}
				{/* )} */}
			</div>
		</>
	)
}

================
File: app/settings/page.tsx
================
export default function SettingsPage() {
	return <>settings</>;
}

================
File: app/layout.tsx
================
import localFont from "next/font/local"
import "@styles/globals.css"
import NextTopLoader from "nextjs-toploader"
import "jotai-devtools/styles.css"
import { AppLayout } from "@components/layout"
import { LoadingScreen } from "@components/ui/loadings/loading-screen"
import { Toaster } from "@components/ui/toast/Toaster"
import QueryProvider from "@providers/QueryProvider"
import { Analytics } from "@vercel/analytics/react"
import { SpeedInsights } from "@vercel/speed-insights/next"
import { ThemeProvider } from "next-themes"

const geistSans = localFont({
	src: "../assets/fonts/GeistVF.woff",
	variable: "--font-geist-sans",
})

const geistMono = localFont({
	src: "../assets/fonts/GeistMonoVF.woff",
	variable: "--font-geist-mono",
})

const defaultUrl = process.env.VERCEL_URL
	? `https://${process.env.VERCEL_URL}`
	: "http://localhost:3000"

export const metadata = {
	metadataBase: new URL(defaultUrl),
	title: "Piz",
	description: "An experimental social media platform. WIP.",
}

export default function RootLayout({
	children,
}: {
	children: React.ReactNode
}) {
	return (
		<html
			lang="en"
			suppressHydrationWarning={true}
			className={`${geistSans.variable}${geistMono.variable}`}
		>
			<body className="bg-background" suppressHydrationWarning>
				<NextTopLoader
					color="#ff006e"
					initialPosition={0.1}
					crawlSpeed={200}
					height={5}
					crawl={true}
					showSpinner={false}
					easing="ease"
					speed={400}
					shadow={false}
					zIndex={1600}
					showAtBottom={false}
				/>
				<Analytics />
				<SpeedInsights />
				<QueryProvider>
					<LoadingScreen duration={200} />
					<ThemeProvider
						attribute="class"
						defaultTheme="system"
						enableSystem
						disableTransitionOnChange
					>
						<Toaster />
						<AppLayout>{children}</AppLayout>
					</ThemeProvider>
				</QueryProvider>
			</body>
		</html>
	)
}

================
File: app/middleware.ts
================
import { SUPABASE } from "@constants/dot-env";
import { createServerClient } from "@supabase/ssr";
import { type NextRequest, NextResponse } from "next/server";

export const updateSession = async (request: NextRequest) => {
	// This `try/catch` block is only here for the interactive tutorial.
	// Feel free to remove once you have Supabase connected.
	try {
		// Create an unmodified response
		let response = NextResponse.next({
			request: {
				headers: request.headers,
			},
		});

		const supabase = createServerClient(
			// biome-ignore lint/style/noNonNullAssertion: I dunno anything about supabase builtin function
			SUPABASE.URL!,
			// biome-ignore lint/style/noNonNullAssertion: I dunno anything about supabase builtin function
			SUPABASE.ANON_KEY!,
			{
				cookies: {
					getAll() {
						return request.cookies.getAll();
					},
					setAll(cookiesToSet) {
						for (const { name, value } of cookiesToSet) {
							request.cookies.set(name, value);
						}

						response = NextResponse.next({
							request,
						});

						for (const { name, value, options } of cookiesToSet) {
							response.cookies.set(name, value, options);
						}
					},
				},
			},
		);

		// This will refresh session if expired - required for Server Components
		// https://supabase.com/docs/guides/auth/server-side/nextjs
		await supabase.auth.getUser();

		return response;
	} catch (error) {
		console.log("Supabase Middleware Error: ", error);
		// If you are here, a Supabase client could not be created!
		// This is likely because you have not set up environment variables.
		// Check out http://localhost:3000 for Next Steps.
		return NextResponse.next({
			request: {
				headers: request.headers,
			},
		});
	}
};

================
File: app/page.tsx
================
import PostFormDesktop from "@components/ui/post/PostFormDesktop"
import PostList from "@components/ui/post/PostList"
import type { Post as IPost } from "@prisma/client"
import { getQueryClient } from "@queries/getQueryClient"
import { getAllPosts } from "@queries/server/post"
import { HydrationBoundary, dehydrate } from "@tanstack/react-query"
import { queryKey } from "@utils/queryKeyFactory"

// Must be created outside of the component,
// to avoid recreating the instance on each render

const queryClient = getQueryClient()
async function prefetchPosts() {
	await queryClient.prefetchQuery({
		queryKey: queryKey.post.all,
		queryFn: async () => getAllPosts(),
	})

	const allPosts = queryClient.getQueryData<IPost[]>(queryKey.post.all)
	// if (allPosts && Array.isArray(allPosts)) {
	// 	await Promise.all(
	// 		allPosts.map(async (post) => {
	// 			await queryClient.prefetchQuery({
	// 				queryKey: [
	// 					queryKey.post.selectReactionByUser({
	// 						userId: post.userId,
	// 						// postId: post.id,
	// 					}),
	// 				],
	// 				queryFn: async () =>
	// 					getPostReaction({ userId: post.userId, postId: post.id }),
	// 			})
	// 			await queryClient.prefetchQuery({
	// 				queryKey: queryKey.post.selectCount(post.id),
	// 				queryFn: async () => getPostCounts({ postId: post.id }),
	// 			})
	// 			await queryClient.prefetchQuery({
	// 				queryKey: queryKey.comment.selectPost(post.id),
	// 				queryFn: async () => getAllCommentsByPost({ postId: post.id }),
	// 			})
	// 		}),
	// 	)
	// }
}

async function prefetchUser() {
	await queryClient.prefetchQuery({
		queryKey: queryKey.user.selectMain(),
		// queryFn: async () => useSupabaseUser,
	})

	const appUser = queryClient.getQueryData(queryKey.user.selectMain())
	if (appUser) {
		await queryClient.prefetchQuery({
			queryKey: queryKey.noti.all,
			// queryFn: async () => getAllNotifications({ receiverId: appUser.id }),
		})
	}
}

export default async function HomePage() {
	await Promise.all([prefetchPosts(), prefetchUser()])

	return (
		<>
			<div className="mt-[100px] flex-col gap-2">
				<PostFormDesktop />
				<HydrationBoundary state={dehydrate(queryClient)}>
					<PostList />
				</HydrationBoundary>
			</div>
		</>
	)
}

================
File: assets/images/down-right-arrow.svg
================
<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg fill="#ffffff" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
	 width="800px" height="800px" viewBox="0 0 342.674 342.674"
	 xml:space="preserve">
<g>
	<g>
		<path d="M18.36,36.83c0-3.672,0-7.956-1.224-11.628c-0.612-3.672-7.344-3.672-7.956,0c-0.612,3.672-0.612,7.344-1.224,11.016
			c0,2.448,0,4.284,0,6.732c0,1.224,0,2.448,0.612,3.672c0.612,0.612,1.224,1.224,1.836,1.836c-1.224-0.612-1.224-1.224-0.612,0
			c1.224,2.448,4.896,2.448,5.508,0v-0.612l0,0c1.224-1.224,1.224-2.448,1.224-4.284C18.36,41.726,18.36,39.278,18.36,36.83z"/>
		<path d="M7.956,87.014c0-1.836-2.448-1.836-3.06,0c-0.612,11.016-3.672,22.032-3.672,33.048c0,6.732,10.404,6.732,10.404,0
			C11.628,109.046,9.18,98.03,7.956,87.014z"/>
		<path d="M12.24,157.394c0.612-2.448-3.06-4.896-4.896-1.836c-2.448,5.508-4.284,11.016-4.896,17.136
			c-0.612,5.508-1.836,11.016,0.612,15.912c1.224,2.447,4.896,2.447,6.12,0c2.448-3.672,1.836-7.957,1.836-12.24
			C11.016,169.634,11.628,163.514,12.24,157.394z"/>
		<path d="M11.016,241.238c-2.448-6.12-4.284-11.628-4.896-17.748c-0.612-3.672-6.12-3.672-6.12,0c0,5.508,0,11.016,0.612,15.912
			c0.612,5.508,1.836,12.852,6.12,16.523c1.836,1.836,6.12,1.225,6.732-1.836C14.688,249.194,12.852,245.522,11.016,241.238z"/>
		<path d="M48.348,287.138c-3.06-2.447-7.956-1.836-11.628-3.06c-4.896-1.224-8.568-4.284-10.404-9.18
			c-1.224-3.061-6.12-0.612-4.896,1.836c1.836,6.12,5.508,10.403,10.404,13.464c4.896,2.448,12.24,5.508,17.136,1.836
			C50.184,290.81,50.184,288.362,48.348,287.138z"/>
		<path d="M108.936,293.87c-7.344-6.732-19.584-4.896-28.764-4.284c-4.284,0-4.284,6.12,0,6.732c4.284,0,8.568,0.611,12.852,1.224
			s9.18,2.448,13.464,1.836C108.936,299.378,111.384,296.318,108.936,293.87z"/>
		<path d="M175.031,292.646c-10.404-6.12-25.091-4.284-36.107,0c-4.284,1.836-2.448,7.956,1.836,6.731
			c11.016-2.448,21.42,0,32.436,0.612C177.48,300.603,178.703,294.482,175.031,292.646z"/>
		<path d="M236.844,289.586c-9.791-3.06-20.809-1.224-30.6-0.612c-4.896,0-4.896,7.345,0,7.345c9.791,0.611,21.42,2.447,30.6-0.612
			C240.516,295.094,240.516,290.81,236.844,289.586z"/>
		<path d="M294.984,287.138c-4.285-4.283-9.793-2.447-15.301-1.836c-6.119,0.612-12.24,1.836-18.359,3.672
			c-4.285,1.836-3.061,8.568,1.836,7.345c6.119-1.836,12.24-2.448,18.359-2.448c4.896,0,9.18,1.224,12.852-2.448
			C296.207,290.81,296.207,288.362,294.984,287.138z"/>
		<path d="M337.824,282.854c-14.076-3.673-23.869-15.301-37.332-20.809c-4.896-1.836-7.344,5.508-3.672,8.568
			c9.18,6.12,17.135,14.688,26.928,20.808c-3.672,3.061-7.344,6.12-11.629,9.181c-4.283,3.06-11.016,4.283-14.076,8.567
			c-1.836,2.448-2.447,6.12,0,8.568c11.629,10.404,34.885-14.688,42.229-22.645C344.557,290.81,342.721,284.078,337.824,282.854z"/>
	</g>
</g>
</svg>

================
File: atoms/theme.ts
================
import { atomWithStorage } from "jotai/utils"

type ICustomTheme = {
	group: "light" | "dark"
	label: string
	value: string
}

export const customThemes: ICustomTheme[] = [
	{
		group: "light",
		label: "Big Squares",
		value: "light_big_squares",
	},
	{
		group: "light",
		label: "Small Squares",
		value: "light_small_squares",
	},
	{
		group: "light",
		label: "Gradient Violet",
		value: "light_gradient_violet",
	},
	{
		group: "dark",
		label: "Small Squares",
		value: "dark_small_squares",
	},
	{
		group: "dark",
		label: "Gradient Violet",
		value: "dark_gradient_violet",
	},
	{
		group: "dark",
		label: "Dots",
		value: "dark_dots",
	},
]

export const customThemeAtom = atomWithStorage<ICustomTheme>(
	"piz_custom_theme",
	customThemes[5],
)

================
File: atoms/user.ts
================
import type { User } from "@supabase/supabase-js"
import { atomWithStorage } from "jotai/utils"

export const userAtom = atomWithStorage<User | null>("piz_current_user", null)

userAtom.debugLabel = "user"

================
File: components/animation/GlibberishText.tsx
================
"use client"
import { cn } from "@utils/cn"
import { useEffect, useState } from "react"

interface GibberishTextProps {
	/* The text to animate */
	text: string
	/* The class name to apply to each letter */
	className?: string
	/* The colors to cycle through during the transformation */
	colors?: string[]
}

interface LetterProps {
	letter: string
	className?: string
	colors?: string[]
}

const Letter = ({
	letter,
	className,
	colors = ["text-foreground"],
}: LetterProps) => {
	const [code, setCode] = useState(letter.toUpperCase().charCodeAt(0))
	const [colorIndex, setColorIndex] = useState(0)

	useEffect(() => {
		let count = Math.floor(Math.random() * 10) + 5
		const interval = setInterval(() => {
			setCode(() => Math.floor(Math.random() * 26) + 65)
			setColorIndex((prevIndex) => (prevIndex + 1) % colors.length)
			count--
			if (count === 0) {
				setCode(letter.toUpperCase().charCodeAt(0))
				clearInterval(interval)
			}
		}, 60)

		return () => clearInterval(interval)
	}, [letter, colors.length])

	return (
		<span className={cn("whitespace-pre", colors[colorIndex], className)}>
			{String.fromCharCode(code)}
		</span>
	)
}

/**
 * Animate each letter in the text using gibberish text effect.
 * Renders a random letter first and then animates it to the correct letter.
 */
export default function GibberishText({
	text,
	className,
	colors,
}: GibberishTextProps) {
	return (
		<>
			{text.split("").map((letter, index) => {
				return (
					<Letter
						className={className}
						letter={letter}
						colors={colors}
						key={`${index}-${letter}`}
					/>
				)
			})}
		</>
	)
}

================
File: components/layout/footer/index.tsx
================
export default function Footer() {
	return (
		<>
			<footer className="desktop-only absolute bottom-0 m-2 w-screen flex-center">
				<div className="mx-auto w-full max-w-screen-xl p-4 text-center md:flex md:items-center md:justify-between">
					<span className="text-sm text-white sm:text-center">
						© 2024-2025 <span className="hover:underline">Piz™</span>. &nbsp;All
						Rights Reserved.
					</span>
				</div>
			</footer>
		</>
	)
}

================
File: components/layout/headerBar/HeaderBarCustomTheme.tsx
================
import { customThemeAtom, customThemes } from "@atoms/theme"
import { Button } from "@components/ui/Button"
import {
	DropdownMenu,
	DropdownMenuContent,
	DropdownMenuLabel,
	DropdownMenuRadioGroup,
	DropdownMenuRadioItem,
	DropdownMenuSeparator,
	DropdownMenuTrigger,
} from "@components/ui/DropdownMenu"
import { useAtom } from "jotai"
import { Moon, PaintbrushVertical, Sun } from "lucide-react"
import { useTheme } from "next-themes"

export const HeaderBarCustomTheme = () => {
	const [customTheme, setCustomTheme] = useAtom(customThemeAtom)
	const { setTheme } = useTheme()

	const handleCustomTheme = (value: string) => {
		const selectedCustomTheme =
			customThemes.find((theme) => theme.value === value) ?? customThemes[0]

		setTheme(selectedCustomTheme.group)
		setCustomTheme(selectedCustomTheme)
	}

	return (
		<>
			<DropdownMenu>
				<DropdownMenuTrigger asChild>
					<Button variant="ghost">
						<PaintbrushVertical />
					</Button>
				</DropdownMenuTrigger>
				<DropdownMenuContent className="w-56">
					<DropdownMenuLabel>Select a theme</DropdownMenuLabel>
					<DropdownMenuSeparator />
					<DropdownMenuRadioGroup
						value={customTheme.value}
						onValueChange={handleCustomTheme}
					>
						{customThemes.map((theme) => (
							<DropdownMenuRadioItem key={theme.label} value={theme.value}>
								<div className="flex-y-center gap-2">
									{theme.group === "dark" ? (
										<Moon size={13} />
									) : (
										<Sun size={13} />
									)}
									<p>{theme.label}</p>
								</div>
							</DropdownMenuRadioItem>
						))}
					</DropdownMenuRadioGroup>
				</DropdownMenuContent>
			</DropdownMenu>
		</>
	)
}

================
File: components/layout/headerBar/HeaderBarDropdownMenu.tsx
================
"use client"
import { userAtom } from "@atoms/user"
import { Button } from "@components/ui/Button"
import {
	DropdownMenu,
	DropdownMenuContent,
	DropdownMenuGroup,
	DropdownMenuItem,
	DropdownMenuSeparator,
	DropdownMenuTrigger,
} from "@components/ui/DropdownMenu"
import { ThemeToggle } from "@components/ui/toggle/ThemeToggle"
import { ROUTE } from "@constants/route"
import {
	useQueryClientClearCache,
	useQueryClientRemoveQueries,
} from "@queries/client/remove"
import { useQueryClient } from "@tanstack/react-query"
import { cn } from "@utils/cn"
import { queryKey } from "@utils/queryKeyFactory"
import { useAtom } from "jotai"
import { RESET } from "jotai/utils"
import { Archive, LogOut, MenuIcon, SettingsIcon } from "lucide-react"
import type { Route } from "next"
import { useTheme } from "next-themes"
import Link from "next/link"
import { useRouter } from "nextjs-toploader/app"

const iconClass = "mr-2 h-4 w-4"

const items = [
	{
		href: ROUTE.SAVED_POSTS,
		label: "Saved posts",
		icon: <Archive className={iconClass} />,
	},
	{
		href: ROUTE.SETTINGS,
		label: "Settings",
		icon: <SettingsIcon className={iconClass} />,
	},
]

export default function HeaderDropdownMenu() {
	const { theme, setTheme } = useTheme()
	const router = useRouter()
	const dropdownMenuItemClass = cn(
		"cursor-pointer",
		theme === "dark" ? "dark-common" : "light-common",
	)

	const queryClient = useQueryClient()
	const [user, setUser] = useAtom(userAtom)

	const handleSignOut = async () => {
		try {
			// Clear query cache before signing out
			useQueryClientClearCache(queryClient)
			// Remove queries from cache
			useQueryClientRemoveQueries(queryClient, queryKey.user.all.toString())
			// Reset user atom
			setUser(RESET)
			// Sign out
			await supabase.auth.signOut()
			// Redirect to sign-in page
			router.push("/sign-in" as Route)
		} catch (error) {
			console.error("An error occurred during sign out", error)
		}
	}

	if (!user)
		return (
			<>
				<Link href={ROUTE.SIGN_UP} className="desktop-only">
					<Button variant="link">Create account</Button>
				</Link>
				<Link href={ROUTE.SIGN_IN}>
					<Button>Log in</Button>
				</Link>
			</>
		)

	return (
		<>
			<DropdownMenu>
				<DropdownMenuTrigger asChild>
					<Button variant="ghost">
						<MenuIcon />
					</Button>
				</DropdownMenuTrigger>
				<DropdownMenuContent className="w-56">
					<DropdownMenuGroup>
						{items.map(({ href, icon, label }, index) => (
							<Link key={href + index.toString()} href={href}>
								<DropdownMenuItem key={label} className={dropdownMenuItemClass}>
									{icon}
									<span>{label}</span>
								</DropdownMenuItem>
							</Link>
						))}
					</DropdownMenuGroup>
					<DropdownMenuSeparator />
					<DropdownMenuItem
						className={dropdownMenuItemClass}
						onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
					>
						<ThemeToggle
							noButton
							iconClassName={iconClass}
							darkModeLabel="Toggle dark mode"
							lightModeLabel="Toggle light mode"
						/>
					</DropdownMenuItem>
					<DropdownMenuSeparator />
					<DropdownMenuItem
						className={dropdownMenuItemClass}
						onClick={handleSignOut}
					>
						<div className="flex w-full items-center">
							<LogOut className={iconClass} />
							<span>Log out</span>
						</div>
					</DropdownMenuItem>
				</DropdownMenuContent>
			</DropdownMenu>
		</>
	)
}

================
File: components/layout/headerBar/HeaderBarLogo.tsx
================
"use client"

import { Logo } from "@components/ui/Logo"
import { cn } from "@utils/cn"
import { usePathname } from "next/navigation"

export default function HeaderBarLogo() {
	const pathname = usePathname()
	const pathSegments = pathname.split("/").filter((segment) => segment)
	return (
		<>
			{/* if URL length has more than 2 items then show in center, else show in leftmost */}
			<div
				className={cn(
					"mobile-only flex-grow",
					pathSegments.length >= 2 && "flex-center",
				)}
			>
				<Logo />
			</div>
		</>
	)
}

================
File: components/layout/headerBar/HeaderBarNavigation.tsx
================
"use client"

import { ChevronLeft } from "lucide-react"
import { usePathname } from "next/navigation"

export default function HeaderBarNavigation() {
	const pathname = usePathname()
	const pathSegments = pathname.split("/").filter((segment) => segment)

	return (
		<>
			{/* if URL length has more than 2 items then show */}
			{pathSegments.length >= 2 && (
				<div className="mobile-only">
					<ChevronLeft />
				</div>
			)}
		</>
	)
}

================
File: components/layout/headerBar/index.tsx
================
"use client"

import { HeaderBarCustomTheme } from "@components/layout/headerBar/HeaderBarCustomTheme"
import { Logo } from "@components/ui/Logo"
import HeaderDropdownMenu from "./HeaderBarDropdownMenu"
import HeaderBarLogo from "./HeaderBarLogo"
import HeaderBarNavigation from "./HeaderBarNavigation"

export default function HeaderBar({ className }: { className: string }) {
	return (
		<>
			<header className={className}>
				{/* lefty - desktop view */}
				<div className="desktop-only gap-4">
					<Logo />
				</div>

				{/* lefty - mobile view */}
				<HeaderBarNavigation />

				{/* center */}
				<HeaderBarLogo />

				{/* righty */}
				<div className="ml-auto flex items-center gap-4">
					<HeaderBarCustomTheme />
					<HeaderDropdownMenu />
				</div>
			</header>
		</>
	)
}

================
File: components/layout/sideBar/index.tsx
================
import DesktopSideBar from "./SidebarDesktop"
import MobileSideBar from "./SidebarMobile"

export default function SideBar({
	mobileSideBarClassName,
}: { mobileSideBarClassName: string }) {
	return (
		<>
			<DesktopSideBar />
			<MobileSideBar mobileSideBarClassName={mobileSideBarClassName} />
		</>
	)
}

================
File: components/layout/sideBar/SidebarDesktop.tsx
================
"use client"
import { ROUTE } from "@constants/route"
import { Bell, Home, Search, User } from "lucide-react"
import SideBarItem from "./SidebarItem"

export default function DesktopSideBar() {
	return (
		<>
			<div className="desktop-only fixed bottom-0 h-screen p-2">
				<div className="h-full flex-center flex-col gap-2">
					<SideBarItem href={ROUTE.HOME} icon={Home} />
					<SideBarItem href={ROUTE.SEARCH} icon={Search} />
					<SideBarItem href={ROUTE.ACTIVITY} icon={Bell} />
					<SideBarItem href="profile" icon={User} />
				</div>
			</div>
		</>
	)
}

================
File: components/layout/sideBar/SidebarItem.tsx
================
"use client"

import { userAtom } from "@atoms/user"
import { Button } from "@components/ui/Button"
import PostForm from "@components/ui/form/PostForm"
import WelcomeModal from "@components/ui/modal/WelcomeModal"
import { ROUTE } from "@constants/route"
import { cn } from "@utils/cn"
import { useAtomValue } from "jotai"
import { type LucideIcon, UserRoundX } from "lucide-react"
import type { Route } from "next"
import { useTheme } from "next-themes"
import Link from "next/link"
import { usePathname } from "next/navigation"

type SideBarItemProps = {
	href: string
	icon: LucideIcon
}

const sizes =
	"mobile_s:w-[60px] mobile_m:w-[60px] mobile_l:w-[70px] mobile_s:h-[40px] tablet:h-[70px]"

const sideBarItemClass = cn(
	"dark:hover:background-item flex items-center gap-3 rounded-md font-medium text-sm transition-colors hover:bg-muted flex-center",
	sizes,
)

export default function SideBarItem({ href, icon: Icon }: SideBarItemProps) {
	const pathname = usePathname()
	const { theme } = useTheme()

	// Get user data from query cache
	const user = useAtomValue(userAtom)
	const userName = user?.user_metadata?.userName

	// Icon fill for different pages
	const iconFill =
		pathname === href ? (theme === "dark" ? "white" : "black") : "none"

	// If user is signed in and the href is post
	if (href === "post" && userName) {
		return (
			<PostForm>
				<Button variant="ghost" className={sideBarItemClass}>
					<Icon fill={iconFill} />
				</Button>
			</PostForm>
		)
	}

	// If user is signed in and the href is profile
	if (href === "profile" && userName) {
		return (
			<Link
				prefetch={true}
				href={`/${userName}` as Route}
				aria-disabled={!userName && true}
			>
				<Button
					variant="ghost"
					className={cn(sideBarItemClass, !userName && "pointer-events-none")}
				>
					{!userName ? <UserRoundX className="w-full" /> : <Icon />}
				</Button>
			</Link>
		)
	}

	// If the href is home despite user is authenticated or not
	if (href === ROUTE.HOME)
		return (
			<>
				<Link prefetch={true} href={href as Route} className={sideBarItemClass}>
					<Icon fill={iconFill} />
				</Link>
			</>
		)

	// If user is not signed in
	if (!userName) {
		return (
			<>
				<WelcomeModal>
					<Button variant="ghost" className={sideBarItemClass}>
						<Icon fill={iconFill} />
					</Button>
				</WelcomeModal>
			</>
		)
	}

	// If user is signed in
	return (
		<>
			<Link prefetch={true} href={href as Route} className={sideBarItemClass}>
				<Icon fill={iconFill} />
			</Link>
		</>
	)
}

================
File: components/layout/sideBar/SidebarMobile.tsx
================
"use client"

import { ROUTE } from "@constants/route"
import { cn } from "@utils/cn"
import { Bell, Home, Plus, Search, User } from "lucide-react"
import SideBarItem from "./SidebarItem"

export default function MobileSideBar({
	mobileSideBarClassName,
}: { mobileSideBarClassName: string }) {
	return (
		<div
			className={cn(
				"mobile-only right-0 bottom-0 left-0 z-50 h-18 w-screen bg-background p-2",
				mobileSideBarClassName,
			)}
		>
			<div className="flex-center">
				<div className="max-w-[425px] flex-between gap-0 mobile-l:gap-5 mobile_m:gap-3 mobile_s:gap-0 py-1">
					<SideBarItem href={ROUTE.HOME} icon={Home} />
					<SideBarItem href={ROUTE.SEARCH} icon={Search} />
					<SideBarItem href="post" icon={Plus} />
					<SideBarItem href={ROUTE.ACTIVITY} icon={Bell} />
					<SideBarItem href="profile" icon={User} />
				</div>
			</div>
		</div>
	)
}

================
File: components/layout/index.tsx
================
"use client"
import { customThemeAtom } from "@atoms/theme"
import HeaderBar from "@components/layout/headerBar"
import SideBar from "@components/layout/sideBar"
import { Avatar, AvatarImage } from "@components/ui/Avatar"
import { useToast } from "@components/ui/toast/useToast"
import { useQueryNotification } from "@queries/client/noti"
import { useQueryClient } from "@tanstack/react-query"
import { cn } from "@utils/cn"
import { avatarPlaceholder } from "@utils/image.helpers"
import { useAtomValue } from "jotai"
import { useTheme } from "next-themes"
import React from "react"
import { useEffect } from "react"

const AppLayout = ({ children }: { children: React.ReactNode }) => {
	const [isVisible, setIsVisible] = React.useState(true)
	const [lastScrollY, setLastScrollY] = React.useState(0)
	const [newNotiId, setNewNotiId] = React.useState<number | null>(null)

	useEffect(() => {
		const handleScroll = () => {
			const currentScrollY = window.scrollY

			if (currentScrollY > lastScrollY) {
				setIsVisible(false)
			} else {
				setIsVisible(true)
			}

			setLastScrollY(currentScrollY)
		}

		window.addEventListener("scroll", handleScroll, { passive: true })

		return () => window.removeEventListener("scroll", handleScroll)
	}, [lastScrollY])

	const headerBarIsVisible = isVisible ? "transform-y-0" : "-translate-y-full"
	const sideBarIsVisible = isVisible ? "transform-y-0" : "translate-y-full"

	// Subscribe to notification changes
	const queryClient = useQueryClient()
	const { toast } = useToast()

	const { data: newNoti, isSuccess } = useQueryNotification({
		notificationId: newNotiId,
	})
	useEffect(() => {
		if (isSuccess && newNoti) {
			toast({
				title: "New follower",
				description: (
					<div className="flex items-center space-x-2">
						<Avatar className="h-8 w-8">
							<AvatarImage
								src={newNoti.sender?.avatarUrl ?? avatarPlaceholder}
								alt="Follower Avatar"
							/>
						</Avatar>
						<div className="flex-y-center gap-1 font-medium">
							<p className="font-bold">{newNoti.sender?.userName}</p>
							<p>is following you</p>
						</div>
					</div>
				),
			})
		}
		;() => setNewNotiId(null)
	}, [isSuccess, newNoti, toast])

	const { theme } = useTheme()
	const customTheme = useAtomValue(customThemeAtom)

	return (
		<>
			<div className="relative flex h-screen-auto w-full flex-col text-foreground transition-colors duration-300">
				{customTheme.value === "light_small_squares" && (
					<div className="-z-10 absolute inset-0 h-full w-full bg-[linear-gradient(to_right,#8080800a_1px,transparent_1px),linear-gradient(to_bottom,#8080800a_1px,transparent_1px)] bg-[size:14px_24px] bg-white" />
				)}
				{customTheme.value === "light_big_squares" && (
					<div className="-z-10 absolute inset-0 h-full w-full bg-[linear-gradient(to_right,#f0f0f0_1px,transparent_1px),linear-gradient(to_bottom,#f0f0f0_1px,transparent_1px)] bg-[size:6rem_4rem] bg-white" />
				)}
				{customTheme.value === "light_gradient_violet" && (
					<div className="-z-10 absolute inset-0 h-full w-full bg-white [background:radial-gradient(125%_125%_at_50%_10%,#fff_40%,#63e_100%)]" />
				)}
				{customTheme.value === "dark_gradient_violet" && (
					<div className="-z-10 absolute inset-0 h-full w-full items-center px-5 py-24 [background:radial-gradient(125%_125%_at_50%_10%,#000_40%,#63e_100%)]" />
				)}
				{customTheme.value === "dark_small_squares" && (
					<div className="absolute top-0 right-0 bottom-0 left-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#8080800a_1px,transparent_1px)] bg-[size:14px_24px]" />
				)}
				{customTheme.value === "dark_dots" && (
					<div className="absolute top-0 z-[-2] h-full w-full bg-[#000000] bg-[radial-gradient(#ffffff33_1px,#00000d_1px)] bg-[size:20px_20px]" />
				)}

				<HeaderBar
					className={cn(
						"fixed top-0 right-0 left-0 z-50 flex-between bg-background px-3 py-2 shadow-md transition-transform duration-300 ease-in-out",
						headerBarIsVisible,
					)}
				/>

				<div>
					<SideBar
						mobileSideBarClassName={cn(
							"fixed shadow-md transition-transform duration-300 ease-in-out",
							sideBarIsVisible,
						)}
					/>
					<main className="mobile_s:mx-1 ml-[100px] mobile_s:ml-0 h-auto mobile_s:w-full flex-center">
						{children}
					</main>
				</div>
			</div>
		</>
	)
}

export { AppLayout }

================
File: components/ui/button/AuthButton.tsx
================
import { Button } from "@components/ui/Button"
import { RotateCw } from "lucide-react"

const AuthButton = ({
	isLoading,
	isPasswordStrong,
	normalLabel,
	loadingLabel,
}: {
	isLoading: boolean
	isPasswordStrong: boolean
	normalLabel: string
	loadingLabel: string
}) => {
	if (isLoading || !isPasswordStrong)
		return (
			<Button type="submit" disabled={true}>
				<div className="flex-y-center gap-4">
					{isLoading && <RotateCw className="size-4 animate-spin" />}
					<p>{normalLabel}</p>
				</div>
			</Button>
		)

	return (
		<>
			<Button type="submit" disabled={isLoading}>
				{normalLabel}
			</Button>
		</>
	)
}

export default AuthButton

================
File: components/ui/button/FollowButton.tsx
================
"use client"

import { userAtom } from "@atoms/user"
import { Button } from "@components/ui/Button"
import {
	checkIsFollowing,
	createFollow,
	deleteFollow,
} from "@queries/server/follow"
import { useAtomValue } from "jotai"
import React from "react"

type FollowButtonProps = {
	followerId: string
	followeeId: string
	className?: string
}

type RequestStatus = "ACCEPTED" | "PENDING" | "REJECTED"

export default function FollowButton({
	followerId, // the main user
	followeeId, // the user to follow
	className,
}: FollowButtonProps) {
	// Follow state
	const [followStatus, setFollowStatus] = React.useState<string | null>(null)

	const appUser = useAtomValue(userAtom)
	const appUserId = appUser?.id

	// Fetch if the user is following the user
	React.useEffect(() => {
		try {
			const handleCheckIsFollowing = async () => {
				const existingFollow = await checkIsFollowing({
					followerId,
					followeeId,
				})
				// If the user is following the user
				if (existingFollow?.requestStatus === ("ACCEPTED" as RequestStatus)) {
					setFollowStatus("ACCEPTED" as RequestStatus)
				}

				// If the request is pending
				if (existingFollow?.requestStatus === ("PENDING" as RequestStatus)) {
					setFollowStatus("PENDING" as RequestStatus)
				}
			}
			handleCheckIsFollowing()
		} catch (error) {
			console.error("Client Error checking if user is following", error)
		}
	}, [followerId, followeeId])

	// Follow the viewing user
	const handleFollow = async () => {
		const newFollow = await createFollow({ followerId, followeeId })
		if (newFollow?.requestStatus === ("ACCEPTED" as RequestStatus)) {
			setFollowStatus("ACCEPTED" as RequestStatus)
		}

		if (newFollow?.requestStatus === ("PENDING" as RequestStatus)) {
			setFollowStatus("PENDING" as RequestStatus)
		}
	}

	// Unfollow the viewing user
	const handleUnfollow = async () => {
		const deletedFollow = await deleteFollow({ followerId, followeeId })
		if (deletedFollow) setFollowStatus(null)
	}

	// If the user is viewing their own profile
	if (appUserId === followeeId) return null

	// If the request is (already) accepted
	if (followStatus === "ACCEPTED")
		return (
			<Button
				onClick={handleUnfollow}
				className={`${className} bg-pink-600 font-bold text-white hover:bg-pink-400`}
			>
				Following
			</Button>
		)

	// If the request is pending
	if (followStatus === "PENDING")
		return (
			<Button
				onClick={handleUnfollow}
				className={`${className} bg-cyan-500 font-italic text-white hover:bg-cyan-400`}
			>
				Pending
			</Button>
		)

	// If the user is not following or requesting to follow the viewing user
	return (
		<Button className={`${className}`} onClick={handleFollow}>
			Follow
		</Button>
	)
}

================
File: components/ui/comment/CommentCommentButton.tsx
================
"use client"

import {
	AlertDialog,
	AlertDialogAction,
	AlertDialogCancel,
	AlertDialogContent,
	AlertDialogDescription,
	AlertDialogFooter,
	AlertDialogHeader,
	AlertDialogTitle,
} from "@components/ui/AlertDialog"
import { Button } from "@components/ui/Button"
import { Dialog, DialogContent } from "@components/ui/Dialog"
import { Textarea } from "@components/ui/Textarea"
import type { PostVisibilityEnumType } from "@components/ui/form/PostForm"
import type { PostCounts } from "@components/ui/post/PostReactButton"
import PostUserInfo from "@components/ui/post/PostUserInfo"
import { type CreateCommentProps, createComment } from "@queries/server/comment"
import { useMutation, useQueryClient } from "@tanstack/react-query"
import { cn } from "@utils/cn"
import { queryKey } from "@utils/queryKeyFactory"
import { generateBase64uuid } from "@utils/uuid.helpers"
import { HashIcon, ImageIcon, MenuIcon, MessageSquare } from "lucide-react"
import React from "react"

type CommentCommentButtonProps = {
	initialCommentCount: number
	className?: string
	wrapperClassName?: string
	userId: string
	userAvatarUrl: string | null
	userName: string | null
	postId: string
	postContent: string
	postVisibility?: PostVisibilityEnumType
	postCreatedAt: Date
	postUpdatedAt: Date | null
	parentId: string
	degree: number
}

// Comment characters limit
const charsLimit = 550

export default function CommentCommentButton({
	className,
	wrapperClassName,
	initialCommentCount,
	userId,
	userAvatarUrl,
	userName,
	postId,
	postContent,
	postVisibility,
	postCreatedAt,
	postUpdatedAt,
	parentId,
	degree,
}: CommentCommentButtonProps) {
	const [modalIsOpen, setOpenModal] = React.useState<boolean>(false)
	const [discardAlertIsOpen, setOpenDiscardAlert] =
		React.useState<boolean>(false)
	const [userInput, setUserInput] = React.useState("")
	const textareaRef = React.useRef<HTMLTextAreaElement>(null)

	const handleInputChange = React.useCallback(
		(e: React.ChangeEvent<HTMLTextAreaElement>) => {
			setUserInput(e.target.value)
		},
		[],
	)

	const queryClient = useQueryClient()

	const addCommentMutation = useMutation({
		mutationKey: queryKey.comment.insert(),
		mutationFn: async (newComment: CreateCommentProps) =>
			await createComment(newComment),
		onMutate: async (newComment) => {
			// Cancel any outgoing refetches to not overwrite our optimistic updates
			await queryClient.cancelQueries({
				queryKey: queryKey.comment.all,
			})

			// Snapshot the previous value
			const previousComments = queryClient.getQueryData(queryKey.comment.all)

			queryClient.setQueryData(queryKey.comment.all, (old: Comment[]) => [
				newComment,
				...old,
			])

			queryClient.setQueryData(queryKey.comment.selectCountByPost(postId), {
				noReactions: 0,
				noShares: 0,
				noComments: 0,
			})
			queryClient.setQueryData(
				queryKey.comment.selectReactionByUser({
					userId,
					commentId: newComment.id,
				}),
				null,
			)
			queryClient.setQueryData(
				queryKey.post.selectCount(postId),
				(prev: PostCounts) => ({
					...prev,
					noComments: prev.noComments + 1,
				}),
			)

			// Return a context object with the snapshotted value
			return { previousComments }
		},
	})

	const handleSubmitComment = () => {
		const newComment: CreateCommentProps = {
			id: generateBase64uuid(),
			postId: postId,
			parentId: parentId,
			degree: degree + 1,
			userId: userId,
			userName: userName,
			userAvatarUrl: userAvatarUrl,
			content: userInput,
		}

		if (userName !== null) {
			addCommentMutation.mutate(newComment)
		} else {
			throw new Error("Comment failed: User name or user avatar url is unknown")
		}

		setOpenModal(false)
		setUserInput("")
		// setCommentCount(commentCount + 1)
	}

	const handleOpenDiscardAlert = () => {
		if (userInput.length > 0) {
			// If the value is not empty, open the alert
			setOpenDiscardAlert(true)
		}
	}

	// Textarea auto increases its height on value length
	// biome-ignore lint/correctness/useExhaustiveDependencies: value is only needed here
	React.useEffect(() => {
		if (textareaRef.current) {
			textareaRef.current.style.height = "auto"
			textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`
		}
	}, [userInput])

	return (
		<>
			<div className={wrapperClassName}>
				<Button
					variant="ghost"
					className={cn(className, "max-w-[100px]")}
					onClick={() => setOpenModal(!modalIsOpen)}
				>
					<MessageSquare />
				</Button>
				<span>{initialCommentCount}</span>
			</div>

			<Dialog open={modalIsOpen} onOpenChange={setOpenModal}>
				<DialogContent
					className="flex-col rounded-lg border-0"
					onPointerDownOutside={handleOpenDiscardAlert}
				>
					<PostUserInfo
						userName={userName}
						userAvatarUrl={userAvatarUrl}
						content={postContent}
						visibility={postVisibility}
						createdAt={postCreatedAt}
						updatedAt={postUpdatedAt}
						appUserName={userName}
					/>

					{/* form */}
					<div className="mb-8 w-full flex-start flex-col gap-2">
						<Textarea
							ref={textareaRef}
							value={userInput}
							onChange={handleInputChange}
							placeholder={cn("Reply to ", userName)}
							className=" min-h-[10px] resize-none border-none p-0 focus-visible:ring-0"
						/>
						<div className="flex space-x-4">
							<ImageIcon />
							<HashIcon />
							<MenuIcon />
						</div>
					</div>

					{/* post button */}
					<Button
						onClick={handleSubmitComment}
						// if charsLimit is reached or value is empty -> disable
						disabled={userInput.length > charsLimit || userInput.length === 0}
					>
						Reply
					</Button>
				</DialogContent>
			</Dialog>

			{/* show when value is not empty */}
			<AlertDialog open={discardAlertIsOpen} onOpenChange={setOpenDiscardAlert}>
				<AlertDialogContent>
					<AlertDialogHeader>
						<AlertDialogTitle>Discard comment ?</AlertDialogTitle>
						<AlertDialogDescription />
					</AlertDialogHeader>
					<AlertDialogFooter>
						<AlertDialogCancel onClick={() => setOpenModal(true)}>
							Cancel
						</AlertDialogCancel>
						<AlertDialogAction onClick={() => setUserInput("")}>
							Discard
						</AlertDialogAction>
					</AlertDialogFooter>
				</AlertDialogContent>
			</AlertDialog>
		</>
	)
}

================
File: components/ui/comment/CommentReactButton.tsx
================
"use client"

import { Button } from "@components/ui/Button"
import type { PostCounts } from "@components/ui/post/PostReactButton"
import { createCommentReaction } from "@queries/server/comment"
import { useMutation, useQueryClient } from "@tanstack/react-query"
import { cn } from "@utils/cn"
import { queryKey } from "@utils/queryKeyFactory"
import { Heart } from "lucide-react"
import React from "react"

// Types for props passing to post item component
type PostReactButtonProps = {
	initialReactionCount: number
	isReacted: boolean
	userId?: string
	parentId: string
	commentId: string
	className?: string
	wrapperClassName?: string
}

export default function CommentReactButton({
	userId,
	commentId,
	parentId,
	initialReactionCount,
	isReacted,
	className,
	wrapperClassName,
}: PostReactButtonProps) {
	const [localIsReacted, setReactionStatus] = React.useState(isReacted)
	const queryClient = useQueryClient()

	const commentReactMutation = useMutation({
		mutationKey: queryKey.comment.selectReactionByUser({
			userId: userId,
			commentId: commentId,
		}),
		mutationFn: () => createCommentReaction({ userId, commentId: commentId }),
		onMutate: async () => {
			// Cancel any outgoing refetches (so they don't overwrite our optimistic update)
			await queryClient.cancelQueries({
				queryKey: [
					queryKey.comment.selectReactionByUser({ userId, commentId }),
					queryKey.comment.selectCountByComment({ commentId, parentId }),
				],
			})

			// Snapshot the previous value
			const previousReaction = queryClient.getQueryData(
				queryKey.comment.selectReactionByUser({ userId, commentId }),
			)
			const previousCounts = queryClient.getQueryData(
				queryKey.comment.selectCountByComment({ commentId, parentId }),
			)

			queryClient.setQueryData(
				queryKey.comment.selectCountByComment({ commentId, parentId }),
				(prev: PostCounts) => ({
					...prev,
					noReactions: localIsReacted
						? prev.noReactions - 1
						: prev.noReactions + 1,
				}),
			)

			// Return a context object with the snapshotted value
			return { previousReaction, previousCounts }
		},
		onError: (err, variables, context) => {
			// Revert to the previous value
			if (context) {
				queryClient.setQueryData(
					queryKey.comment.selectCountByComment({ commentId, parentId }),
					context.previousCounts,
				)
				queryClient.setQueryData(
					queryKey.comment.selectReactionByUser({ userId, commentId }),
					context.previousReaction,
				)
			}
		},
		onSettled: () => {
			queryClient.invalidateQueries({
				queryKey: [
					queryKey.comment.selectCountByComment({ commentId, parentId }),
					queryKey.comment.selectReactionByUser({ userId, commentId }),
				],
			})
		},
	})

	const handleReact = () => {
		commentReactMutation.mutate()
		setReactionStatus(!localIsReacted)
	}

	return (
		<div className={wrapperClassName}>
			<Button variant="ghost" className={className} onClick={handleReact}>
				<Heart
					className={cn(
						"w-[20px]",
						localIsReacted ? "animate-fillHeart" : "animate-unfillHeart",
					)}
				/>
			</Button>
			<span>{initialReactionCount}</span>
		</div>
	)
}

================
File: components/ui/comment/CommentShareButton.tsx
================
"use client"

import { Button } from "@components/ui/Button"
import { Forward } from "lucide-react"
import React from "react"

type PostShareButtonProps = {
	userId: string
	commentId: string
	initialShareCount: number
	className?: string
	wrapperClassName?: string
}

/*
 * TODO:
 *  Fetch all user's followers -> Share the post to a follower or all followers
 */

export default function CommentShareButton({
	userId,
	commentId,
	initialShareCount,
	className,
	wrapperClassName,
}: PostShareButtonProps) {
	const [shareCount, setShareCount] = React.useState(initialShareCount)

	return (
		<div className={wrapperClassName}>
			<Button variant="ghost" className={className}>
				<Forward />
			</Button>
			<span>{shareCount}</span>
		</div>
	)
}

================
File: components/ui/comment/index.tsx
================
"use client"

import DownRightArrowSVG from "@assets/images/down-right-arrow.svg"
import { Skeleton } from "@components/ui/Skeleton"
import CommentCommentButton from "@components/ui/comment/CommentCommentButton"
import CommentReactButton from "@components/ui/comment/CommentReactButton"
import CommentShareButton from "@components/ui/comment/CommentShareButton"
import {
	postButtonClassName,
	postButtonSkeletonClassName,
	postButtonWrapperClassName,
} from "@components/ui/post"
import PostUserInfo from "@components/ui/post/PostUserInfo"
import type { Comment } from "@prisma/client"
import { useQueryAppUser } from "@queries/client/appUser"
import {
	useQueryCommentCounts,
	useQueryCommentReaction,
} from "@queries/client/comment"
import { cn } from "@utils/cn"
import Image from "next/image"
import { useRouter } from "nextjs-toploader/app"

export type CommentWithChildren = Comment & { children?: CommentWithChildren[] }

export default function PostComment({
	id,
	userId,
	postId,
	degree,
	parentId,
	content,
	createdAt,
	updatedAt,
	isDeleted,
	userName,
	userAvatarUrl,
	childrenComment,
}: CommentWithChildren & { childrenComment?: CommentWithChildren }) {
	const router = useRouter()

	// Get the app user byt query data
	const { data: user } = useQueryAppUser()
	const appUserId = user?.id

	// Get the post counts by query data
	const {
		data: commentCounts,
		isSuccess: isCommentCountsQuerySuccess,
		isLoading: isCommentCountsQueryLoading,
	} = useQueryCommentCounts({ commentId: id, parentId })
	const noReactions = commentCounts?.noReactions
	const noComments = commentCounts?.noComments
	const noShares = commentCounts?.noShares

	// Get the reaction of the comment by the app user by query data
	const {
		data: queriedCommentReactionByAppUser,
		isSuccess: isCommentReactionQuerySuccess,
	} = useQueryCommentReaction({
		userId: appUserId,
		commentId: id,
	})

	const handleCommentClick = () => {
		router.push(`/${userName}/post/${postId}/comment/${id}`)
	}

	const handleCommentKeyUp = (event: React.KeyboardEvent<HTMLDivElement>) => {
		if (event.key === "Enter") handleCommentClick()
	}

	if (isDeleted) return null

	return (
		<>
			<div key={id + userId} className="flex-col gap-2">
				<div>
					<div
						onClick={handleCommentClick}
						onKeyUp={handleCommentKeyUp}
						className={cn(
							"flex min-h-[100px] w-full cursor-pointer flex-col justify-between rounded-t-lg bg-background-item px-5 py-3",
						)}
					>
						<PostUserInfo
							isWriteOnly
							userName={userName}
							userAvatarUrl={userAvatarUrl}
							appUserName={userName}
							createdAt={new Date()}
							updatedAt={null}
							content={content}
						/>
					</div>
					{isCommentCountsQueryLoading && (
						<div className="flex gap-5 rounded-b-lg bg-background-item px-2 py-3 pl-4">
							<Skeleton
								key={`${id}1`}
								className={postButtonSkeletonClassName}
							/>
							<Skeleton
								key={`${id}2`}
								className={postButtonSkeletonClassName}
							/>
							<Skeleton
								key={`${id}3`}
								className={postButtonSkeletonClassName}
							/>
						</div>
					)}
					{isCommentCountsQuerySuccess && (
						<div className="mt-0 flex h-[30px] gap-5 rounded-b-lg bg-background-item px-2 py-6">
							<>
								{isCommentReactionQuerySuccess ? (
									<CommentReactButton
										className={postButtonClassName}
										wrapperClassName={postButtonWrapperClassName}
										userId={appUserId}
										commentId={id}
										parentId={parentId}
										initialReactionCount={noReactions ?? 0}
										isReacted={!!queriedCommentReactionByAppUser}
									/>
								) : (
									<div className={postButtonWrapperClassName}>
										<Skeleton className={postButtonClassName} />
									</div>
								)}

								<CommentCommentButton
									className={postButtonClassName}
									wrapperClassName={postButtonWrapperClassName}
									initialCommentCount={noComments ?? 0}
									userId={userId}
									userName={userName}
									userAvatarUrl={userAvatarUrl}
									postId={postId}
									postContent={content}
									postCreatedAt={createdAt}
									postUpdatedAt={updatedAt}
									parentId={id}
									degree={degree}
								/>

								<CommentShareButton
									className={postButtonClassName}
									wrapperClassName={postButtonWrapperClassName}
									userId={userId}
									commentId={id}
									initialShareCount={noShares ?? 0}
								/>
							</>
						</div>
					)}
				</div>

				{/* Recursive child comments */}
				{degree < 2 && childrenComment ? (
					<div key={userId + id} className=" ml-[10px] flex gap-4">
						{/* biome-ignore lint/style/noNonNullAssertion: <explanation> */}
						{childrenComment!.children!.length > 0 && (
							<div>
								<Image
									src={DownRightArrowSVG}
									width={35}
									height={35}
									alt=" Comment arrow"
								/>
							</div>
						)}
						<div className="w-full flex-col">
							{childrenComment?.children?.map((child, index) => (
								<>
									<PostComment
										key={child.id + child.userId + index}
										{...child}
										childrenComment={{
											...child,
											children: child.children ?? [],
										}}
									/>
								</>
							))}
						</div>
					</div>
				) : (
					<div />
				)}
			</div>
		</>
	)
}

================
File: components/ui/form/PostForm.tsx
================
"use client"

import { userAtom } from "@atoms/user"
import {
	AlertDialog,
	AlertDialogAction,
	AlertDialogCancel,
	AlertDialogContent,
	AlertDialogDescription,
	AlertDialogFooter,
	AlertDialogHeader,
	AlertDialogTitle,
} from "@components/ui/AlertDialog"
import { Badge } from "@components/ui/Badge"
import { Button } from "@components/ui/Button"
import {
	Drawer,
	DrawerContent,
	DrawerDescription,
	DrawerFooter,
	DrawerHeader,
	DrawerTitle,
	DrawerTrigger,
} from "@components/ui/Drawer"
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from "@components/ui/Select"
import { Textarea } from "@components/ui/Textarea"
import WelcomeModal from "@components/ui/modal/WelcomeModal"
import PostUserInfo from "@components/ui/post/PostUserInfo"
import type { SearchResultProps } from "@components/ui/search/SearchList"
import SearchList from "@components/ui/search/SearchList"
import { faker } from "@faker-js/faker"
import type { Post } from "@prisma/client"
import { type CreatePostProps, createPost } from "@queries/server/post"
import { useMutation, useQueryClient } from "@tanstack/react-query"
import { cn } from "@utils/cn"
import { queryKey } from "@utils/queryKeyFactory"
import { generateBase64uuid } from "@utils/uuid.helpers"
import { useAtomValue } from "jotai"
import { HashIcon, ImageIcon, MenuIcon } from "lucide-react"
import React from "react"

export type PostVisibilityEnumType =
	| "PUBLIC"
	| "FOLLOWERS_ONLY"
	| "MENTIONED_ONLY"
	| "FANS_ONLY"
	| "ME_ONLY"

export const PostVisibilityEnumMap = {
	PUBLIC: "PUBLIC",
	FOLLOWERS_ONLY: "FOLLOWERS_ONLY",
	MENTIONED_ONLY: "MENTIONED_ONLY",
	FANS_ONLY: "FANS_ONLY",
	ME_ONLY: "ME_ONLY",
}

export const PostVisibilityEnumArray = [
	"PUBLIC",
	"FOLLOWERS_ONLY",
	"MENTIONED_ONLY",
	"FANS_ONLY",
	"ME_ONLY",
]

type IMentionedResult = {
	id: string
	userName: string
}

export default function PostForm({
	children,
}: {
	children: React.ReactNode
}) {
	const [isDrawerOpen, setOpenDrawer] = React.useState<boolean>(false)
	const [alertIsOpen, setOpenAlert] = React.useState<boolean>(false)
	const [postContent, setPostContent] = React.useState("")
	const textareaRef = React.useRef<HTMLTextAreaElement>(null)
	const [postVisibility, setPostVisibility] =
		React.useState<PostVisibilityEnumType>("PUBLIC")

	const [showMentionSuggestions, setShowMentionSuggestions] =
		React.useState<boolean>(false)
	const [startMentionIndex, setStartMentionIndex] = React.useState<number>(-1)
	const [lastMentionIndexes, setLastMentionIndexes] = React.useState<number[]>(
		[],
	)
	const [mentionSearchValue, setMentionSearchValue] = React.useState<string>("")
	const [mentionedUsers, setMentionedUsers] = React.useState<
		IMentionedResult[]
	>([])
	const [isSearching, setIsSearching] = React.useState<boolean>(false)
	const [searchResults, setSearchResults] = React.useState<SearchResultProps>(
		[],
	)

	const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
		const newValue = e.target.value
		setPostContent(newValue)

		const lastAtIndex = newValue.lastIndexOf("@")
		if (lastAtIndex !== -1 && lastAtIndex === newValue.length - 1) {
			// Show suggestions when '@' is the last character typed
			setShowMentionSuggestions(true)
			setStartMentionIndex(lastAtIndex)
			setMentionSearchValue("")
		} else if (lastAtIndex === -1 || lastAtIndex < startMentionIndex) {
			// Reset if "@" is removed or not valid for mentioning anymore
			setShowMentionSuggestions(false)
			setMentionSearchValue("")
			setLastMentionIndexes([])
			setStartMentionIndex(-1)
			deleteLastMentionedUser()
		} else {
			// Extract mention and handle if space exists after "@" (i.e., invalidating the mention)
			const mention = newValue.substring(lastAtIndex + 1)
			if (mention.includes(" ")) {
				setMentionSearchValue("")
			} else {
				setMentionSearchValue(mention)
			}
		}

		// Handling previous mentions stored in lastMentionIndexes
		if (lastMentionIndexes.length > 0) {
			const lastMentionIndex = lastMentionIndexes[lastMentionIndexes.length - 1]
			const substringFromLastMentionIndex = newValue.slice(lastMentionIndex)

			// Check if we are still in mention mode after the last stored "@" mention
			if (
				newValue.length > lastMentionIndex &&
				!substringFromLastMentionIndex.includes(" ")
			) {
				setMentionSearchValue(substringFromLastMentionIndex)
				setShowMentionSuggestions(true)
			}

			if (
				postContent.length <
				lastMentionIndexes[lastMentionIndexes.length - 1] + 2
			) {
				deleteLastMentionedUser()
				deleteLastMentionIndex()
			}
		}
	}

	const deleteLastMentionedUser = () => {
		setMentionedUsers((prevMentionedUsers) => {
			const updatedMentionedUsers = [...prevMentionedUsers]
			updatedMentionedUsers.pop()
			return updatedMentionedUsers
		})
	}

	const deleteLastMentionIndex = () => {
		setLastMentionIndexes((prevIndexes) => {
			const updatedIndexes = [...prevIndexes]
			updatedIndexes.pop()
			return updatedIndexes
		})
	}

	// console.log("\n------")
	// console.log("Start mention index: ", startMentionIndex)
	// console.log("Last mention index: ", lastMentionIndexes)
	// console.log("Post length:", postContent.length)
	// console.log("Mention search value: ", mentionSearchValue)
	// console.log("Search results: ", searchResults[0]?.userName)
	// console.log("Show mention suggestions: ", showMentionSuggestions)
	// console.log("Mentioned users: ", mentionedUsers)

	const handleSelectUser = (id: string, userName: string) => {
		setMentionedUsers((prevMentionedUsers) => {
			const userExists = prevMentionedUsers.some((user) => user.id === id)
			if (!userExists) {
				return [
					...prevMentionedUsers,
					{
						id: id,
						userName: userName,
					},
				]
			}
			return prevMentionedUsers
		})

		setLastMentionIndexes((prevIndexes) => {
			const newIndex = startMentionIndex + userName.length
			const uniqueIndexes = new Set(prevIndexes)
			uniqueIndexes.add(newIndex)
			return Array.from(uniqueIndexes)
		})

		const beforeMention = postContent.slice(0, startMentionIndex)
		setPostContent(`${beforeMention}@${userName} `)
		setShowMentionSuggestions(false)
		setSearchResults([])
		setMentionSearchValue("")
		textareaRef.current?.focus()
	}

	// biome-ignore lint/correctness/useExhaustiveDependencies: handleSelectUser changes on every render
	React.useEffect(() => {
		// If search value matches search result
		if (mentionSearchValue.localeCompare(searchResults[0]?.userName) === 0) {
			handleSelectUser(searchResults[0].id, searchResults[0].userName)
		}
	}, [mentionSearchValue, searchResults])

	// biome-ignore lint/correctness/useExhaustiveDependencies: handleSearchvalue changes on every render
	React.useEffect(() => {
		if (mentionSearchValue.length > 0) {
			// handleSearchvalue(mentionSearchValue.toLowerCase())
		} else {
			setSearchResults([])
		}
	}, [mentionSearchValue])

	const handleDiscard = () => {
		setOpenDrawer(false)
		setPostContent("")
		setPostVisibility("PUBLIC")
		setSearchResults([])
		setMentionedUsers([])
		setShowMentionSuggestions(false)
		setStartMentionIndex(-1)
		setLastMentionIndexes([])
	}

	const handleTouchOutsideModal = () => {
		// If the value is not empty, open the alert
		if (postContent.length > 0) setOpenAlert(true)

		setSearchResults([])
		setMentionedUsers([])
		setShowMentionSuggestions(false)
	}

	const handleFakePost = () => {
		const fake_content: string = faker.lorem.paragraphs()
		const fake_visibility: PostVisibilityEnumType = PostVisibilityEnumArray[
			Math.floor(Math.random() * PostVisibilityEnumArray.length)
		] as PostVisibilityEnumType

		setPostContent(fake_content)
		setPostVisibility(fake_visibility)
	}

	const queryClient = useQueryClient()
	const user = useAtomValue(userAtom)
	const userId = user?.id
	const userName = user?.user_metadata?.userName
	const fullName = user?.user_metadata?.fullName
	const userAvatarUrl = user?.user_metadata?.avatarUrl

	const addPostMutation = useMutation({
		mutationKey: queryKey.post.insert(),
		mutationFn: async (newPost: CreatePostProps) => await createPost(newPost),
		onMutate: async (newPost) => {
			// Cancel any outgoing refetches to not overwrite our optimistic updates
			await queryClient.cancelQueries({ queryKey: queryKey.post.all })

			// Snapshot the previous value
			const previousPosts = queryClient.getQueryData(queryKey.post.all)

			queryClient.setQueryData(queryKey.post.all, (old: Post[]) => [
				newPost,
				...old,
			])
			queryClient.setQueryData(queryKey.post.selectCount(newPost.id), {
				noReactions: 0,
				noShares: 0,
				noComments: 0,
			})
			queryClient.setQueryData(
				queryKey.post.selectReactionByUser({ userId, postId: newPost.id }),
				null,
			)

			// Return a context object with the snapshotted value
			return { previousPosts }
		},
		onError: (error) => {
			console.error("Error creating post:", error)
		},
		// onSettled: (newPost) => {
		// 	if (newPost) {
		// 		queryClient.invalidateQueries({
		// 			queryKey: [
		// 				queryKey.post.selectId(newPost.id),
		// 				queryKey.post.selectCount(newPost.id),
		// 				queryKey.post.selectReactionByUser({
		// 					userId: newPost.userId,
		// 					postId: newPost.id,
		// 				}),
		// 			],
		// 		})
		// 	}
		// },
	})

	const handleSubmitPost = () => {
		const date = new Date()

		const newPost: CreatePostProps = {
			id: generateBase64uuid(),
			userId: userId ?? null,
			userName: userName,
			userAvatarUrl: userAvatarUrl,
			content: postContent,
			visibility: postVisibility,
			createdAt: date,
		}
		addPostMutation.mutate(newPost)
		setOpenDrawer(false)
		setPostContent("")
		setPostVisibility("PUBLIC")
	}

	// Post length, mid warning
	const mid_threshold = 500
	// and last warning
	const last_threshold = 550

	// Textarea auto increases its height on value length
	// biome-ignore lint/correctness/useExhaustiveDependencies: value is only needed here
	React.useEffect(() => {
		if (textareaRef.current) {
			textareaRef.current.style.height = "auto"
			textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`
		}
	}, [postContent])

	if (!user) return <WelcomeModal>{children}</WelcomeModal>

	return (
		<>
			<Drawer open={isDrawerOpen} onOpenChange={setOpenDrawer}>
				<DrawerTrigger asChild>{children}</DrawerTrigger>

				<DrawerContent
					className="h-[90vh] bg-background-item dark:bg-background-item"
					onPointerDownOutside={handleTouchOutsideModal}
				>
					{/* header */}
					<DrawerHeader>
						<DrawerTitle>New post</DrawerTitle>
						<DrawerDescription>What are you thinking?</DrawerDescription>
					</DrawerHeader>
					<div className="flex-col items-start gap-3 p-4">
						<PostUserInfo
							isWriteOnly
							userName={userName}
							userAvatarUrl={userAvatarUrl}
							visibility={postVisibility}
							appUserName={userName}
							createdAt={new Date()}
							updatedAt={null}
						/>
						<div className="flex-y-center gap-2">
							{mentionedUsers.length > 0 &&
								mentionedUsers.map((mentionedUser) => (
									<>
										<Badge variant="outline" key={mentionedUser.id}>
											@{mentionedUser.userName}
										</Badge>
									</>
								))}
						</div>
						<div className="mb-8 w-full flex-start flex-col gap-2">
							<Textarea
								autoFocus
								ref={textareaRef}
								value={postContent}
								onChange={handleInputChange}
								placeholder={cn("Dear ", fullName, ", what is in your mind ?")}
								className=" min-h-[10px] resize-none border-none p-0 focus-visible:ring-0"
							/>
							<div className="flex space-x-4">
								<ImageIcon />
								<HashIcon />
								<MenuIcon />
							</div>
						</div>
					</div>

					{/* Mention suggestions */}
					{showMentionSuggestions && searchResults?.length > 0 && (
						<div className="mt-[20px] h-fit w-full flex-center">
							<SearchList
								searchResults={searchResults}
								appUserId={userId}
								isMention
								containerClassname="my-0 w-[90%] rounded-lg border-2 border-white"
								onSearchResultClick={handleSelectUser}
							/>
						</div>
					)}

					<DrawerFooter>
						<div className="flex-between ">
							{/* Select post visibility */}
							<Select
								onValueChange={(value: PostVisibilityEnumType) =>
									setPostVisibility(value)
								}
							>
								<SelectTrigger className="w-fit gap-2">
									<SelectValue placeholder="Anyone can view" />
								</SelectTrigger>
								<SelectContent>
									<SelectItem value={PostVisibilityEnumMap.PUBLIC}>
										Anyone can view
									</SelectItem>
									<SelectItem value={PostVisibilityEnumMap.FOLLOWERS_ONLY}>
										Only followers can view
									</SelectItem>
									<SelectItem value={PostVisibilityEnumMap.MENTIONED_ONLY}>
										Only metioned users can view
									</SelectItem>
									<SelectItem value={PostVisibilityEnumMap.FANS_ONLY}>
										Only fans can view 🔞
									</SelectItem>
									<SelectItem value={PostVisibilityEnumMap.ME_ONLY}>
										Only you can view, because you are an introvert 😃
									</SelectItem>
								</SelectContent>
							</Select>

							{/* Controls post length */}
							{postContent.length >= mid_threshold && (
								<div
									className={cn(
										"w-[100px] text-center font-black",
										postContent.length > last_threshold && "text-red-500",
									)}
								>
									{last_threshold - postContent.length}
								</div>
							)}

							{/* Post button */}
							<div className="flex gap-4">
								<Button onClick={handleFakePost}>Fake</Button>
								<Button
									className="w-[100px]"
									disabled={
										postContent.length > last_threshold ||
										postContent.length === 0
									}
									onClick={handleSubmitPost}
								>
									Post
								</Button>
							</div>
						</div>
					</DrawerFooter>
				</DrawerContent>
			</Drawer>

			<AlertDialog open={alertIsOpen} onOpenChange={setOpenAlert}>
				<AlertDialogContent>
					<AlertDialogHeader>
						<AlertDialogTitle>Discard comment ?</AlertDialogTitle>
						<AlertDialogDescription />
					</AlertDialogHeader>
					<AlertDialogFooter>
						<AlertDialogCancel onClick={() => setOpenDrawer(true)}>
							Cancel
						</AlertDialogCancel>
						<AlertDialogAction onClick={handleDiscard}>
							Discard
						</AlertDialogAction>
					</AlertDialogFooter>
				</AlertDialogContent>
			</AlertDialog>
		</>
	)
}

================
File: components/ui/form/PostFormMentionDropdown.tsx
================
"use client"

import {
	CommandEmpty,
	CommandGroup,
	CommandInput,
	CommandItem,
	CommandList,
} from "@components/ui/Command"
import { Input } from "@components/ui/Input"
import { Command } from "lucide-react"
import { useEffect, useRef, useState } from "react"

// Mock user data
const users = [
	{ id: 1, name: "Alice Johnson", username: "alice_j" },
	{ id: 2, name: "Bob Smith", username: "bob_smith" },
	{ id: 3, name: "Charlie Brown", username: "charlie_b" },
	{ id: 4, name: "Diana Prince", username: "wonder_woman" },
	{ id: 5, name: "Ethan Hunt", username: "mission_possible" },
]

export default function PostFormMentionDropdown() {
	const [inputValue, setInputValue] = useState("")
	const [showDropdown, setShowDropdown] = useState(false)
	const [filteredUsers, setFilteredUsers] = useState(users)
	const [mentionIndex, setMentionIndex] = useState(-1)
	const inputRef = useRef<HTMLInputElement>(null)

	useEffect(() => {
		if (showDropdown) {
			const mentionText = inputValue.slice(mentionIndex + 1)
			setFilteredUsers(
				users.filter(
					(user) =>
						user.name.toLowerCase().includes(mentionText.toLowerCase()) ||
						user.username.toLowerCase().includes(mentionText.toLowerCase()),
				),
			)
		}
	}, [inputValue, showDropdown, mentionIndex])

	const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		const newValue = e.target.value
		setInputValue(newValue)

		const lastAtIndex = newValue.lastIndexOf("@")
		if (lastAtIndex !== -1 && lastAtIndex === newValue.length - 1) {
			setShowDropdown(true)
			setMentionIndex(lastAtIndex)
		} else if (lastAtIndex === -1 || lastAtIndex < mentionIndex) {
			setShowDropdown(false)
		}
	}

	const handleSelectUser = (user: (typeof users)[0]) => {
		const beforeMention = inputValue.slice(0, mentionIndex)
		const afterMention = inputValue.slice(mentionIndex + 1)
		setInputValue(`${beforeMention}@${user.username} ${afterMention}`)
		setShowDropdown(false)
		inputRef.current?.focus()
	}

	return (
		<div className="mx-auto w-full max-w-md space-y-4">
			<Input
				ref={inputRef}
				type="text"
				placeholder="Type @ to mention a user"
				value={inputValue}
				onChange={handleInputChange}
				className="w-full"
			/>

			{showDropdown && (
				<Command className="rounded-lg border shadow-md">
					<CommandInput placeholder="Search users..." />
					<CommandList>
						<CommandEmpty>No users found.</CommandEmpty>
						<CommandGroup heading="Suggestions">
							{filteredUsers.map((user) => (
								<CommandItem
									key={user.id}
									onSelect={() => handleSelectUser(user)}
									className="cursor-pointer"
								>
									<div className="flex items-center">
										<div className="mr-2 flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground">
											{user.name[0]}
										</div>
										<div>
											<p className="font-medium">{user.name}</p>
											<p className="text-muted-foreground text-sm">
												@{user.username}
											</p>
										</div>
									</div>
								</CommandItem>
							))}
						</CommandGroup>
					</CommandList>
				</Command>
			)}
		</div>
	)
}

================
File: components/ui/form/SignInForm.tsx
================
"use client"

import { userAtom } from "@atoms/user"
import { Button } from "@components/ui/Button"
import {
	Card,
	CardContent,
	CardDescription,
	CardFooter,
	CardHeader,
	CardTitle,
} from "@components/ui/Card"
import { Input } from "@components/ui/Input"
import { Label } from "@components/ui/Label"
import AuthButton from "@components/ui/button/AuthButton"
import { ROUTE } from "@constants/route"
import { useSignIn } from "@hooks/auth/useSignIn"
import type { AppUser } from "@prisma/client"
import { useQueryClient } from "@tanstack/react-query"
import { queryKey } from "@utils/queryKeyFactory"
import { useSetAtom } from "jotai"
import { X } from "lucide-react"
import Link from "next/link"
import { useRouter } from "nextjs-toploader/app"
import React from "react"

const translateErrorMessage = (
	errorMessage: string,
	foundUser: AppUser | null,
) => {
	const errorMessageMap: { [key: string]: string } = {
		"Invalid login credentials": "Wrong email or password",
	}
	const foundUserErrorMessageMap: { [key: string]: string } = {
		"Invalid login credentials":
			"The password that you've entered is incorrect",
	}

	if (foundUser) {
		return foundUserErrorMessageMap[errorMessage] ?? errorMessage
	}

	return errorMessageMap[errorMessage] ?? errorMessage
}

export default function SignInForm() {
	const [email, setEmail] = React.useState<string>("")
	const [password, setPassword] = React.useState<string>("")
	const [loading, setLoading] = React.useState<boolean>(false)
	const [error, setError] = React.useState<string | null>(null)

	const router = useRouter()
	const queryClient = useQueryClient()
	const setUserAtom = useSetAtom(userAtom)

	const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault()
		setLoading(true)
		setError(null)

		const { user, errorMessage, foundUser } = await useSignIn({
			email,
			password,
		})

		if (errorMessage) {
			const translatedErrorMessage = translateErrorMessage(
				errorMessage,
				foundUser,
			)
			setError(translatedErrorMessage)
		} else if (user) {
			queryClient.setQueryData(queryKey.user.selectMain(), user)
			setUserAtom(user)
			setLoading(false)

			router.push(ROUTE.HOME)
		}
	}

	return (
		<>
			<Card className="w-full max-w-sm border-none">
				<CardHeader>
					<CardTitle className="text-2xl">Sign In</CardTitle>
					<CardDescription>
						Enter your email below to login to your account.
					</CardDescription>
				</CardHeader>
				<CardContent>
					<form className="grid gap-4" onSubmit={handleSubmit}>
						<div className="grid gap-2">
							{/* email */}
							<Label htmlFor="email">Email</Label>
							<div className="flex">
								<Input
									id="email"
									name="email"
									type="email"
									value={email}
									onChange={(e) => setEmail(e.target.value)}
									placeholder=""
									required
								/>

								{email.length > 0 && (
									<Button variant="ghost" onClick={() => setEmail("")}>
										<X className="size-4" />
									</Button>
								)}
							</div>
						</div>
						<div className="grid gap-2">
							<div className="flex-between">
								{/* password */}
								<Label htmlFor="password">Password</Label>
								<Link
									href="/forgot-password"
									className="text-sm decoration-pink-400 underline-offset-4 hover:underline hover:decoration-wavy"
								>
									Forgot your password?
								</Link>
							</div>
							<div className="flex gap-1">
								<Input
									id="password"
									name="password"
									type="password"
									value={password}
									onChange={(e) => setPassword(e.target.value)}
									placeholder=""
									required
								/>

								{password.length > 0 && (
									<Button variant="ghost" onClick={() => setPassword("")}>
										<X className="size-4" />
									</Button>
								)}
							</div>
						</div>
						<div className="grid gap-2">
							<AuthButton
								isLoading={loading}
								normalLabel="Sign In"
								loadingLabel="Signing In"
							/>
						</div>
						<div className="mt-4 flex-between text-sm">
							Don&apos;t have an account?{" "}
							<Link
								href="/sign-up"
								className="text-md decoration-pink-400 underline-offset-4 hover:underline hover:decoration-wavy"
							>
								Sign up
							</Link>
						</div>
					</form>
				</CardContent>
				<CardFooter>
					{error && (
						<div className="w-full p-4 text-center text-foreground">
							<div className="flex-center gap-2 text-red-700">
								<p>{error}</p>
							</div>
						</div>
					)}
				</CardFooter>
			</Card>
		</>
	)
}

================
File: components/ui/form/SignUpForm.tsx
================
"use client"
import { userAtom } from "@atoms/user"
import { Button } from "@components/ui/Button"
import {
	Card,
	CardContent,
	CardDescription,
	CardFooter,
	CardHeader,
	CardTitle,
} from "@components/ui/Card"
import { Input } from "@components/ui/Input"
import { Label } from "@components/ui/Label"
import AuthButton from "@components/ui/button/AuthButton"
import InputStrongPassword from "@components/ui/input/InputStrongPassword"
import { ROUTE } from "@constants/route"
import { faker } from "@faker-js/faker"
import { useSignUp } from "@hooks/auth/useSignUp"
import { useQueryClient } from "@tanstack/react-query"
import { queryKey } from "@utils/queryKeyFactory"
import { useSetAtom } from "jotai"
import { TriangleAlert, X } from "lucide-react"
import Link from "next/link"
import { useRouter } from "nextjs-toploader/app"
import React from "react"

export default function SignUpForm() {
	const [firstName, setFirstName] = React.useState<string>("")
	const [lastName, setLastName] = React.useState<string>("")
	const [userName, setUserName] = React.useState<string>("")
	const [email, setEmail] = React.useState<string>("")

	const [password, setPassword] = React.useState<string>("")
	const [isPasswordStrong, setPasswordIsStrong] = React.useState<boolean>(false)

	const [loading, setLoading] = React.useState<boolean>(false)
	const [error, setError] = React.useState<string | null>(null)

	const router = useRouter()
	const queryClient = useQueryClient()
	const setUserAtom = useSetAtom(userAtom)

	const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault()
		setLoading(true)
		setError(null)

		const signUpValues = {
			email,
			password,
			firstName,
			lastName,
			userName,
		}

		const { user, error } = await useSignUp(signUpValues)

		if (error) {
			setError(error.message)
		} else if (user) {
			queryClient.setQueryData(queryKey.user.selectMain(), user)
			setUserAtom(user)
			router.push(ROUTE.HOME)
		}
		setLoading(false)
	}

	const handleFakeUser = () => {
		const fake_email: string = faker.internet.email()
		const fake_firstName: string = faker.person.firstName()
		const fake_lastName: string = faker.person.lastName()
		const fake_userName: string = faker.internet.userName()
		const fake_password: string = "aaaaaa"

		setEmail(fake_email)
		setPassword(fake_password)
		setFirstName(fake_firstName)
		setLastName(fake_lastName)
		setUserName(fake_userName)
	}

	return (
		<>
			<Card className="w-full max-w-sm flex-col justify-center border-none">
				<CardHeader>
					<CardTitle className="text-2xl" onClick={() => handleFakeUser()}>
						Sign Up
				</CardTitle>
					<CardDescription>
						Create a new Piz account to get started.
					</CardDescription>
				</CardHeader>
				<CardContent>
					<form className="grid gap-4" onSubmit={handleSubmit}>
						{/* full name */}
						<div className="grid grid-cols-2 gap-4">
							<div className="grid gap-2">
								{/* first name */}
								<Label htmlFor="firstName">First name</Label>
								<div className="flex">
									<Input
										value={firstName}
										onChange={(e) => setFirstName(e.target.value)}
										id="firstName"
										type="firstName"
										name="firstName"
										placeholder=""
										required
									/>
									{firstName.length > 0 && (
										<Button variant="ghost" onClick={() => setFirstName("")}>
											<X className="size-4" />
										</Button>
									)}
								</div>
							</div>
							<div className="grid gap-2">
								{/* last name */}
								<Label htmlFor="lastName">Last name</Label>
								<div className="flex">
									<Input
										value={lastName}
										onChange={(e) => setLastName(e.target.value)}
										id="lastName"
										type="lastName"
										name="lastName"
										placeholder=""
										required
									/>
									{lastName.length > 0 && (
										<Button variant="ghost" onClick={() => setLastName("")}>
											<X className="size-4" />
										</Button>
									)}
								</div>
							</div>
						</div>
						{/* username */}
						<div className="grid gap-2">
							<Label htmlFor="userName">Username</Label>
							<div className="flex">
								<Input
									value={userName}
									onChange={(e) => setUserName(e.target.value)}
									id="userName"
									type="userName"
									name="userName"
									placeholder=""
									required
								/>
								{userName.length > 0 && (
									<Button variant="ghost" onClick={() => setUserName("")}>
										<X className="size-4" />
									</Button>
								)}
							</div>
						</div>
						{/* email */}
						<div className="grid gap-2">
							<Label htmlFor="email">Email</Label>
							<div className="flex">
								<Input
									value={email}
									onChange={(e) => setEmail(e.target.value)}
									id="email"
									name="email"
									type="email"
									placeholder=""
									required
								/>
								{email.length > 0 && (
									<Button variant="ghost" onClick={() => setEmail("")}>
										<X className="size-4" />
									</Button>
								)}
							</div>
						</div>
						{/* password */}
						<InputStrongPassword
							onPasswordChange={(password) => setPassword(password)}
							onSignalStrong={(signal) => setPasswordIsStrong(signal)}
						/>
						<div className="grid gap-2">
							<AuthButton
								isLoading={loading}
								isPasswordStrong={isPasswordStrong}
								normalLabel="Create account"
								loadingLabel="Signing Up"
							/>
						</div>
						<div className="flex-between text-sm">
							Already had an account?{" "}
							<Link
								href="/sign-in"
								className="text-md decoration-pink-400 underline-offset-4 hover:underline hover:decoration-wavy"
							>
								Sign in
							</Link>
						</div>
					</form>
				</CardContent>
				<CardFooter>
					{error && (
						<div className="w-full p-4 text-center text-foreground">
							<div className="flex-center gap-2 text-red-700">
								<TriangleAlert size={18} />
								<p>{error}</p>
							</div>
						</div>
					)}
				</CardFooter>
			</Card>
		</>
	)
}

================
File: components/ui/input/InputEmail.tsx
================
"use client"
import { Button } from "@components/ui/Button"
import { Input } from "@components/ui/Input"
import { X } from "lucide-react"
import React, { type ChangeEvent } from "react"

export default function InputEmail() {
	const [email, setEmail] = React.useState("")

	const handleEmailChange = (event: ChangeEvent<HTMLInputElement>) => {
		setEmail(event.target.value)
	}

	const clearEmail = () => setEmail("")

	return (
		<>
			<div className="flex gap-1">
				<Input
					id="email"
					name="email"
					type="email"
					value={email}
					onChange={handleEmailChange}
					placeholder=""
					required
				/>

				{email.length > 0 && (
					<Button variant="ghost" onClick={clearEmail}>
						<X className="size-4" />
					</Button>
				)}
			</div>
		</>
	)
}

================
File: components/ui/input/InputPassword.tsx
================
"use client"

import { Button } from "@components/ui/Button"
import { Input, type InputProps } from "@components/ui/Input"
import { cn } from "@utils/cn"
import { EyeIcon, EyeOffIcon } from "lucide-react"
import * as React from "react"

const InputPassword = React.forwardRef<HTMLInputElement, InputProps>(
	({ className, ...props }, ref) => {
		const [showPassword, setShowPassword] = React.useState(false)
		const disabled =
			props.value === "" || props.value === undefined || props.disabled

		return (
			<div className="relative">
				<Input
					name="password"
					id="password"
					required
					type={showPassword ? "text" : "password"}
					className={cn("hide-password-toggle pr-10", className)}
					ref={ref}
					{...props}
				/>
				<Button
					type="button"
					variant="ghost"
					size="sm"
					className="absolute top-0 right-0 h-full px-3 py-2 hover:bg-transparent"
					onClick={() => setShowPassword((prev) => !prev)}
					disabled={disabled}
				>
					{showPassword && !disabled ? (
						<EyeIcon className="h-4 w-4" aria-hidden="true" />
					) : (
						<EyeOffIcon className="h-4 w-4" aria-hidden="true" />
					)}
					<span className="sr-only">
						{showPassword ? "Hide password" : "Show password"}
					</span>
				</Button>

				{/* hides browsers password toggles */}
				<style>{`
					.hide-password-toggle::-ms-reveal,
					.hide-password-toggle::-ms-clear {
						visibility: hidden;
						pointer-events: none;
						display: none;
					}
				`}</style>
			</div>
		)
	},
)
InputPassword.displayName = "InputPassword"

export { InputPassword }

================
File: components/ui/input/InputStrongPassword.tsx
================
import { InputPassword } from "@components/ui/input/InputPassword"
import { useEffect, useState } from "react"
import { MdDone } from "react-icons/md"
import { RxCross1 } from "react-icons/rx"

type StrongPasswordProps = {
	onPasswordChange: (password: string) => void
	onSignalStrong: (isSignalStrong: boolean) => void
}

const InputStrongPassword = ({
	onPasswordChange,
	onSignalStrong,
}: StrongPasswordProps) => {
	const [hintDropdownOpen, setHintDropdownOpen] = useState(false)
	const [isEyeOpen, setIsEyeOpen] = useState(false)
	const [passwordValue, setPasswordValue] = useState("")
	const [signal, setSignal] = useState({
		lowercase: false,
		uppercase: false,
		number: false,
		symbol: false,
		length: false,
		strong: false,
	})

	const handleStrongPasswordChecker = (
		e: React.ChangeEvent<HTMLInputElement>,
	) => {
		const password = e.target.value
		setPasswordValue(password)

		const hasUpperCase = /[A-Z]/.test(password)
		const hasLowerCase = /[a-z]/.test(password)
		const hasNumber = /[0-9]/.test(password)
		const hasSymbol = /[!@#$%^&*(),.?":{}|<>]/.test(password)

		setSignal({
			lowercase: hasLowerCase,
			uppercase: hasUpperCase,
			number: hasNumber,
			symbol: hasSymbol,
			length: password.length >= 8,
			strong:
				hasUpperCase &&
				hasLowerCase &&
				hasNumber &&
				hasSymbol &&
				password.length >= 8,
		})

		onPasswordChange(password)
	}

	useEffect(() => {
		if (signal.strong) onSignalStrong(true)
		else onSignalStrong(false)
	}, [signal, onSignalStrong])

	return (
		<div className="1024px:w-[80%] w-full">
			<label htmlFor="password" className="font-[400] text-[15px] text-text">
				Password
			</label>
			<div className="relative w-full">
				<InputPassword
					name="password"
					id="password"
					value={passwordValue}
					onChange={handleStrongPasswordChecker}
					onFocus={() => setHintDropdownOpen(true)}
					onBlur={() => {
						setHintDropdownOpen(false)
					}}
				/>

				<div
					className={`${hintDropdownOpen ? "z-30 translate-y-0 opacity-100" : "z-[-1] translate-y-[-10px] opacity-0"} absolute top-[60px] left-0 w-full rounded-md bg-white px-4 py-3 shadow-md transition-all duration-300`}
				>
					<h3 className="font-[500] text-[1rem] text-gray-900">
						Your password must contain:
					</h3>

					<div className="mt-2 flex w-full flex-col gap-[6px]">
						<div
							className={`${signal.length ? "text-green-500" : "text-gray-500"} flex items-center gap-[8px] text-[0.8rem]`}
						>
							{signal.length ? (
								<MdDone className={"text-[1rem]"} />
							) : (
								<RxCross1 />
							)}
							Minimum number of characters is 8.
						</div>
						<div
							className={`${signal.uppercase ? "text-green-500" : "text-gray-500"} flex items-center gap-[8px] text-[0.8rem]`}
						>
							{signal.uppercase ? (
								<MdDone className={"text-[1rem]"} />
							) : (
								<RxCross1 />
							)}
							Should contain uppercase.
						</div>
						<div
							className={`${signal.lowercase ? "text-green-500" : "text-gray-500"} flex items-center gap-[8px] text-[0.8rem]`}
						>
							{signal.lowercase ? (
								<MdDone className={"text-[1rem]"} />
							) : (
								<RxCross1 />
							)}
							Should contain lowercase.
						</div>
						<div
							className={`${signal.number ? "text-green-500" : "text-gray-500"} flex items-center gap-[8px] text-[0.8rem]`}
						>
							{signal.number ? (
								<MdDone className={"text-[1rem]"} />
							) : (
								<RxCross1 />
							)}
							Should contain numbers.
						</div>
						<div
							className={`${signal.symbol ? "text-green-500" : "text-gray-500"} flex items-center gap-[8px] text-[0.8rem]`}
						>
							{signal.symbol ? (
								<MdDone className={"text-[1rem]"} />
							) : (
								<RxCross1 />
							)}
							Should contain special characters.
						</div>
					</div>
				</div>
			</div>
		</div>
	)
}

export default InputStrongPassword

================
File: components/ui/input/InputUsername.tsx
================
"use client"
import { Button } from "@components/ui/Button"
import { Input } from "@components/ui/Input"
import { X } from "lucide-react"
import React, { type ChangeEvent } from "react"

export default function InputUserName() {
	const [userName, setUserName] = React.useState("")

	const handleUserNameChange = (event: ChangeEvent<HTMLInputElement>) => {
		setUserName(event.target.value)
	}

	const clearUserName = () => setUserName("")

	return (
		<>
			<div className="flex gap-1">
				<Input
					id="user_name"
					name="user_name"
					type="user_name"
					value={userName}
					onChange={handleUserNameChange}
					placeholder=""
					required
				/>

				{userName.length > 0 && (
					<Button variant="ghost" onClick={clearUserName}>
						<X className="size-4" />
					</Button>
				)}
			</div>
		</>
	)
}

================
File: components/ui/loadings/loading-screen.tsx
================
"use client"
import GlibberishText from "@components/animation/GlibberishText"
import { isPageReload } from "@utils/page.helpers"
import React from "react"

const LoadingScreen = ({ duration }: { duration: number }) => {
	const [show, setShow] = React.useState(true)

	React.useEffect(() => {
		const timer = setTimeout(() => {
			setShow(false)
		}, duration)

		document.body.style.overflow = "auto"
		return () => {
			clearTimeout(timer)
			document.body.style.overflow = "none"
		}
	}, [duration])

	React.useEffect(() => {
		if (isPageReload()) {
			setShow(true)
		}
	}, [])

	if (!show) return null

	return (
		<div className="fixed z-[1000] flex h-screen w-screen items-center justify-center bg-black">
			<GlibberishText
				text='"&nbsp;piz&nbsp;"'
				className="font-black text-[3rem] tracking-widest"
				colors={["text-pink-500", "text-cyan-400", "text-yellow-500"]}
			/>
		</div>
	)
}

export { LoadingScreen }

================
File: components/ui/modal/WelcomeModal.tsx
================
import { ROUTE } from "@constants/route"
import Link from "next/link"
import React from "react"
import { Button } from "../Button"
import {
	Dialog,
	DialogContent,
	DialogDescription,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from "../Dialog"

export default function WelcomeModal({
	children,
}: { children: React.ReactNode }) {
	const [isWelcomeModalOpen, toggleWelcomeModal] = React.useState(false)

	return (
		<>
			<Dialog open={isWelcomeModalOpen} onOpenChange={toggleWelcomeModal}>
				<DialogTrigger className="cursor-pointer" asChild>
					{children}
				</DialogTrigger>
				<DialogContent className="min-h-[300px] w-[80vw] rounded-lg">
					<DialogHeader className="mt-8">
						<DialogTitle className="font-bold tablet:text-3xl">
							<span className="text-md underline decoration-pink-400 decoration-wavy underline-offset-4">
								Getting started&nbsp;
							</span>
							with Piz
						</DialogTitle>
					</DialogHeader>
					<DialogDescription className="text-center tablet:text-lg">
						Join&nbsp;
						<span className="font-bold text-pink-400">Piz</span> to share
						thoughts, find out what's going on, follow your people and more.
					</DialogDescription>
					<div className="flex-center ">
						<Button
							asChild
							className="max-w-[200px]"
							onClick={() => toggleWelcomeModal(false)}
						>
							<Link href={ROUTE.SIGN_IN}>Explore</Link>
						</Button>
					</div>
				</DialogContent>
			</Dialog>
		</>
	)
}

================
File: components/ui/post/index.tsx
================
"use client"
import { Separator } from "@components/ui/Separator"
import { Skeleton } from "@components/ui/Skeleton"
import PostCommentButton from "@components/ui/post/PostCommentButton"
import PostDropdownMenu from "@components/ui/post/PostDropdownMenu"
import PostReactButton from "@components/ui/post/PostReactButton"
import PostShareButton from "@components/ui/post/PostShareButton"
import PostUserInfo from "@components/ui/post/PostUserInfo"
import type { Post as IPost } from "@prisma/client"
import { useQueryAppUser } from "@queries/client/appUser"
import { useQueryPostCounts, useQueryPostReaction } from "@queries/client/post"
import { cn } from "@utils/cn"
import { Sparkles } from "lucide-react"
import { useRouter } from "nextjs-toploader/app"

export const postButtonClassName = "flex flex-none h-[30px] w-[50px] gap-2"
export const postButtonSkeletonClassName =
	"flex flex-none h-[30px] w-[70px] gap-2"
export const postButtonWrapperClassName =
	"flex-y-center gap-2 bg-background-item"
export const postWidths =
	"mobile_s:w-[300px] mobile_m:w-[350px] mobile_l:w-[400px] tablet:w-[550px] laptop:w-[650px]"

type PostProps = {
	postIndex?: number
	postsLength?: number
}

export default function Post({
	postIndex,
	postsLength,
	id,
	userId, // id of the poster
	userName, // username of the poster
	userAvatarUrl,
	content,
	visibility,
	createdAt,
	updatedAt,
	isDeleted,
}: IPost & PostProps) {
	const router = useRouter()

	// Get the app user byt query data
	const { data: user } = useQueryAppUser()
	const appUserName = user?.user_metadata.userName
	const appUserId = user?.id

	// Get the post counts by query data
	const {
		data: postCounts,
		isSuccess: isPostCountsQuerySuccess,
		isLoading: isPostCountsQueryLoading,
	} = useQueryPostCounts({ postId: id })
	const noReactions = postCounts?.noReactions
	const noComments = postCounts?.noComments
	const noShares = postCounts?.noShares

	// Get the reaction of the post by the app user by query data
	const {
		data: queriedPostReactionByAppUser,
		isSuccess: isPostReactionQuerySuccess,
	} = useQueryPostReaction({
		userId: appUserId,
		postId: id,
	})

	const handlePostClick = (event: React.KeyboardEvent<HTMLDivElement>) => {
		const targetTag = (event.target as HTMLElement).tagName.toLowerCase()
		console.log(targetTag)
		if (targetTag === "div") {
			router.push(`/${userName}/post/${id}`)
		}
	}

	const handlePostKeyUp = (event: React.KeyboardEvent<HTMLDivElement>) => {}

	if (isDeleted) return null

	return (
		<>
			<div
				key={id}
				onClick={handlePostClick}
				onKeyUp={handlePostKeyUp}
				className={cn(
					"mb-0 flex min-h-[100px] w-full transform cursor-pointer flex-col justify-between rounded-t-lg bg-background-item px-5 py-3 transition-transform hover:scale-103",
					postWidths,
				)}
			>
				<div className="flex justify-between">
					<PostUserInfo
						userName={userName}
						userAvatarUrl={userAvatarUrl}
						content={content}
						visibility={visibility}
						createdAt={createdAt}
						updatedAt={updatedAt}
						appUserName={appUserName}
					/>

					<PostDropdownMenu
						userId={userId}
						postId={id}
						userName={userName}
						content={content}
					/>
				</div>
			</div>
			{isPostCountsQueryLoading && (
				<div className="flex gap-5 rounded-b-lg bg-background-item px-2 py-3 pl-4">
					<Skeleton className={postButtonSkeletonClassName} />
					<Skeleton className={postButtonSkeletonClassName} />
					<Skeleton className={postButtonSkeletonClassName} />
				</div>
			)}
			{isPostCountsQuerySuccess ? (
				<div
					className={cn(
						"mt-0 flex h-[30px] gap-5 rounded-b-lg bg-background-item px-2 py-6",
						postWidths,
					)}
				>
					<>
						{isPostReactionQuerySuccess ? (
							<PostReactButton
								className={postButtonClassName}
								wrapperClassName={postButtonWrapperClassName}
								userId={appUserId}
								postId={id}
								initialReactionCount={noReactions ?? 0}
								isReacted={!!queriedPostReactionByAppUser}
							/>
						) : (
							<div className={postButtonWrapperClassName}>
								<Skeleton className={postButtonSkeletonClassName} />
							</div>
						)}

						<PostCommentButton
							className={postButtonClassName}
							wrapperClassName={postButtonWrapperClassName}
							initialCommentCount={noComments ?? 0}
							// User related props
							userId={userId}
							userName={userName}
							userAvatarUrl={userAvatarUrl}
							// Post related props
							postId={id}
							postContent={content}
							postCreatedAt={createdAt}
							postUpdatedAt={updatedAt}
							postVisibility={visibility}
						/>

						<PostShareButton
							className={postButtonClassName}
							wrapperClassName={postButtonWrapperClassName}
							userId={userId}
							postId={id}
							initialShareCount={noShares ?? 0}
						/>
					</>
				</div>
			) : (
				<>Something is wrong here 😢</>
			)}

			{/* biome-ignore lint/style/noNonNullAssertion: All posts, except last one */}
			{postIndex! < postsLength! - 1 && (
				<div className="my-4 flex-center gap-3">
					<Separator className="w-1/3" />
					<Sparkles color="#272727" size={15} />
					<Separator className="w-1/3" />
				</div>
			)}

			{/* biome-ignore lint/style/noNonNullAssertion: Last post */}
			{postIndex === postsLength! - 1 ? (
				<div className="mb-[100px]">
					<div className="mt-[100px] h-full w-full flex-center font-bold text-lg">
						No more posts for you
					</div>
				</div>
			) : (
				<div className="mb-2" />
			)}
		</>
	)
}

================
File: components/ui/post/PostCommentButton.tsx
================
"use client"

import {
	AlertDialog,
	AlertDialogAction,
	AlertDialogCancel,
	AlertDialogContent,
	AlertDialogDescription,
	AlertDialogFooter,
	AlertDialogHeader,
	AlertDialogTitle,
} from "@components/ui/AlertDialog"
import { Button } from "@components/ui/Button"
import { Dialog, DialogContent } from "@components/ui/Dialog"
import { Textarea } from "@components/ui/Textarea"
import type { PostVisibilityEnumType } from "@components/ui/form/PostForm"
import type { PostCounts } from "@components/ui/post/PostReactButton"
import PostUserInfo from "@components/ui/post/PostUserInfo"
import { type CreateCommentProps, createComment } from "@queries/server/comment"
import { useMutation, useQueryClient } from "@tanstack/react-query"
import { cn } from "@utils/cn"
import { queryKey } from "@utils/queryKeyFactory"
import { generateBase64uuid } from "@utils/uuid.helpers"
import { HashIcon, ImageIcon, MenuIcon, MessageSquare } from "lucide-react"
import React from "react"

type PostCommentButtonProps = {
	initialCommentCount: number
	className?: string
	wrapperClassName?: string
	// user related
	userId: string
	userAvatarUrl: string | null
	userName: string | null
	// post related
	postId: string
	postContent: string
	postVisibility?: PostVisibilityEnumType
	postCreatedAt: Date
	postUpdatedAt: Date | null
}

// Comment characters limit
const charsLimit = 550

export default function PostCommentButton({
	className,
	wrapperClassName,
	initialCommentCount,
	// user related props
	userId,
	userAvatarUrl,
	userName,
	// post related props
	postId,
	postContent,
	postVisibility,
	postCreatedAt,
	postUpdatedAt,
}: PostCommentButtonProps) {
	const [modalIsOpen, setOpenModal] = React.useState<boolean>(false)
	const [discardAlertIsOpen, setOpenDiscardAlert] =
		React.useState<boolean>(false)
	const [userInput, setUserInput] = React.useState("")
	const textareaRef = React.useRef<HTMLTextAreaElement>(null)

	const handleInputChange = React.useCallback(
		(e: React.ChangeEvent<HTMLTextAreaElement>) => {
			setUserInput(e.target.value)
		},
		[],
	)

	const queryClient = useQueryClient()

	const addCommentMutation = useMutation({
		mutationKey: queryKey.comment.insert(),
		mutationFn: async (newComment: CreateCommentProps) =>
			await createComment(newComment),
		onMutate: async (newComment) => {
			// Cancel any outgoing refetches to not overwrite our optimistic updates
			await queryClient.cancelQueries({
				queryKey: queryKey.comment.all,
			})

			// Snapshot the previous value
			const previousComments = queryClient.getQueryData(queryKey.comment.all)

			queryClient.setQueryData(queryKey.comment.all, (old: Comment[]) => [
				newComment,
				...old,
			])

			queryClient.setQueryData(queryKey.comment.selectCountByPost(postId), {
				noReactions: 0,
				noShares: 0,
				noComments: 0,
			})
			queryClient.setQueryData(
				queryKey.comment.selectReactionByUser({
					userId,
					commentId: newComment.id,
				}),
				null,
			)
			queryClient.setQueryData(
				queryKey.post.selectCount(postId),
				(prev: PostCounts) => ({
					...prev,
					noComments: prev.noComments + 1,
				}),
			)

			// Return a context object with the snapshotted value
			return { previousComments }
		},
	})

	const handleSubmitComment = () => {
		const newPostCommentId = generateBase64uuid()
		const newComment: CreateCommentProps = {
			id: newPostCommentId,
			parentId: newPostCommentId,
			postId: postId,
			userId: userId,
			userName: userName,
			userAvatarUrl: userAvatarUrl,
			content: userInput,
		}

		if (userName !== null) {
			addCommentMutation.mutate(newComment)
		} else {
			throw new Error("Comment failed: User name or user avatar url is unknown")
		}

		setOpenModal(false)
		setUserInput("")
		// setCommentCount(commentCount + 1)
	}

	const handleOpenDiscardAlert = () => {
		if (userInput.length > 0) {
			// If the value is not empty, open the alert
			setOpenDiscardAlert(true)
		}
	}

	// Textarea auto increases its height on value length
	// biome-ignore lint/correctness/useExhaustiveDependencies: value is only needed here
	React.useEffect(() => {
		if (textareaRef.current) {
			textareaRef.current.style.height = "auto"
			textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`
		}
	}, [userInput])

	return (
		<>
			<div className={wrapperClassName}>
				<Button
					variant="ghost"
					className={cn(className, "max-w-[100px]")}
					onClick={() => setOpenModal(!modalIsOpen)}
				>
					<MessageSquare />
				</Button>
				<span>{initialCommentCount}</span>
			</div>

			<Dialog open={modalIsOpen} onOpenChange={setOpenModal}>
				<DialogContent
					className="flex-col rounded-lg border-0"
					onPointerDownOutside={handleOpenDiscardAlert}
				>
					<PostUserInfo
						userName={userName}
						userAvatarUrl={userAvatarUrl}
						content={postContent}
						visibility={postVisibility}
						createdAt={postCreatedAt}
						updatedAt={postUpdatedAt}
						appUserName={userName}
					/>

					{/* form */}
					<div className="mb-8 w-full flex-start flex-col gap-2">
						<Textarea
							ref={textareaRef}
							value={userInput}
							onChange={handleInputChange}
							placeholder={cn("Reply to ", userName)}
							className=" min-h-[10px] resize-none border-none p-0 focus-visible:ring-0"
						/>
						<div className="flex space-x-4">
							<ImageIcon />
							<HashIcon />
							<MenuIcon />
						</div>
					</div>

					{/* post button */}
					<Button
						onClick={handleSubmitComment}
						// if charsLimit is reached or value is empty -> disable
						disabled={userInput.length > charsLimit || userInput.length === 0}
					>
						Reply
					</Button>
				</DialogContent>
			</Dialog>

			{/* show when value is not empty */}
			<AlertDialog open={discardAlertIsOpen} onOpenChange={setOpenDiscardAlert}>
				<AlertDialogContent>
					<AlertDialogHeader>
						<AlertDialogTitle>Discard comment ?</AlertDialogTitle>
						<AlertDialogDescription />
					</AlertDialogHeader>
					<AlertDialogFooter>
						<AlertDialogCancel onClick={() => setOpenModal(true)}>
							Cancel
						</AlertDialogCancel>
						<AlertDialogAction onClick={() => setUserInput("")}>
							Discard
						</AlertDialogAction>
					</AlertDialogFooter>
				</AlertDialogContent>
			</AlertDialog>
		</>
	)
}

================
File: components/ui/post/PostDropdownMenu.tsx
================
"use client"

import {
	AlertDialog,
	AlertDialogAction,
	AlertDialogCancel,
	AlertDialogContent,
	AlertDialogDescription,
	AlertDialogFooter,
	AlertDialogHeader,
	AlertDialogTitle,
} from "@components/ui/AlertDialog"
import { Button } from "@components/ui/Button"
import {
	Dialog,
	DialogContent,
	DialogDescription,
	DialogHeader,
	DialogTitle,
} from "@components/ui/Dialog"
import {
	DropdownMenu,
	DropdownMenuContent,
	DropdownMenuItem,
	DropdownMenuSeparator,
	DropdownMenuTrigger,
} from "@components/ui/DropdownMenu"
import { Textarea } from "@components/ui/Textarea"
import { createSavedPost } from "@queries/server/saved"
import { useCopyToClipboard } from "@uidotdev/usehooks"
import { BookMarked, Copy, Ellipsis, FlagTriangleRight } from "lucide-react"
import React from "react"

export type PostSaveProps = {
	userId: string
	postId: string
}

export type PostReportProps = {
	userId: string
	postId: string
	content: string
}

export type PostCopyLinkProps = {
	userName: string | null
}

const dropdownMenuItemClassName = "cursor-pointer hover:bg-background-item"

export default function PostDropdownMenu({
	userId,
	postId,
	userName,
	content,
}: PostSaveProps & PostReportProps & PostCopyLinkProps) {
	// Dropdown menu
	const [isDropdownOpen, setOpenDropdown] = React.useState<boolean>(false)
	// Report dialog
	const [isReportDialogOpen, setOpenReportDialog] =
		React.useState<boolean>(false)
	// Report content
	const [reportContent, setReportContent] = React.useState<string>("")
	// Alert dialog for discarding report
	const [alertIsOpen, setOpenAlert] = React.useState<boolean>(false)

	// Handles saving the post
	const handleSavePost = async () => {
		await createSavedPost({ userId, postId })
	}

	// REPORT
	// ------------------------
	// The limit of characters for the report content
	const charsLimit = 200

	// Handles the alert dialog to discard comment
	const handleOpenAlert = () => {
		// If the value is not empty, open the alert
		if (reportContent.length > 0) {
			setOpenAlert(true)
		}
	}

	// Handles discarding the report
	const handleReportDiscard = () => {
		setReportContent("")
	}

	// Handles submitting the report
	const handleReportSubmit = async () => {
		// await createReportedPost({ userId, postId, content: reportContent })
		// Reset the report
		setReportContent("")
		// Close the report dialog
		setOpenReportDialog(false)
		// TODO: show success message
	}
	// ------------------------

	const [copiedText, copyToClipboard] = useCopyToClipboard()

	const postLink = `${userName}/post/${postId}`

	return (
		<>
			<DropdownMenu open={isDropdownOpen} onOpenChange={setOpenDropdown}>
				<DropdownMenuTrigger asChild>
					<Button variant="ghost">
						<Ellipsis />
					</Button>
				</DropdownMenuTrigger>
				<DropdownMenuContent>
					{/* save */}
					<DropdownMenuItem asChild className={dropdownMenuItemClassName}>
						<Button
							variant="ghost"
							className="w-full flex-between"
							onClick={handleSavePost}
						>
							<p>Save</p>
							<BookMarked />
						</Button>
					</DropdownMenuItem>

					<DropdownMenuSeparator />

					{/* report */}
					<DropdownMenuItem asChild className={dropdownMenuItemClassName}>
						<Button
							variant="ghost"
							className="w-full flex-between"
							onClick={() => setOpenReportDialog(true)}
						>
							<p>Report</p>
							<FlagTriangleRight />
						</Button>
					</DropdownMenuItem>

					<DropdownMenuSeparator />

					{/* copy link */}
					<DropdownMenuItem asChild className={dropdownMenuItemClassName}>
						<Button
							variant="ghost"
							className="w-full flex-between"
							onClick={() => copyToClipboard(postLink)}
						>
							<p>Copy link</p>
							<Copy />
						</Button>
					</DropdownMenuItem>
				</DropdownMenuContent>
			</DropdownMenu>

			{/* report dialog */}
			<Dialog open={isReportDialogOpen} onOpenChange={setOpenReportDialog}>
				<DialogContent
					className="rounded-lg border-none"
					onPointerDownOutside={handleOpenAlert}
				>
					<DialogHeader>
						<DialogTitle>Report</DialogTitle>
						<DialogDescription>
							Why are you reporting this post ?
						</DialogDescription>

						<Textarea
							value={reportContent}
							onChange={(e) => setReportContent(e.target.value)}
						/>
					</DialogHeader>

					{/* report button */}
					<Button
						onClick={handleReportSubmit}
						// if charsLimit is reached or value is empty -> disable
						disabled={
							reportContent.length > charsLimit || reportContent.length === 0
						}
					>
						Reply
					</Button>
				</DialogContent>
			</Dialog>

			{/* show when report content is not empty */}
			<AlertDialog open={alertIsOpen} onOpenChange={setOpenAlert}>
				<AlertDialogContent>
					<AlertDialogHeader>
						<AlertDialogTitle>Discard report ?</AlertDialogTitle>
						<AlertDialogDescription />
					</AlertDialogHeader>
					<AlertDialogFooter>
						<AlertDialogCancel onClick={() => setOpenReportDialog(true)}>
							Cancel
						</AlertDialogCancel>
						<AlertDialogAction onClick={handleReportDiscard}>
							Discard
						</AlertDialogAction>
					</AlertDialogFooter>
				</AlertDialogContent>
			</AlertDialog>
		</>
	)
}

================
File: components/ui/post/PostFormDesktop.tsx
================
"use client"

import { userAtom } from "@atoms/user"
import { Avatar, AvatarImage } from "@components/ui/Avatar"
import { Input } from "@components/ui/Input"
import PostForm from "@components/ui/form/PostForm"
import { useAtomValue } from "jotai"

export default function PostFormDesktop() {
	const user = useAtomValue(userAtom)
	const userAvatarUrl = user?.user_metadata?.avatar_url
	return (
		<>
			<PostForm>
				<div className="flex-center gap-3 rounded-lg bg-background-item p-3">
					<Avatar>
						<AvatarImage
							src={
								userAvatarUrl ??
								"https://static.vecteezy.com/system/resources/thumbnails/025/337/669/small_2x/default-male-avatar-profile-icon-social-media-chatting-online-user-free-vector.jpg"
							}
						/>
					</Avatar>
					<Input placeholder="What's happening?" className="" />
				</div>
			</PostForm>
		</>
	)
}

================
File: components/ui/post/PostList.tsx
================
"use client"
import Post from "@components/ui/post"
import { useQueryAllPosts } from "@queries/client/post"

export default function PostList() {
	const {
		data: posts,
		isLoading,
		isError,
		isSuccess,
		isPending,
		isFetching,
		error,
	} = useQueryAllPosts()

	if (isError) {
		console.log("Error loading posts : ", error)
		return <div>Error loading posts 😢</div>
	}

	// if (isLoading || isFetching) return <div>Loading posts...</div>
	if (isSuccess)
		return (
			<>
				<div>
					{posts?.map(
						(
							{
								id,
								userId,
								userName,
								userAvatarUrl,
								content,
								visibility,
								createdAt,
								updatedAt,
								isDeleted,
							},
							index,
						) => (
							<Post
								postIndex={index}
								postsLength={posts.length}
								key={id}
								id={id}
								userId={userId}
								userName={userName}
								userAvatarUrl={userAvatarUrl}
								content={content}
								visibility={visibility}
								createdAt={createdAt}
								updatedAt={updatedAt}
								isDeleted={isDeleted}
							/>
						),
					)}
				</div>
			</>
		)
}

================
File: components/ui/post/PostReactButton.tsx
================
"use client"

import { Button } from "@components/ui/Button"
import { createPostReaction } from "@queries/server/postReaction"
import { useMutation, useQueryClient } from "@tanstack/react-query"
import { cn } from "@utils/cn"
import { queryKey } from "@utils/queryKeyFactory"
import { Heart } from "lucide-react"
import React from "react"

type PostReactButtonProps = {
	initialReactionCount: number
	isReacted: boolean
	userId?: string
	postId: string
	className?: string
	wrapperClassName?: string
}

export type PostCounts = {
	noReactions: number
	noShares: number
	noComments: number
}

export default function PostReactButton({
	userId,
	postId,
	initialReactionCount,
	isReacted,
	className,
	wrapperClassName,
}: PostReactButtonProps) {
	const [localIsReacted, setReactionStatus] = React.useState(isReacted)
	const queryClient = useQueryClient()

	const postReactMutation = useMutation({
		mutationKey: queryKey.post.selectReactionByUser({ userId, postId }),
		mutationFn: () => createPostReaction({ userId, postId }),
		onMutate: async () => {
			// Cancel any outgoing refetches (so they don't overwrite our optimistic update)
			await queryClient.cancelQueries({
				queryKey: [
					queryKey.post.selectReactionByUser({ userId, postId }),
					queryKey.post.selectCount(postId),
				],
			})

			// Snapshot the previous value
			const previousPostReaction = queryClient.getQueryData(
				queryKey.post.selectReactionByUser({ userId, postId }),
			)
			const previousPostCounts = queryClient.getQueryData(
				queryKey.post.selectCount(postId),
			)

			queryClient.setQueryData(
				queryKey.post.selectCount(postId),
				(prev: PostCounts) => ({
					...prev,
					noReactions: localIsReacted
						? prev.noReactions - 1
						: prev.noReactions + 1,
				}),
			)

			return { previousPostReaction, previousPostCounts }
		},
		onError: (err, newReaction, context) => {
			if (context) {
				queryClient.setQueryData(
					queryKey.post.selectCount(postId),
					context.previousPostCounts,
				)
				queryClient.setQueryData(
					queryKey.post.selectReactionByUser({ userId, postId }),
					context.previousPostReaction,
				)
			}
		},
		onSettled: () => {
			queryClient.invalidateQueries({
				queryKey: [
					queryKey.post.selectCount(postId),
					queryKey.post.selectReactionByUser({ userId, postId }),
				],
			})
		},
	})

	const handleReact = () => {
		postReactMutation.mutate()
		setReactionStatus(!localIsReacted)
	}

	return (
		<div className={wrapperClassName}>
			<Button variant="ghost" className={className} onClick={handleReact}>
				<Heart
					className={cn(
						"w-[20px]",
						localIsReacted ? "animate-fillHeart" : "animate-unfillHeart",
					)}
				/>
			</Button>
			<span>{initialReactionCount}</span>
		</div>
	)
}

================
File: components/ui/post/PostSaveButton.tsx
================
import { Button } from "@components/ui/Button"

export default function PostSaveButton({
	userId,
	postId,
}: { userId: string; postId: string }) {
	const handleSavePost = () => {}

	return (
		<>
			<Button variant="ghost" className="w-full" onClick={handleSavePost}>
				Save
			</Button>
		</>
	)
}

================
File: components/ui/post/PostShareButton.tsx
================
"use client"

import { Button } from "@components/ui/Button"
import { Forward } from "lucide-react"
import React from "react"

type PostShareButtonProps = {
	userId: string
	postId: string
	initialShareCount: number
	className?: string
	wrapperClassName?: string
}

/*
 * TODO:
 *  Fetch all user's followers -> Share the post to a follower or all followers
 */

export default function PostShareButton({
	userId,
	postId,
	initialShareCount,
	className,
	wrapperClassName,
}: PostShareButtonProps) {
	const [shareCount, setShareCount] = React.useState(initialShareCount)

	return (
		<div className={wrapperClassName}>
			<Button variant="ghost" className={className}>
				<Forward />
			</Button>
			<span>{shareCount}</span>
		</div>
	)
}

================
File: components/ui/post/PostUserInfo.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "@components/ui/Avatar"
import { avatarPlaceholder } from "@utils/image.helpers"
import { getTimeDiffStatus } from "@utils/time.helpers"
import { CircleUserRound } from "lucide-react"
import type { Route } from "next"
import Link from "next/link"
import type { PostVisibilityEnumType } from "../form/PostForm"
import PostVisibilityBadge from "./PostVisibilityBadge"

export type PostUserInfoProps = {
	userAvatarUrl: string | null
	userName: string | null
	content?: string
	visibility?: PostVisibilityEnumType
	createdAt: Date
	updatedAt: Date | null
	appUserName?: string | null
	isWriteOnly?: boolean
}

export default function PostUserInfo({
	userAvatarUrl,
	userName,
	content,
	visibility,
	createdAt,
	updatedAt,
	appUserName,
	isWriteOnly, // If the post is write-only, then hide the time diff
}: PostUserInfoProps) {
	return (
		<>
			<div className="flex items-start gap-3">
				<Avatar className="size-8">
					<AvatarImage
						src={userAvatarUrl ?? avatarPlaceholder}
						alt="User Avatar"
					/>
					<AvatarFallback>PIZ</AvatarFallback>
				</Avatar>

				<div className="flex flex-col gap-2">
					<div>
						<div className="flex-y-center gap-4">
							<Link
								href={`/${userName}` as Route}
								className="flex items-center gap-2 font-bold hover:underline hover:decoration-wavy hover:underline-offset-2"
							>
								<p>{userName}</p>
								{appUserName === userName && (
									<CircleUserRound className="size-4" />
								)}
							</Link>
							<p className="text-slate-500 text-sm italic">
								{!isWriteOnly && getTimeDiffStatus(createdAt, updatedAt)}
							</p>
						</div>
						{visibility && <PostVisibilityBadge visibility={visibility} />}
					</div>
					<div className="flex flex-col gap-4">
						<div className="whitespace-pre-wrap text-wrap-pretty">
							{content}
						</div>
					</div>
				</div>
			</div>
		</>
	)
}

================
File: components/ui/post/PostVisibilityBadge.tsx
================
import { Badge } from "@components/ui/Badge"
import type { PostVisibilityEnumType } from "@components/ui/form/PostForm"
import { PostVisibility } from "@prisma/client"
import { cn } from "@utils/cn"

type PostVisibilityBadgeProps = {
	visibility: PostVisibilityEnumType
}

export default function PostVisibilityBadge({
	visibility,
}: PostVisibilityBadgeProps) {
	// Get label based on the visibility of the post
	const visibilityMap: { [key in PostVisibility]: string } = {
		[PostVisibility.PUBLIC]: "Public",
		[PostVisibility.FOLLOWERS_ONLY]: "Followers only",
		[PostVisibility.MENTIONED_ONLY]: "Mentioned only",
		[PostVisibility.FANS_ONLY]: "Fans only",
		[PostVisibility.ME_ONLY]: "Talking to myself",
	}

	// Get style based on the visibility of the post
	const styleMap: { [key in PostVisibility]: string } = {
		[PostVisibility.PUBLIC]: "bg-green-300 text-green-700",
		[PostVisibility.FOLLOWERS_ONLY]: "bg-blue-100 text-blue-800",
		[PostVisibility.MENTIONED_ONLY]: "bg-yellow-100 text-yellow-800",
		[PostVisibility.FANS_ONLY]: "bg-pink-100 text-pink-800",
		[PostVisibility.ME_ONLY]: "bg-gray-100 text-gray-800",
	}

	return (
		<>
			<Badge className={cn("w-fit", styleMap[visibility])} variant="default">
				{visibilityMap[visibility]}
			</Badge>
		</>
	)
}

================
File: components/ui/search/SearchBar.tsx
================
"use client"
import { Input } from "@components/ui/Input"
import { Separator } from "@components/ui/Separator"
import SearchList, {
	type SearchResultProps,
} from "@components/ui/search/SearchList"
import SearchSkeleton from "@components/ui/skeleton/SearchResultSkeleton"
import { useQueryAppUser } from "@queries/client/appUser"
import { SearchIcon, Sparkles } from "lucide-react"
import React from "react"

export default function SearchBar() {
	const [searchValue, setSearchValue] = React.useState<string>("")
	const [isSearching, setIsSearching] = React.useState<boolean>(false)
	const [searchResults, setSearchResults] = React.useState<SearchResultProps>(
		[],
	)

	const { data: user } = useQueryAppUser()
	// const appUserId = user?.id

	const handleSearchvalue = async (value: string) => {
		try {
			if (value.length > 0) {
				setIsSearching(true)
				// const data = await usePartialSearch({
				// 	prefix: value,
				// })
				setIsSearching(false)
				// setSearchResults(data)
			}
		} catch (error) {
			console.error("Error searching: ", error)
		}
	}

	// biome-ignore lint/correctness/useExhaustiveDependencies: handleSearchvalue renders on every change
	React.useEffect(() => {
		if (searchValue.length > 0) {
			handleSearchvalue(searchValue.toLowerCase())
		} else {
			setSearchResults([])
		}
	}, [searchValue])

	return (
		<>
			<div className="mobile_l:w-[400px] mobile_m:w-[350px] mobile_s:w-[300px] tablet:w-[600px] flex-center flex-col">
				<div className="relative w-full">
					<SearchIcon className="absolute top-2.5 left-2.5 h-4 w-4 text-gray-500" />
					<Input
						value={searchValue}
						onChange={(e) => setSearchValue(e.target.value)}
						type="search"
						placeholder="Search..."
						className="pl-8"
					/>
				</div>

				{/* Display search results */}
				{isSearching && (
					<>
						<SearchSkeleton />
						<SearchSkeleton />
						<SearchSkeleton />
					</>
				)}

				{searchValue.length > 0 && (
					<div className="w-full">
						<SearchList
							searchResults={searchResults}
							appUserId={appUserId ?? null}
						/>
						<div className="my-1 flex-center gap-3">
							<Separator className="w-1/3" />
							<Sparkles color="#272727" size={15} />
							<Separator className="w-1/3" />
						</div>
					</div>
				)}
			</div>
		</>
	)
}

================
File: components/ui/search/SearchList.tsx
================
import { Avatar, AvatarImage } from "@components/ui/Avatar"
import FollowButton from "@components/ui/button/FollowButton"
import { cn } from "@utils/cn"
import { avatarPlaceholder } from "@utils/image.helpers"
import type { Route } from "next"
import Link from "next/link"

export type SearchResultProps = {
	id: string
	fullName: string
	userName: string
	avatarUrl: string | null
}[]

type SearchListProps = {
	appUserId?: string | null
	searchResults: SearchResultProps | null
	isMention?: boolean
	containerClassname?: string
	onSearchResultClick?: (id: string, userName: string) => void
}

export default function SearchList({
	searchResults,
	appUserId,
	isMention = false,
	containerClassname,
	onSearchResultClick,
}: SearchListProps) {
	const handleSearchResultClick = (id: string, userName: string) => {
		onSearchResultClick?.(id, userName)
	}
	const handleKeyUp = (
		event: React.KeyboardEvent<HTMLDivElement>,
		id: string,
		userName: string,
	) => {
		if (event.key === "Enter") handleSearchResultClick(id, userName)
	}
	return (
		<>
			<div className={cn("my-4 w-full flex-col gap-3", containerClassname)}>
				{searchResults?.map(({ id, userName, fullName, avatarUrl }) => (
					<>
						{isMention ? (
							<div
								key={id}
								onClick={() => handleSearchResultClick(id, userName)}
								onKeyUp={(e) => handleKeyUp(e, id, userName)}
								className="flex h-full w-full flex-between flex-y-center cursor-pointer gap-3"
							>
								<div className="flex-auto gap-3 rounded-lg bg-background-item px-4 py-2">
									<div className="flex-y-center gap-5">
										<Avatar>
											<AvatarImage
												src={avatarUrl ?? avatarPlaceholder}
												alt={userName}
											/>
										</Avatar>
										<div className="flex-col gap-1">
											<p className="font-bold">{userName}</p>
											<p className="text-gray-400">{fullName}</p>
										</div>
									</div>
								</div>

								{appUserId && !isMention && (
									<FollowButton
										className="h-[70px] w-[100px]"
										followerId={appUserId}
										followeeId={id}
									/>
								)}
							</div>
						) : (
							<div
								key={id}
								className="flex h-full w-full flex-between flex-y-center gap-3"
							>
								<Link
									href={`/${userName}` as Route}
									className="flex-auto gap-3 rounded-lg bg-background-item px-4 py-2"
								>
									<div className="flex-y-center gap-5">
										<Avatar>
											<AvatarImage
												src={avatarUrl ?? avatarPlaceholder}
												alt={userName}
											/>
										</Avatar>
										<div className="flex-col gap-1">
											<p className="font-bold">{userName}</p>
											<p className="text-gray-400">{fullName}</p>
										</div>
									</div>
								</Link>

								{appUserId && !isMention && (
									<FollowButton
										className="h-[70px] w-[100px]"
										followerId={appUserId}
										followeeId={id}
									/>
								)}
							</div>
						)}
					</>
				))}
			</div>
		</>
	)
}

================
File: components/ui/skeleton/SearchResultSkeleton.tsx
================
import { Skeleton } from "@components/ui/Skeleton"

export default function SearchSkeleton() {
	return (
		<>
			<div className="m-2 w-full flex-between flex-y-center gap-3 rounded-lg bg-background-item p-4">
				<div className="flex-y-center gap-3">
					<Skeleton className="h-12 w-12 rounded-full" />
					<div className="flex-col gap-2">
						<Skeleton className="h-2 w-20 rounded-md" />
						<Skeleton className="h-2 w-full rounded-md" />
					</div>
				</div>
			</div>
		</>
	)
}

================
File: components/ui/toast/index.tsx
================
"use client"

import * as ToastPrimitives from "@radix-ui/react-toast"
import { type VariantProps, cva } from "class-variance-authority"
import * as React from "react"

import { cn } from "@utils/cn"
import { X } from "lucide-react"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
	React.ElementRef<typeof ToastPrimitives.Viewport>,
	React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
	<ToastPrimitives.Viewport
		ref={ref}
		className={cn(
			"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:top-auto sm:right-0 sm:bottom-0 sm:flex-col md:max-w-[420px]",
			className,
		)}
		{...props}
	/>
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
	"group data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[state=closed]:animate-out data-[state=open]:animate-in data-[swipe=end]:animate-out data-[swipe=move]:transition-none",
	{
		variants: {
			variant: {
				default: "border bg-background text-foreground",
				destructive:
					"destructive group border-destructive bg-destructive text-destructive-foreground",
			},
		},
		defaultVariants: {
			variant: "default",
		},
	},
)

const Toast = React.forwardRef<
	React.ElementRef<typeof ToastPrimitives.Root>,
	React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
		VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
	return (
		<ToastPrimitives.Root
			ref={ref}
			className={cn(toastVariants({ variant }), className)}
			{...props}
		/>
	)
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
	React.ElementRef<typeof ToastPrimitives.Action>,
	React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
	<ToastPrimitives.Action
		ref={ref}
		className={cn(
			"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 font-medium text-sm transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:focus:ring-destructive group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground",
			className,
		)}
		{...props}
	/>
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
	React.ElementRef<typeof ToastPrimitives.Close>,
	React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
	<ToastPrimitives.Close
		ref={ref}
		className={cn(
			"absolute top-1 right-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600 group-[.destructive]:hover:text-red-50",
			className,
		)}
		toast-close=""
		{...props}
	>
		<X className="h-4 w-4" />
	</ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
	React.ElementRef<typeof ToastPrimitives.Title>,
	React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
	<ToastPrimitives.Title
		ref={ref}
		className={cn("font-semibold text-sm [&+div]:text-xs", className)}
		{...props}
	/>
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
	React.ElementRef<typeof ToastPrimitives.Description>,
	React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
	<ToastPrimitives.Description
		ref={ref}
		className={cn("text-sm opacity-90", className)}
		{...props}
	/>
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
	type ToastProps,
	type ToastActionElement,
	ToastProvider,
	ToastViewport,
	Toast,
	ToastTitle,
	ToastDescription,
	ToastClose,
	ToastAction,
}

================
File: components/ui/toast/Toaster.tsx
================
"use client"

import { useToast } from "@components/ui/toast/useToast"
import {
	Toast,
	ToastClose,
	ToastDescription,
	ToastProvider,
	ToastTitle,
	ToastViewport,
} from "."

export function Toaster() {
	const { toasts } = useToast()

	return (
		<ToastProvider>
			{toasts.map(({ id, title, description, action, ...props }) => (
				<Toast key={id} {...props}>
					<div className="grid gap-1">
						{title && <ToastTitle>{title}</ToastTitle>}
						{description && <ToastDescription>{description}</ToastDescription>}
					</div>
					{action}
					<ToastClose />
				</Toast>
			))}
			<ToastViewport />
		</ToastProvider>
	)
}

================
File: components/ui/toast/useToast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"
import type { ToastActionElement, ToastProps } from "."

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
	id: string
	title?: React.ReactNode
	description?: React.ReactNode
	action?: ToastActionElement
}

const actionTypes = {
	ADD_TOAST: "ADD_TOAST",
	UPDATE_TOAST: "UPDATE_TOAST",
	DISMISS_TOAST: "DISMISS_TOAST",
	REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
	count = (count + 1) % Number.MAX_SAFE_INTEGER
	return count.toString()
}

type ActionType = typeof actionTypes

type Action =
	| {
			type: ActionType["ADD_TOAST"]
			toast: ToasterToast
	  }
	| {
			type: ActionType["UPDATE_TOAST"]
			toast: Partial<ToasterToast>
	  }
	| {
			type: ActionType["DISMISS_TOAST"]
			toastId?: ToasterToast["id"]
	  }
	| {
			type: ActionType["REMOVE_TOAST"]
			toastId?: ToasterToast["id"]
	  }

interface State {
	toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
	if (toastTimeouts.has(toastId)) {
		return
	}

	const timeout = setTimeout(() => {
		toastTimeouts.delete(toastId)
		dispatch({
			type: "REMOVE_TOAST",
			toastId: toastId,
		})
	}, TOAST_REMOVE_DELAY)

	toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
	switch (action.type) {
		case "ADD_TOAST":
			return {
				...state,
				toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
			}

		case "UPDATE_TOAST":
			return {
				...state,
				toasts: state.toasts.map((t) =>
					t.id === action.toast.id ? { ...t, ...action.toast } : t,
				),
			}

		case "DISMISS_TOAST": {
			const { toastId } = action

			// ! Side effects ! - This could be extracted into a dismissToast() action,
			// but I'll keep it here for simplicity
			if (toastId) {
				addToRemoveQueue(toastId)
			} else {
				state.toasts.forEach((toast) => {
					addToRemoveQueue(toast.id)
				})
			}

			return {
				...state,
				toasts: state.toasts.map((t) =>
					t.id === toastId || toastId === undefined
						? {
								...t,
								open: false,
							}
						: t,
				),
			}
		}
		case "REMOVE_TOAST":
			if (action.toastId === undefined) {
				return {
					...state,
					toasts: [],
				}
			}
			return {
				...state,
				toasts: state.toasts.filter((t) => t.id !== action.toastId),
			}
	}
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
	memoryState = reducer(memoryState, action)
	listeners.forEach((listener) => {
		listener(memoryState)
	})
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
	const id = genId()

	const update = (props: ToasterToast) =>
		dispatch({
			type: "UPDATE_TOAST",
			toast: { ...props, id },
		})
	const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

	dispatch({
		type: "ADD_TOAST",
		toast: {
			...props,
			id,
			open: true,
			onOpenChange: (open) => {
				if (!open) dismiss()
			},
		},
	})

	return {
		id: id,
		dismiss,
		update,
	}
}

function useToast() {
	const [state, setState] = React.useState<State>(memoryState)

	React.useEffect(() => {
		listeners.push(setState)
		return () => {
			const index = listeners.indexOf(setState)
			if (index > -1) {
				listeners.splice(index, 1)
			}
		}
	}, [])

	return {
		...state,
		toast,
		dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
	}
}

export { useToast, toast }

================
File: components/ui/toggle/ThemeToggle.tsx
================
"use client"

import { Button } from "@components/ui/Button"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { useEffect, useState } from "react"

const ThemeToggle = ({
	noButton = false,
	iconSize,
	iconClassName,
	darkModeLabel,
	lightModeLabel,
}: {
	noButton?: boolean
	iconSize?: number
	iconClassName?: string
	darkModeLabel?: string
	lightModeLabel?: string
}) => {
	const { theme, setTheme } = useTheme()
	const [mounted, setMounted] = useState(false)

	// Avoid hydration error, only show when mounted
	useEffect(() => setMounted(true), [])
	if (!mounted) return null

	if (noButton)
		return (
			<>
				{theme === "light" ? (
					<>
						<Sun size={iconSize} className={iconClassName} />
						<span>{lightModeLabel ?? ""}</span>
					</>
				) : (
					<>
						<Moon size={iconSize} className={iconClassName} />
						<span>{darkModeLabel ?? ""}</span>
					</>
				)}
			</>
		)

	const handleThemeToggle = () => {
		setTheme(theme === "light" ? "dark" : "light")
	}

	return (
		<Button onClick={handleThemeToggle}>
			{theme === "light" ? (
				<>
					<Sun size={iconSize} className={iconClassName} />
					<span>{lightModeLabel ?? ""}</span>
				</>
			) : (
				<>
					<Moon size={iconSize} className={iconClassName} />
					<span>{darkModeLabel ?? ""}</span>
				</>
			)}
		</Button>
	)
}

export { ThemeToggle }

================
File: components/ui/AlertDialog.tsx
================
"use client"

import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import * as React from "react"

import { buttonVariants } from "@components/ui/Button"
import { cn } from "@utils/cn"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
	React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
	React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
	<AlertDialogPrimitive.Overlay
		className={cn(
			"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80 data-[state=closed]:animate-out data-[state=open]:animate-in",
			className,
		)}
		{...props}
		ref={ref}
	/>
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
	React.ElementRef<typeof AlertDialogPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
	<AlertDialogPortal>
		<AlertDialogOverlay />
		<AlertDialogPrimitive.Content
			ref={ref}
			className={cn(
				"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed top-[50%] left-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=closed]:animate-out data-[state=open]:animate-in sm:rounded-lg",
				className,
			)}
			{...props}
		/>
	</AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			"flex flex-col space-y-2 text-center sm:text-left",
			className,
		)}
		{...props}
	/>
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
			className,
		)}
		{...props}
	/>
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
	React.ElementRef<typeof AlertDialogPrimitive.Title>,
	React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
	<AlertDialogPrimitive.Title
		ref={ref}
		className={cn("font-semibold text-lg", className)}
		{...props}
	/>
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
	React.ElementRef<typeof AlertDialogPrimitive.Description>,
	React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
	<AlertDialogPrimitive.Description
		ref={ref}
		className={cn("text-muted-foreground text-sm", className)}
		{...props}
	/>
))
AlertDialogDescription.displayName =
	AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
	React.ElementRef<typeof AlertDialogPrimitive.Action>,
	React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
	<AlertDialogPrimitive.Action
		ref={ref}
		className={cn(buttonVariants(), className)}
		{...props}
	/>
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
	React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
	React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
	<AlertDialogPrimitive.Cancel
		ref={ref}
		className={cn(
			buttonVariants({ variant: "outline" }),
			"mt-2 sm:mt-0",
			className,
		)}
		{...props}
	/>
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
	AlertDialog,
	AlertDialogPortal,
	AlertDialogOverlay,
	AlertDialogTrigger,
	AlertDialogContent,
	AlertDialogHeader,
	AlertDialogFooter,
	AlertDialogTitle,
	AlertDialogDescription,
	AlertDialogAction,
	AlertDialogCancel,
}

================
File: components/ui/Avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@utils/cn"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/AvatarStack.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "@components/ui/Avatar"
import {
	Tooltip,
	TooltipContent,
	TooltipProvider,
	TooltipTrigger,
} from "@components/ui/Tooltip"
import { cn } from "@utils/cn"
import { type VariantProps, cva } from "class-variance-authority"

const avatarStackVariants = cva("flex", {
	variants: {
		orientation: {
			vertical: "flex-row",
			horizontal: "flex-col",
		},
		spacing: {
			sm: "-space-x-5 -space-y-5",
			md: "-space-x-4 -space-y-4",
			lg: "-space-x-3 -space-y-3",
			xl: "-space-x-2 -space-y-2",
		},
	},
	defaultVariants: {
		orientation: "vertical",
		spacing: "md",
	},
})

export interface AvatarStackProps
	extends React.HTMLAttributes<HTMLDivElement>,
		VariantProps<typeof avatarStackVariants> {
	avatars: { name: string; image: string }[]
	maxAvatarsAmount?: number
	avatarImageClassName?: string
	showHiddenAvatarLength?: boolean
}

const AvatarStack = ({
	className,
	orientation,
	avatars,
	spacing,
	maxAvatarsAmount = 3,
	avatarImageClassName,
	showHiddenAvatarLength,
	...props
}: AvatarStackProps) => {
	const shownAvatars = avatars.slice(0, maxAvatarsAmount)
	const hiddenAvatars = avatars.slice(maxAvatarsAmount)

	return (
		<div
			className={cn(
				avatarStackVariants({ orientation, spacing }),
				className,
				orientation === "horizontal" ? "-space-x-0" : "-space-y-0",
			)}
			{...props}
		>
			{shownAvatars.map(({ name, image }, index) => (
				<TooltipProvider delayDuration={300} key={`${image}-${index + 1}`}>
					<Tooltip>
						<TooltipTrigger asChild>
							<Avatar className={cn(avatarStackVariants(), "hover:z-10")}>
								<AvatarImage src={image} className={avatarImageClassName} />
								<AvatarFallback>
									{name
										?.split(" ")
										?.map((word) => word[0])
										?.join("")
										?.toUpperCase()}
								</AvatarFallback>
							</Avatar>
						</TooltipTrigger>
						<TooltipContent>
							<p>{name}</p>
						</TooltipContent>
					</Tooltip>
				</TooltipProvider>
			))}

			{hiddenAvatars.length && showHiddenAvatarLength ? (
				<TooltipProvider delayDuration={300}>
					<Tooltip>
						<TooltipTrigger asChild>
							<Avatar key="Excesive avatars">
								<AvatarFallback>
									+{avatars.length - shownAvatars.length}
								</AvatarFallback>
							</Avatar>
						</TooltipTrigger>
						<TooltipContent>
							{hiddenAvatars.map(({ name }, index) => (
								<p key={`${name}-${index + 1}`}>{name}</p>
							))}
						</TooltipContent>
					</Tooltip>
				</TooltipProvider>
			) : null}
		</div>
	)
}

export { AvatarStack, avatarStackVariants }

================
File: components/ui/Badge.tsx
================
import { type VariantProps, cva } from "class-variance-authority"
import type * as React from "react"

import { cn } from "@utils/cn"

const badgeVariants = cva(
	"inline-flex items-center rounded-md border px-2.5 py-0.5 font-semibold text-xs transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
	{
		variants: {
			variant: {
				default:
					"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
				secondary:
					"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
				destructive:
					"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
				outline: "text-foreground",
			},
		},
		defaultVariants: {
			variant: "default",
		},
	},
)

export interface BadgeProps
	extends React.HTMLAttributes<HTMLDivElement>,
		VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
	return (
		<div
			className={cn(badgeVariants({ variant }), className)}
			{...props}
		/>
	)
}

export { Badge, badgeVariants }

================
File: components/ui/Button.tsx
================
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";

import { cn } from "@utils/cn";

const customGhostClass =
	"focus:outline-none focus-visible:ring-0 focus-visible:ring-offset-0";

const buttonVariants = cva(
	"inline-flex items-center justify-center whitespace-nowrap rounded-md font-medium text-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
	{
		variants: {
			variant: {
				default:
					"bg-primary text-primary-foreground shadow hover:bg-primary/90",
				destructive:
					"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
				outline:
					"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
				secondary:
					"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
				ghost: `hover:bg-background hover:text-accent-foreground ${customGhostClass}`,
				link: "text-primary underline-offset-4 hover:underline",
			},
			size: {
				default: "h-9 px-4 py-2",
				sm: "h-8 rounded-md px-3 text-xs",
				lg: "h-10 rounded-md px-8",
				icon: "h-9 w-9",
			},
		},
		defaultVariants: {
			variant: "default",
			size: "default",
		},
	},
);

export interface ButtonProps
	extends React.ButtonHTMLAttributes<HTMLButtonElement>,
		VariantProps<typeof buttonVariants> {
	asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
	({ className, variant, size, asChild = false, ...props }, ref) => {
		const Comp = asChild ? Slot : "button";
		return (
			<Comp
				className={cn(buttonVariants({ variant, size, className }))}
				ref={ref}
				{...props}
			/>
		);
	},
);
Button.displayName = "Button";

export { Button, buttonVariants };

================
File: components/ui/Card.tsx
================
import * as React from "react";

import { cn } from "@utils/cn";

const Card = React.forwardRef<
	HTMLDivElement,
	React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
	<div
		ref={ref}
		className={cn(
			"rounded-xl border bg-card text-card-foreground shadow",
			className,
		)}
		{...props}
	/>
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
	HTMLDivElement,
	React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
	<div
		ref={ref}
		className={cn("flex flex-col space-y-1.5 p-6", className)}
		{...props}
	/>
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
	HTMLParagraphElement,
	React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
	<h3
		ref={ref}
		className={cn("font-semibold leading-none tracking-tight", className)}
		{...props}
	/>
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
	HTMLParagraphElement,
	React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
	<p
		ref={ref}
		className={cn("text-sm text-muted-foreground", className)}
		{...props}
	/>
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
	HTMLDivElement,
	React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
	<div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
	HTMLDivElement,
	React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
	<div
		ref={ref}
		className={cn("flex items-center p-6 pt-0", className)}
		{...props}
	/>
));
CardFooter.displayName = "CardFooter";

export {
	Card,
	CardHeader,
	CardFooter,
	CardTitle,
	CardDescription,
	CardContent,
};

================
File: components/ui/Command.tsx
================
"use client"

import { Dialog, DialogContent } from "@components/ui/Dialog"
import type { DialogProps } from "@radix-ui/react-dialog"
import { cn } from "@utils/cn"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"
import * as React from "react"

const Command = React.forwardRef<
	React.ElementRef<typeof CommandPrimitive>,
	React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
	<CommandPrimitive
		ref={ref}
		className={cn(
			"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
			className,
		)}
		{...props}
	/>
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
	return (
		<Dialog {...props}>
			<DialogContent className="overflow-hidden p-0 shadow-lg">
				<Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
					{children}
				</Command>
			</DialogContent>
		</Dialog>
	)
}

const CommandInput = React.forwardRef<
	React.ElementRef<typeof CommandPrimitive.Input>,
	React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
	<div className="flex items-center border-b px-3" cmdk-input-wrapper="">
		<Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
		<CommandPrimitive.Input
			ref={ref}
			className={cn(
				"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
				className,
			)}
			{...props}
		/>
	</div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
	React.ElementRef<typeof CommandPrimitive.List>,
	React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
	<CommandPrimitive.List
		ref={ref}
		className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
		{...props}
	/>
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
	React.ElementRef<typeof CommandPrimitive.Empty>,
	React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
	<CommandPrimitive.Empty
		ref={ref}
		className="py-6 text-center text-sm"
		{...props}
	/>
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
	React.ElementRef<typeof CommandPrimitive.Group>,
	React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
	<CommandPrimitive.Group
		ref={ref}
		className={cn(
			"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group-heading]]:text-xs",
			className,
		)}
		{...props}
	/>
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
	React.ElementRef<typeof CommandPrimitive.Separator>,
	React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
	<CommandPrimitive.Separator
		ref={ref}
		className={cn("-mx-1 h-px bg-border", className)}
		{...props}
	/>
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
	React.ElementRef<typeof CommandPrimitive.Item>,
	React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
	<CommandPrimitive.Item
		ref={ref}
		className={cn(
			"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
			className,
		)}
		{...props}
	/>
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
	className,
	...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
	return (
		<span
			className={cn(
				"ml-auto text-muted-foreground text-xs tracking-widest",
				className,
			)}
			{...props}
		/>
	)
}
CommandShortcut.displayName = "CommandShortcut"

export {
	Command,
	CommandDialog,
	CommandInput,
	CommandList,
	CommandEmpty,
	CommandGroup,
	CommandItem,
	CommandShortcut,
	CommandSeparator,
}

================
File: components/ui/Dialog.tsx
================
"use client"

import * as DialogPrimitive from "@radix-ui/react-dialog"
import * as React from "react"

import { cn } from "@utils/cn"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Overlay>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
	<DialogPrimitive.Overlay
		ref={ref}
		className={cn(
			"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80 data-[state=closed]:animate-out data-[state=open]:animate-in",
			className,
		)}
		{...props}
	/>
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
	<DialogPortal>
		<DialogOverlay />
		<DialogPrimitive.Content
			ref={ref}
			className={cn(
				"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed top-[50%] left-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=closed]:animate-out data-[state=open]:animate-in sm:rounded-lg",
				className,
			)}
			{...props}
		>
			{children}
			{/* <DialogPrimitive.Close className="absolute top-4 right-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"> */}
			{/* 	<X /> */}
			{/* 	<span className="sr-only">Close</span> */}
			{/* </DialogPrimitive.Close> */}
		</DialogPrimitive.Content>
	</DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			"flex flex-col space-y-1.5 text-center sm:text-left",
			className,
		)}
		{...props}
	/>
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
			className,
		)}
		{...props}
	/>
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Title>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
	<DialogPrimitive.Title
		ref={ref}
		className={cn(
			"font-semibold text-lg leading-none tracking-tight",
			className,
		)}
		{...props}
	/>
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Description>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
	<DialogPrimitive.Description
		ref={ref}
		className={cn("text-muted-foreground text-sm", className)}
		{...props}
	/>
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
	Dialog,
	DialogPortal,
	DialogOverlay,
	DialogTrigger,
	DialogClose,
	DialogContent,
	DialogHeader,
	DialogFooter,
	DialogTitle,
	DialogDescription,
}

================
File: components/ui/Drawer.tsx
================
"use client";

import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@utils/cn";

const Drawer = ({
	shouldScaleBackground = true,
	...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
	<DrawerPrimitive.Root
		shouldScaleBackground={shouldScaleBackground}
		{...props}
	/>
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
	React.ElementRef<typeof DrawerPrimitive.Overlay>,
	React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
	<DrawerPrimitive.Overlay
		ref={ref}
		className={cn("fixed inset-0 z-50 bg-black/90", className)}
		{...props}
	/>
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
	React.ElementRef<typeof DrawerPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
	<DrawerPortal>
		<DrawerOverlay />
		<DrawerPrimitive.Content
			ref={ref}
			className={cn(
				"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
				className,
			)}
			{...props}
		>
			<div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
			{children}
		</DrawerPrimitive.Content>
	</DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			"grid gap-1.5 p-4 text-center sm:text-left",
			className,
		)}
		{...props}
	/>
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn("mt-auto flex flex-col gap-2 p-4", className)}
		{...props}
	/>
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
	React.ElementRef<typeof DrawerPrimitive.Title>,
	React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
	<DrawerPrimitive.Title
		ref={ref}
		className={cn(
			"font-semibold text-lg leading-none tracking-tight",
			className,
		)}
		{...props}
	/>
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
	React.ElementRef<typeof DrawerPrimitive.Description>,
	React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
	<DrawerPrimitive.Description
		ref={ref}
		className={cn("text-muted-foreground text-sm", className)}
		{...props}
	/>
));
DrawerDescription.displayName =
	DrawerPrimitive.Description.displayName;

export {
	Drawer,
	DrawerPortal,
	DrawerOverlay,
	DrawerTrigger,
	DrawerClose,
	DrawerContent,
	DrawerHeader,
	DrawerFooter,
	DrawerTitle,
	DrawerDescription,
};

================
File: components/ui/DropdownMenu.tsx
================
/* stylelint-disable lint/style/useNamingConvention */
"use client";

import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import * as React from "react";

import { cn } from "@utils/cn";
import { Check, ChevronRight, GripHorizontal } from "lucide-react";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
	React.ComponentPropsWithoutRef<
		typeof DropdownMenuPrimitive.SubTrigger
	> & {
		inset?: boolean;
	}
>(({ className, inset, children, ...props }, ref) => (
	<DropdownMenuPrimitive.SubTrigger
		ref={ref}
		className={cn(
			"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
			inset && "pl-8",
			className,
		)}
		{...props}
	>
		{children}
		<ChevronRight className="ml-auto h-4 w-4" />
	</DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
	DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
	React.ComponentPropsWithoutRef<
		typeof DropdownMenuPrimitive.SubContent
	>
>(({ className, ...props }, ref) => (
	<DropdownMenuPrimitive.SubContent
		ref={ref}
		className={cn(
			"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=closed]:animate-out data-[state=open]:animate-in",
			className,
		)}
		{...props}
	/>
));
DropdownMenuSubContent.displayName =
	DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
	<DropdownMenuPrimitive.Portal>
		<DropdownMenuPrimitive.Content
			ref={ref}
			sideOffset={sideOffset}
			className={cn(
				"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
				"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 data-[state=closed]:animate-out data-[state=open]:animate-in",
				className,
			)}
			{...props}
		/>
	</DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName =
	DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.Item>,
	React.ComponentPropsWithoutRef<
		typeof DropdownMenuPrimitive.Item
	> & {
		inset?: boolean;
	}
>(({ className, inset, ...props }, ref) => (
	<DropdownMenuPrimitive.Item
		ref={ref}
		className={cn(
			"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
			inset && "pl-8",
			className,
		)}
		{...props}
	/>
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
	React.ComponentPropsWithoutRef<
		typeof DropdownMenuPrimitive.CheckboxItem
	>
>(({ className, children, checked, ...props }, ref) => (
	<DropdownMenuPrimitive.CheckboxItem
		ref={ref}
		className={cn(
			"relative flex cursor-default select-none items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
			className,
		)}
		checked={checked}
		{...props}
	>
		<span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
			<DropdownMenuPrimitive.ItemIndicator>
				<Check className="h-4 w-4" />
			</DropdownMenuPrimitive.ItemIndicator>
		</span>
		{children}
	</DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
	DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
	React.ComponentPropsWithoutRef<
		typeof DropdownMenuPrimitive.RadioItem
	>
>(({ className, children, ...props }, ref) => (
	<DropdownMenuPrimitive.RadioItem
		ref={ref}
		className={cn(
			"relative flex cursor-default select-none items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
			className,
		)}
		{...props}
	>
		<span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
			<DropdownMenuPrimitive.ItemIndicator>
				<GripHorizontal className="h-4 w-4 fill-current" />
			</DropdownMenuPrimitive.ItemIndicator>
		</span>
		{children}
	</DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName =
	DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.Label>,
	React.ComponentPropsWithoutRef<
		typeof DropdownMenuPrimitive.Label
	> & {
		inset?: boolean;
	}
>(({ className, inset, ...props }, ref) => (
	<DropdownMenuPrimitive.Label
		ref={ref}
		className={cn(
			"px-2 py-1.5 font-semibold text-sm",
			inset && "pl-8",
			className,
		)}
		{...props}
	/>
));
DropdownMenuLabel.displayName =
	DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
	React.ComponentPropsWithoutRef<
		typeof DropdownMenuPrimitive.Separator
	>
>(({ className, ...props }, ref) => (
	<DropdownMenuPrimitive.Separator
		ref={ref}
		className={cn("-mx-1 my-1 h-px bg-muted", className)}
		{...props}
	/>
));
DropdownMenuSeparator.displayName =
	DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
	className,
	...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
	return (
		<span
			className={cn(
				"ml-auto text-xs tracking-widest opacity-60",
				className,
			)}
			{...props}
		/>
	);
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
	DropdownMenu,
	DropdownMenuTrigger,
	DropdownMenuContent,
	DropdownMenuItem,
	DropdownMenuCheckboxItem,
	DropdownMenuRadioItem,
	DropdownMenuLabel,
	DropdownMenuSeparator,
	DropdownMenuShortcut,
	DropdownMenuGroup,
	DropdownMenuPortal,
	DropdownMenuSub,
	DropdownMenuSubContent,
	DropdownMenuSubTrigger,
	DropdownMenuRadioGroup,
};

================
File: components/ui/Icons.tsx
================
type IconProps = React.HTMLAttributes<SVGElement>;

export const Icons = {
	logo: (props: IconProps) => (
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" {...props}>
			<rect width="256" height="256" fill="none" />
			<line
				x1="208"
				y1="128"
				x2="128"
				y2="208"
				fill="none"
				stroke="currentColor"
				strokeLinecap="round"
				strokeLinejoin="round"
				strokeWidth="16"
			/>
			<line
				x1="192"
				y1="40"
				x2="40"
				y2="192"
				fill="none"
				stroke="currentColor"
				strokeLinecap="round"
				strokeLinejoin="round"
				strokeWidth="16"
			/>
		</svg>
	),
	twitter: (props: IconProps) => (
		<svg
			{...props}
			height="23"
			viewBox="0 0 1200 1227"
			width="23"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" />
		</svg>
	),
	gitHub: (props: IconProps) => (
		<svg viewBox="0 0 438.549 438.549" {...props}>
			<path
				fill="currentColor"
				d="M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
			/>
		</svg>
	),
	radix: (props: IconProps) => (
		<svg viewBox="0 0 25 25" fill="none" {...props}>
			<path
				d="M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z"
				fill="currentcolor"
			/>
			<path d="M12 0H4V8H12V0Z" fill="currentcolor" />
			<path
				d="M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z"
				fill="currentcolor"
			/>
		</svg>
	),
	aria: (props: IconProps) => (
		<svg role="img" viewBox="0 0 24 24" fill="currentColor" {...props}>
			<path d="M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z" />
		</svg>
	),
	npm: (props: IconProps) => (
		<svg viewBox="0 0 24 24" {...props}>
			<path
				d="M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z"
				fill="currentColor"
			/>
		</svg>
	),
	yarn: (props: IconProps) => (
		<svg viewBox="0 0 24 24" {...props}>
			<path
				d="M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z"
				fill="currentColor"
			/>
		</svg>
	),
	pnpm: (props: IconProps) => (
		<svg viewBox="0 0 24 24" {...props}>
			<path
				d="M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z"
				fill="currentColor"
			/>
		</svg>
	),
	react: (props: IconProps) => (
		<svg viewBox="0 0 24 24" {...props}>
			<path
				d="M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z"
				fill="currentColor"
			/>
		</svg>
	),
	tailwind: (props: IconProps) => (
		<svg viewBox="0 0 24 24" {...props}>
			<path
				d="M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z"
				fill="currentColor"
			/>
		</svg>
	),
	google: (props: IconProps) => (
		<svg role="img" viewBox="0 0 24 24" {...props}>
			<path
				fill="currentColor"
				d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
			/>
		</svg>
	),
	apple: (props: IconProps) => (
		<svg role="img" viewBox="0 0 24 24" {...props}>
			<path
				d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701"
				fill="currentColor"
			/>
		</svg>
	),
	paypal: (props: IconProps) => (
		<svg role="img" viewBox="0 0 24 24" {...props}>
			<path
				d="M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z"
				fill="currentColor"
			/>
		</svg>
	),
	spinner: (props: IconProps) => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			strokeWidth="2"
			strokeLinecap="round"
			strokeLinejoin="round"
			{...props}
		>
			<path d="M21 12a9 9 0 1 1-6.219-8.56" />
		</svg>
	),
};

================
File: components/ui/Input.tsx
================
import * as React from "react";

import { cn } from "@utils/cn";

export interface InputProps
	extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
	({ className, type, ...props }, ref) => {
		return (
			<input
				type={type}
				className={cn(
					"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:font-medium file:text-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
					className,
				)}
				ref={ref}
				{...props}
			/>
		);
	},
);
Input.displayName = "Input";

export { Input };

================
File: components/ui/Label.tsx
================
"use client";

import * as LabelPrimitive from "@radix-ui/react-label";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";

import { cn } from "@utils/cn";

const labelVariants = cva(
	"font-medium text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
	React.ElementRef<typeof LabelPrimitive.Root>,
	React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
		VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
	<LabelPrimitive.Root
		ref={ref}
		className={cn(labelVariants(), className)}
		{...props}
	/>
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };

================
File: components/ui/Logo.tsx
================
import Icon from "@app/icon.png"
import { ROUTE } from "@constants/route"
import Image from "next/image"
import Link from "next/link"

const Logo = () => {
	return (
		<>
			<Link href={ROUTE.HOME}>
				<Image src={Icon} alt="logo" width={50} height={50} />
			</Link>
		</>
	)
}

Logo.displayName = "Logo"

export { Logo }

================
File: components/ui/Progress.tsx
================
"use client"

import * as ProgressPrimitive from "@radix-ui/react-progress"
import * as React from "react"

import { cn } from "@utils/cn"

const Progress = React.forwardRef<
	React.ElementRef<typeof ProgressPrimitive.Root>,
	React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
	<ProgressPrimitive.Root
		ref={ref}
		className={cn(
			"relative h-4 w-full overflow-hidden rounded-full bg-secondary",
			className,
		)}
		{...props}
	>
		<ProgressPrimitive.Indicator
			className="h-full w-full flex-1 bg-primary transition-all"
			style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
		/>
	</ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: components/ui/Select.tsx
================
"use client"

import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"
import * as React from "react"

import { cn } from "@utils/cn"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
	React.ElementRef<typeof SelectPrimitive.Trigger>,
	React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
	<SelectPrimitive.Trigger
		ref={ref}
		className={cn(
			"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
			className,
		)}
		{...props}
	>
		{children}
		<SelectPrimitive.Icon asChild>
			<ChevronDown className="h-4 w-4 opacity-50" />
		</SelectPrimitive.Icon>
	</SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
	React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
	React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
	<SelectPrimitive.ScrollUpButton
		ref={ref}
		className={cn(
			"flex cursor-default items-center justify-center py-1",
			className,
		)}
		{...props}
	>
		<ChevronUp className="h-4 w-4" />
	</SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
	React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
	React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
	<SelectPrimitive.ScrollDownButton
		ref={ref}
		className={cn(
			"flex cursor-default items-center justify-center py-1",
			className,
		)}
		{...props}
	>
		<ChevronDown className="h-4 w-4" />
	</SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
	SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
	React.ElementRef<typeof SelectPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
	<SelectPrimitive.Portal>
		<SelectPrimitive.Content
			ref={ref}
			className={cn(
				"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=closed]:animate-out data-[state=open]:animate-in",
				position === "popper" &&
					"data-[side=left]:-translate-x-1 data-[side=top]:-translate-y-1 data-[side=right]:translate-x-1 data-[side=bottom]:translate-y-1",
				className,
			)}
			position={position}
			{...props}
		>
			<SelectScrollUpButton />
			<SelectPrimitive.Viewport
				className={cn(
					"p-1",
					position === "popper" &&
						"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
				)}
			>
				{children}
			</SelectPrimitive.Viewport>
			<SelectScrollDownButton />
		</SelectPrimitive.Content>
	</SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
	React.ElementRef<typeof SelectPrimitive.Label>,
	React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
	<SelectPrimitive.Label
		ref={ref}
		className={cn("py-1.5 pr-2 pl-8 font-semibold text-sm", className)}
		{...props}
	/>
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
	React.ElementRef<typeof SelectPrimitive.Item>,
	React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
	<SelectPrimitive.Item
		ref={ref}
		className={cn(
			"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
			className,
		)}
		{...props}
	>
		<span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
			<SelectPrimitive.ItemIndicator>
				<Check className="h-4 w-4" />
			</SelectPrimitive.ItemIndicator>
		</span>

		<SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
	</SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
	React.ElementRef<typeof SelectPrimitive.Separator>,
	React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
	<SelectPrimitive.Separator
		ref={ref}
		className={cn("-mx-1 my-1 h-px bg-muted", className)}
		{...props}
	/>
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
	Select,
	SelectGroup,
	SelectValue,
	SelectTrigger,
	SelectContent,
	SelectLabel,
	SelectItem,
	SelectSeparator,
	SelectScrollUpButton,
	SelectScrollDownButton,
}

================
File: components/ui/Separator.tsx
================
"use client"

import * as SeparatorPrimitive from "@radix-ui/react-separator"
import * as React from "react"

import { cn } from "@utils/cn"

const Separator = React.forwardRef<
	React.ElementRef<typeof SeparatorPrimitive.Root>,
	React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
	(
		{ className, orientation = "horizontal", decorative = true, ...props },
		ref,
	) => (
		<SeparatorPrimitive.Root
			ref={ref}
			decorative={decorative}
			orientation={orientation}
			className={cn(
				"shrink-0 bg-border",
				orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
				className,
			)}
			{...props}
		/>
	),
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/Sheet.tsx
================
"use client";

import * as SheetPrimitive from "@radix-ui/react-dialog";
import { type VariantProps, cva } from "class-variance-authority";
import { X } from "lucide-react";
import * as React from "react";

import { cn } from "@utils/cn";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
	React.ElementRef<typeof SheetPrimitive.Overlay>,
	React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
	<SheetPrimitive.Overlay
		className={cn(
			"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80 data-[state=closed]:animate-out data-[state=open]:animate-in",
			className,
		)}
		{...props}
		ref={ref}
	/>
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const SHEET_VARIANTS = cva(
	"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:animate-out data-[state=open]:animate-in data-[state=closed]:duration-300 data-[state=open]:duration-500",
	{
		variants: {
			side: {
				top: "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 border-b",
				bottom:
					"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 border-t",
				left: "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
				right:
					"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
			},
		},
		defaultVariants: {
			side: "right",
		},
	},
);

interface SheetContentProps
	extends React.ComponentPropsWithoutRef<
			typeof SheetPrimitive.Content
		>,
		VariantProps<typeof SHEET_VARIANTS> {}

const SheetContent = React.forwardRef<
	React.ElementRef<typeof SheetPrimitive.Content>,
	SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
	<SheetPortal>
		<SheetOverlay />
		<SheetPrimitive.Content
			ref={ref}
			className={cn(SHEET_VARIANTS({ side }), className)}
			{...props}
		>
			<SheetPrimitive.Close className="absolute top-4 right-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
				<X />
				<span className="sr-only">Close</span>
			</SheetPrimitive.Close>
			{children}
		</SheetPrimitive.Content>
	</SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			"flex flex-col space-y-2 text-center sm:text-left",
			className,
		)}
		{...props}
	/>
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
			className,
		)}
		{...props}
	/>
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
	React.ElementRef<typeof SheetPrimitive.Title>,
	React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
	<SheetPrimitive.Title
		ref={ref}
		className={cn("font-semibold text-foreground text-lg", className)}
		{...props}
	/>
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
	React.ElementRef<typeof SheetPrimitive.Description>,
	React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
	<SheetPrimitive.Description
		ref={ref}
		className={cn("text-muted-foreground text-sm", className)}
		{...props}
	/>
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
	Sheet,
	SheetPortal,
	SheetOverlay,
	SheetTrigger,
	SheetClose,
	SheetContent,
	SheetHeader,
	SheetFooter,
	SheetTitle,
	SheetDescription,
};

================
File: components/ui/Skeleton.tsx
================
import { cn } from "@utils/cn"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/Tabs.tsx
================
"use client";

import * as TabsPrimitive from "@radix-ui/react-tabs";
import * as React from "react";

import { cn } from "@utils/cn";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.List>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.List
		ref={ref}
		className={cn(
			"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
			className,
		)}
		{...props}
	/>
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.Trigger>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.Trigger
		ref={ref}
		className={cn(
			"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 font-medium text-sm ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
			className,
		)}
		{...props}
	/>
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.Content
		ref={ref}
		className={cn(
			"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-ring focus-visible:ring-offset-2",
			className,
		)}
		{...props}
	/>
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };

================
File: components/ui/Textarea.tsx
================
import * as React from "react"

import { cn } from "@utils/cn"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/Toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@utils/cn"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-3",
        sm: "h-8 px-2",
        lg: "h-10 px-3",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/Tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@utils/cn"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: constants/color.ts
================
export const DARK_BACKGROUND_ITEM = "rgb(23,23,23)";
export const LIGHT_BACKGROUND_ITEM = "white";

================
File: constants/dot-env.ts
================
export const SUPABASE = {
	URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
	ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
};

================
File: constants/route.ts
================
import type { Route } from "next"

export type RouteProps = {
	HOME: Route
	SIGN_IN: Route
	SIGN_UP: Route
	SEARCH: Route
	ACTIVITY: Route
	SAVED_POSTS: Route
	SETTINGS: Route
}

export const ROUTE: RouteProps = {
	HOME: "/" as Route,
	SIGN_IN: "/sign-in" as Route,
	SIGN_UP: "/sign-up" as Route,
	SEARCH: "/search" as Route,
	ACTIVITY: "/activity" as Route,
	SAVED_POSTS: "/saved_posts" as Route,
	SETTINGS: "/settings" as Route,
}

================
File: hooks/auth/useSignIn.ts
================
"use server"

import { useSupabaseServer } from "@hooks/supabase/server"
import { prisma } from "@prisma/createClient"

type signInProps = {
	email: string
	password: string
}

export const useSignIn = async ({ email, password }: signInProps) => {
	const supabase = useSupabaseServer()
	const {
		data: { user, session },
		error,
	} = await supabase.auth.signInWithPassword({ email, password })

	let foundUser = null
	if (error) {
		foundUser = await prisma.appUser.findUnique({
			where: { email },
		})

		const {
			name: errorName,
			message: errorMessage,
			status: errorStatus,
		} = error
		return { errorName, errorMessage, errorStatus, foundUser }
	}

	return { user, session }
}

================
File: hooks/auth/useSignOut.ts
================
"use server"

import { useSupabaseServer } from "@hooks/supabase/server"

export const signOut = async () => {
	const supabase = useSupabaseServer()
	await supabase.auth.signOut()
}

================
File: hooks/auth/useSignUp.ts
================
"use server"

type signUpProps = {
	email: string
	password: string
	firstName: string
	lastName: string
	userName: string
}

export const useSignUp = async ({
	email,
	password,
	firstName,
	lastName,
	userName,
}: signUpProps) => {
	// const {
	// 	data: { user, session },
	// 	error,
	// } = await supabase.auth.signUp({
	// 	email,
	// 	password,
	// 	options: {
	// 		data: {
	// 			userName: userName,
	// 			fullName: `${firstName} ${lastName}`,
	// 			password: password, // for development only
	// 		},
	// 	},
	// })
	// return { user, session, error }
}

================
File: hooks/form/useDebounce.ts
================
export const useDebounce = (
	func: (...args: string[]) => void,
	wait: number,
) => {
	let timeout: NodeJS.Timeout
	return function executedFunction(...args: string[]) {
		const later = () => {
			clearTimeout(timeout)
			func(...args)
		}
		clearTimeout(timeout)
		timeout = setTimeout(later, wait)
	}
}

================
File: prisma/schema/dbml/schema.dbml
================
//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table SavedPost {
  id String [pk]
  userId String [not null]
  postId String [not null]
  isDeleted Boolean [default: false]
  createdAt DateTime [not null]
}

Table PostReaction {
  id Int [pk, increment]
  userId String [not null]
  postId String [not null]
  isDeleted Boolean [default: false]
  createdAt DateTime [not null]
  updatedAt DateTime
  notifications Notification [not null]
  post Post [not null]
  user AppUser

  indexes {
    (userId, postId) [unique]
  }
}

Table CommentReaction {
  id Int [pk, increment]
  userId String [not null]
  commentId String [not null]
  isDeleted Boolean [default: false]
  createdAt DateTime [not null]
  updatedAt DateTime
  comment Comment [not null]
  notifications Notification [not null]

  indexes {
    (userId, commentId) [unique]
  }
}

Table AppUser {
  id String [pk]
  email String [unique, not null]
  fullName String [unique, not null]
  userName String [unique, not null]
  password String [not null]
  avatarUrl String [unique]
  bio String
  isActive Boolean [default: false]
  privacyMode PrivacyMode [default: 'PUBLIC']
  createdAt DateTime [not null]
  updatedAt DateTime
  isDeleted Boolean [default: false]
  blockedUsers Block [not null]
  blockingUsers Block [not null]
  followedUsers Follow [not null]
  followers Follow [not null]
  receivedNotifications Notification [not null]
  sentNotifications Notification [not null]
  postsByAvatarUrl Post [not null]
  postReactions PostReaction [not null]
  sharesReceived Share [not null]
  sharesSent Share [not null]
  tagsTagged Tag [not null]
  tagsTaggedBy Tag [not null]
}

Table Post {
  id String [pk]
  userId String [not null]
  userName String
  userAvatarUrl String
  visibility PostVisibility [not null, default: 'PUBLIC']
  content String [not null]
  createdAt DateTime [not null]
  updatedAt DateTime
  isDeleted Boolean [default: false]
  attachments Attachment [not null]
  comments Comment [not null]
  notifications Notification [not null]
  appUserByAvatarUrl AppUser
  postReactions PostReaction [not null]
  shares Share [not null]
  tags Tag [not null]
}

Table Attachment {
  id Int [pk, increment]
  postId String [not null]
  commentId String [not null]
  storageUrl String [not null]
  soundDuration String
  attachmentType AttachmentType
  format AttachmentFormat
  isDeleted Boolean [default: false]
  contentType ContentType
  createdAt DateTime [not null]
  comment Comment [not null]
  post Post [not null]
}

Table Comment {
  id String [pk]
  parentId String [not null]
  postId String [not null]
  degree Int [not null, default: 0]
  content String [not null]
  userId String [not null]
  userName String
  userAvatarUrl String
  createdAt DateTime [not null]
  updatedAt DateTime
  isDeleted Boolean [default: false]
  attachments Attachment [not null]
  parentComment Comment
  replies Comment [not null]
  post Post [not null]
  commentReactions CommentReaction [not null]
  notifications Notification [not null]
  shares Share [not null]
  tags Tag [not null]
}

Table Follow {
  id Int [pk, increment]
  followerId String [not null]
  followeeId String [not null]
  requestStatus FollowStatus [not null, default: 'PENDING']
  followedAt DateTime
  acceptedAt DateTime [not null]
  followee AppUser [not null]
  follower AppUser [not null]
  Notification Notification [not null]

  indexes {
    (followerId, followeeId) [unique]
  }
}

Table Block {
  id Int [pk, increment]
  blockerId String [not null]
  blockedId String [not null]
  createdAt DateTime
  updatedAt DateTime [not null]
  blocked AppUser [not null]
  blocker AppUser [not null]

  indexes {
    (blockerId, blockedId) [unique]
  }
}

Table Tag {
  id Int [pk, increment]
  taggedId String [not null]
  taggerId String [not null]
  postId String [not null]
  createdAt DateTime [not null]
  commentId String
  postReactionId Int
  commentReactionId Int
  notifications Notification [not null]
  Comment Comment
  post Post [not null]
  tagged AppUser [not null]
  tagger AppUser [not null]

  indexes {
    (taggerId, taggedId, postId) [unique]
  }
}

Table Notification {
  id Int [pk, increment]
  senderId String [not null, note: 'The user who send the notification. Could be tagger, commenter, follower, reactioner']
  senderUserName String
  senderAvatarUrl String
  receiverId String [not null, note: 'The user who receive the notification']
  followId Int [note: 'Add id of relevants for future needs?']
  postId String
  commentId String
  postReactionId Int
  commentReactionId Int
  tagId Int
  notificationType NotificationType
  createdAt DateTime [not null]
  isRead Boolean [default: false]
  receiver AppUser
  sender AppUser
  Comment Comment
  Post Post
  PostReaction PostReaction
  Follow Follow
  Tag Tag
  CommentReaction CommentReaction

  indexes {
    (senderId, receiverId, notificationType) [unique]
  }
}

Table Share {
  id Int [pk, increment]
  senderId String
  receiverId String
  postId String [not null]
  commentId String [not null]
  contentType ContentType
  createdAt DateTime [not null]
  isDeleted Boolean [default: false]
  comment Comment [not null]
  post Post [not null]
  receiver AppUser
  sender AppUser
}

Enum AttachmentFormat {
  AUDIO
  IMAGE
  VIDEO
}

Enum AttachmentType {
  POST
  COMMENT
}

Enum ContentType {
  POST
  COMMENT
}

Enum FollowStatus {
  PENDING
  ACCEPTED
  REJECTED
}

Enum NotificationType {
  FOLLOW
  FOLLOW_SUGGEST
  TAG
  COMMENT
  REACT
}

Enum PostActionType {
  SAVE
  IGNORE
}

Enum PostVisibility {
  PUBLIC
  FOLLOWERS_ONLY
  MENTIONED_ONLY
  FANS_ONLY
  ME_ONLY
}

Enum PrivacyMode {
  PUBLIC
  PRIVATE
}

Enum ReactionType {
  LOVE
  HATE
}

Enum ReportType {
  SPAM
  HARASSMENT
  INAPPROPRIATE
}

Ref: PostReaction.postId > Post.id [delete: Cascade]

Ref: PostReaction.userId > AppUser.id [delete: Cascade]

Ref: CommentReaction.commentId > Comment.id [delete: Cascade]

Ref: Post.userAvatarUrl > AppUser.avatarUrl [delete: No Action]

Ref: Attachment.commentId > Comment.id [delete: Cascade]

Ref: Attachment.postId > Post.id [delete: Cascade]

Ref: Comment.parentId - Comment.id [delete: Cascade]

Ref: Comment.postId > Post.id [delete: Cascade]

Ref: Follow.followeeId > AppUser.id [delete: Cascade]

Ref: Follow.followerId > AppUser.id [delete: Cascade]

Ref: Block.blockedId > AppUser.id [delete: Cascade]

Ref: Block.blockerId > AppUser.id [delete: Cascade]

Ref: Tag.commentId > Comment.id

Ref: Tag.postId > Post.id [delete: Cascade]

Ref: Tag.taggedId > AppUser.id [delete: Cascade]

Ref: Tag.taggerId > AppUser.id [delete: Cascade]

Ref: Notification.receiverId > AppUser.id [delete: Cascade]

Ref: Notification.senderId > AppUser.id [delete: Cascade]

Ref: Notification.commentId > Comment.id

Ref: Notification.postId > Post.id

Ref: Notification.postReactionId > PostReaction.id

Ref: Notification.followId > Follow.id

Ref: Notification.tagId > Tag.id

Ref: Notification.commentReactionId > CommentReaction.id

Ref: Share.commentId > Comment.id [delete: Cascade]

Ref: Share.postId > Post.id [delete: Cascade]

Ref: Share.receiverId > AppUser.id [delete: Cascade]

Ref: Share.senderId > AppUser.id [delete: Cascade]

================
File: prisma/schema/schema.prisma
================
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  fullName         String            @unique
  userName         String            @unique
  password         String
  avatarUrl        String?           @unique
  bio              String?
  isActive         Boolean           @default(false)
  privacyMode      Privacy           @default(PUBLIC)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?
  isDeleted        Boolean           @default(false)
  followee         Follow[]          @relation("UserFollowees")
  follower         Follow[]          @relation("UserFollowers")
  posts            Post[]
  comments         Comment[]
  postReactions    PostReaction[]
  commentReactions CommentReaction[]
  tags             Tag[]
  attachments      Attachment[]
  notifications    Notification[]
  postActions      PostAction[]
}

model Follow {
  id            Int                 @id @default(autoincrement())
  followerId    String
  followeeId    String
  requestStatus FollowRequestStatus @default(PENDING)
  followedAt    DateTime            @default(now())
  acceptedAt    DateTime?
  follower      User                @relation("UserFollowers", fields: [followerId], references: [id])
  followee      User                @relation("UserFollowees", fields: [followeeId], references: [id])

  @@unique([followerId, followeeId])
}

model Post {
  id            Int            @id @default(autoincrement())
  userId        String
  userName      String?
  userAvatarUrl String?
  visibility    PostVisibility @default(PUBLIC)
  content       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
  isDeleted     Boolean        @default(false)
  user          User           @relation(fields: [userId], references: [id])
  comments      Comment[]
  reactions     PostReaction[]
  tags          Tag[]
  attachments   Attachment[]
  Notification  Notification[]
  PostAction    PostAction[]
}

model Comment {
  id              Int               @id @default(autoincrement())
  userId          String
  postId          Int
  degree          Int               @default(0)
  parentId        Int?
  content         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  isDeleted       Boolean           @default(false)
  user            User              @relation(fields: [userId], references: [id])
  post            Post              @relation(fields: [postId], references: [id])
  parent          Comment?          @relation("ParentComment", fields: [parentId], references: [id])
  replies         Comment[]         @relation("ParentComment")
  CommentReaction CommentReaction[]
  Tag             Tag[]
  Attachment      Attachment[]
  Notification    Notification[]
  PostAction      PostAction[]
}

model PostReaction {
  id           Int            @id @default(autoincrement())
  userId       String
  postId       Int
  reaction     ReactionType
  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?
  user         User           @relation(fields: [userId], references: [id])
  post         Post           @relation(fields: [postId], references: [id])
  Notification Notification[]

  @@unique([userId, postId])
}

model CommentReaction {
  id           Int            @id @default(autoincrement())
  userId       String
  commentId    Int
  reaction     ReactionType
  contentType  ContentType
  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?
  user         User           @relation(fields: [userId], references: [id])
  comment      Comment        @relation(fields: [commentId], references: [id])
  Notification Notification[]

  @@unique([userId, commentId])
}

model Tag {
  id           Int            @id @default(autoincrement())
  taggerId     String
  taggedId     String
  postId       Int?
  commentId    Int?
  contentType  ContentType
  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  tagged       User           @relation(fields: [taggedId], references: [id])
  post         Post?          @relation(fields: [postId], references: [id])
  comment      Comment?       @relation(fields: [commentId], references: [id])
  Notification Notification[]
}

model Attachment {
  id             Int         @id @default(autoincrement())
  postId         Int?
  commentId      Int?
  storageUrl     String
  soundDuration  String?
  attachmentType ContentType
  format         MediaFormat
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  post           Post?       @relation(fields: [postId], references: [id])
  comment        Comment?    @relation(fields: [commentId], references: [id])
  User           User?       @relation(fields: [userId], references: [id])
  userId         String?
}

model Notification {
  id                Int              @id @default(autoincrement())
  senderId          String
  receiverId        String
  postId            Int?
  commentId         Int?
  postReactionId    Int?
  commentReactionId Int?
  tagId             Int?
  notificationType  NotificationType
  createdAt         DateTime         @default(now())
  isRead            Boolean          @default(false)
  receiver          User             @relation(fields: [receiverId], references: [id])
  post              Post?            @relation(fields: [postId], references: [id])
  comment           Comment?         @relation(fields: [commentId], references: [id])
  postReaction      PostReaction?    @relation(fields: [postReactionId], references: [id])
  commentReaction   CommentReaction? @relation(fields: [commentReactionId], references: [id])
  tag               Tag?             @relation(fields: [tagId], references: [id])
}

model PostAction {
  id         Int            @id @default(autoincrement())
  userId     String
  receiverId String
  actionType PostActionType
  postId     Int?
  commentId  Int?
  createdAt  DateTime       @default(now())
  receiver   User           @relation(fields: [receiverId], references: [id])
  post       Post?          @relation(fields: [postId], references: [id])
  comment    Comment?       @relation(fields: [commentId], references: [id])
}

enum ReactionType {
  LOVE
  HATE
}

enum Privacy {
  PUBLIC
  PRIVATE
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PostVisibility {
  PUBLIC
  FOLLOWERS_ONLY
  MENTIONED_ONLY
  FANS_ONLY
  ME_ONLY
}

enum ContentType {
  POST
  COMMENT
}

enum MediaFormat {
  AUDIO
  IMAGE
  VIDEO
}

enum NotificationType {
  FOLLOW
  FOLLOW_SUGGEST
  TAG
  COMMENT
  REACT
}

enum PostActionType {
  SAVE
  IGNORE
}

enum AttachmentFormat {
  AUDIO
  IMAGE
  VIDEO
}

enum AttachmentType {
  POST
  COMMENT
}

enum FollowStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PrivacyMode {
  PUBLIC
  PRIVATE
}

enum ReportType {
  SPAM
  HARASSMENT
  INAPPROPRIATE
}

================
File: prisma/createClient.ts
================
import { PrismaClient } from "@prisma/client"
import prismaRandom from "prisma-extension-random"

const globalForPrisma = globalThis as unknown as {
	prisma: PrismaClient
}

// Checks if globalForPrisma.prisma already exists
// If it does, it reuses that instance
// Otherwise, it creates a new instance of PrismaClient
export const prisma =
	globalForPrisma.prisma || new PrismaClient().$extends(prismaRandom())

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma

================
File: providers/index.tsx
================
export * from "./ThemeProvider"
export * from "./QueryProvider"

================
File: providers/QueryProvider.tsx
================
"use client"
import { getQueryClient } from "@queries/getQueryClient"
import { QueryClientProvider } from "@tanstack/react-query"
import { ReactQueryDevtools } from "@tanstack/react-query-devtools"
import type React from "react"

/*
 * NEVER DO THIS:
 * const queryClient = new QueryClient()
 *
 * Creating the queryClient at the file root level makes the cache shared
 * between ALL requests and means ALL data gets passed to ALL users.
 * Besides being bad for performance, this also leaks any sensitive data.
 */

export default function QueryProvider({
	children,
}: { children: React.ReactNode }) {
	// const { toast } = useToast()
	// // -> Instead do this, which ensures each request has its own cache:
	// const [queryClient] = React.useState(
	// 	() =>
	// 		new QueryClient({
	// 			queryCache: new QueryCache({
	// 				onError: (error, query) => {
	// 					// 🎉 only show error toasts if we already have data in the cache
	// 					// which indicates a failed background update
	// 					if (query.state.data !== undefined) {
	// 						toast({
	// 							title: "Something went wrong",
	// 							description: error.message,
	// 						})
	// 					}
	// 				},
	// 			}),
	// 			defaultOptions: {
	// 				queries: {
	// 					/*
	// 					 * With SSR, we usually want to set some default staleTime
	// 					 * above 0 to avoid refetching immediately on the client
	// 					 */
	// 					staleTime: 1000 * 20, // how long it stays "fresh" -> marked as "stale" -> refetch
	// 				},
	// 				dehydrate: {
	// 					// include pending queries in dehydration
	// 					shouldDehydrateQuery: (query) =>
	// 						defaultShouldDehydrateQuery(query) ||
	// 						query.state.status === "pending",
	// 				},
	// 			},
	// 		}),
	// )

	/*
	 * Reference the same queryClient in both atomWithQuery and other parts of the app.
	 * Without this, our useQueryClient hook will return a different QueryClient object.
	 */
	// const HydrateAtoms = ({ children }: { children: React.ReactNode }) => {
	// 	useHydrateAtoms([[queryClientAtom, queryClient]])
	// 	return children
	// }

	const queryClient = getQueryClient()

	return (
		<QueryClientProvider client={queryClient}>
			{/* <ResetProvider> */}
			{/* <HydrateAtoms>{children}</HydrateAtoms> */}
			{children}
			{/* <DevTools /> */}
			<ReactQueryDevtools initialIsOpen={true} />
			{/* </ResetProvider> */}
		</QueryClientProvider>
	)
}

================
File: providers/StoreProvider.tsx
================
"use client"

import { Provider, createStore } from "jotai"
import { DevTools } from "jotai-devtools"
import "jotai-devtools/styles.css"

export default function StoreProvider({
	children,
}: { children: React.ReactNode }) {
	const userStore = createStore()

	return (
		<>
			<Provider store={userStore}>
				<DevTools store={userStore} />
				{children}
			</Provider>
		</>
	)
}

================
File: providers/ThemeProvider.tsx
================
import { ThemeProvider as NextThemesProvider } from "next-themes";
import type { ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({
	children,
	...props
}: ThemeProviderProps) {
	return (
		<NextThemesProvider {...props}>{children}</NextThemesProvider>
	);
}

================
File: queries/client/appUser.ts
================
import type { SupabaseUser } from "@models/supabaseUser"
import { useQuery, useQueryClient } from "@tanstack/react-query"
import { queryKey } from "@utils/queryKeyFactory"

export const useQueryAppUser = () =>
	useQuery({
		queryKey: [queryKey.user.selectMain()],
		// queryFn: async () => useSupabaseUser(),
	})

export const useQueryDataAppUser = (): SupabaseUser | undefined => {
	const queryClient = useQueryClient()
	return queryClient.getQueryData([queryKey.user.selectMain()])
}

================
File: queries/client/comment.ts
================
"use client"

import {
	getAllChildComments,
	getAllCommentsByPost,
	getComment,
	getCommentCounts,
	getCommentReaction,
} from "@queries/server/comment"
import { useQuery } from "@tanstack/react-query"
import { queryKey } from "@utils/queryKeyFactory"

export const useQueryComment = ({ commentId }: { commentId: string }) =>
	useQuery({
		queryKey: queryKey.comment.selectId(commentId),
		queryFn: async () => getComment(commentId),
		enabled: !!commentId,
	})

export const useQueryChildComments = ({ parentId }: { parentId: string }) =>
	useQuery({
		queryKey: queryKey.comment.selectIdChild(parentId),
		queryFn: async () => getAllChildComments(parentId),
		enabled: !!parentId,
	})

export const useQueryCommentCounts = ({
	commentId,
	parentId,
}: { commentId: string; parentId: string }) =>
	useQuery({
		queryKey: queryKey.comment.selectCountByComment({
			commentId: commentId,
			parentId: parentId,
		}),
		queryFn: async () => getCommentCounts({ commentId, parentId }),
		enabled: !!commentId && !!parentId,
	})

export const useQueryCommentReaction = ({
	userId,
	commentId,
}: { userId?: string; commentId: string }) =>
	useQuery({
		queryKey: queryKey.comment.selectReactionByUser({
			userId: userId,
			commentId: commentId,
		}),
		queryFn: async () => getCommentReaction({ userId, commentId }),
		enabled: !!userId && !!commentId,
	})

export const useQueryAllComments = ({ postId }: { postId: string }) =>
	useQuery({
		queryKey: queryKey.comment.all,
		queryFn: async () => getAllCommentsByPost({ postId }),
	})

================
File: queries/client/noti.ts
================
import { getAllNotifications, getNotification } from "@queries/server/noti"
import { useQuery } from "@tanstack/react-query"
import { queryKey } from "@utils/queryKeyFactory"

export const useQueryNotification = ({
	notificationId,
}: { notificationId?: number | null }) =>
	useQuery({
		// biome-ignore lint/style/noNonNullAssertion: <explanation>
		queryKey: queryKey.noti.selectId(notificationId!),
		// biome-ignore lint/style/noNonNullAssertion: <explanation>
		queryFn: async () => getNotification({ notificationId: notificationId! }),
		enabled: !!notificationId,
	})

export const useQueryAllNotifications = ({
	// Id of the user who receives the notifications
	userId,
}: { userId?: string }) =>
	useQuery({
		queryKey: queryKey.noti.all,
		// biome-ignore lint/style/noNonNullAssertion: <explanation>
		queryFn: async () => getAllNotifications({ receiverId: userId! }),
		enabled: !!userId,
	})

================
File: queries/client/post.ts
================
import type { Post } from "@prisma/client"
import { getAllPosts, getPost, getPostCounts } from "@queries/server/post"
import { getPostReaction } from "@queries/server/postReaction"
import { useQuery } from "@tanstack/react-query"
import { queryKey } from "@utils/queryKeyFactory"

export const useQueryPostCounts = ({ postId }: { postId: string }) =>
	useQuery({
		queryKey: queryKey.post.selectCount(postId),
		queryFn: async () => getPostCounts({ postId }),
		enabled: !!postId,
	})

export const useQueryPostReaction = ({
	userId,
	postId,
}: { userId?: string; postId: string }) =>
	useQuery({
		// biome-ignore lint/style/noNonNullAssertion: <explanation>
		queryKey: queryKey.post.selectReactionByUser({ userId: userId!, postId }),
		queryFn: async () => getPostReaction({ userId, postId }),
		enabled: !!userId && !!postId,
	})

export const useQueryPost = ({ postId }: { postId: string }) =>
	useQuery({
		queryKey: queryKey.post.selectId(postId),
		queryFn: async () => getPost(postId),
		enabled: !!postId,
	})

export const useQueryAllPosts = () =>
	useQuery<Post[]>({
		queryKey: queryKey.post.all,
		queryFn: async () => getAllPosts(),
		staleTime: Number.POSITIVE_INFINITY,
	})

================
File: queries/client/remove.ts
================
import type { QueryClient } from "@tanstack/react-query"

// Clears all connected caches
export const useQueryClientClearCache = (queryClient: QueryClient) =>
	queryClient.clear()

// Remove queries from the cache based on their query keys
export const useQueryClientRemoveQueries = (
	queryClient: QueryClient,
	key: string,
) => queryClient.removeQueries({ queryKey: [key], exact: true })

================
File: queries/server/comment.ts
================
"use server"

import type { CommentReaction } from "@prisma/client"
import { prisma } from "@prisma/createClient"

export type CreateCommentProps = {
	id: string
	postId: string
	userId: string
	userName: string | null
	userAvatarUrl: string | null
	content: string
	degree?: number
	parentId?: string
}

export const createComment = async ({
	id,
	postId,
	parentId,
	userId,
	userName,
	userAvatarUrl,
	content,
	degree,
}: CreateCommentProps) => {
	try {
		if (parentId) {
			if (degree)
				return await prisma.comment.create({
					data: {
						id: id,
						userId: userId,
						userName: userName,
						userAvatarUrl: userAvatarUrl,
						postId: postId,
						content: content,
						parentId: parentId,
						degree: degree,
					},
				})
			return await prisma.comment.create({
				data: {
					id: id,
					userId: userId,
					userName: userName,
					userAvatarUrl: userAvatarUrl,
					postId: postId,
					parentId: parentId,
					content: content,
				},
			})
		}
		console.error("<< Comment >> Missing parentId when creating")
	} catch (error) {
		console.error("<< Comment >> Error creating:\n", error)
	}
}

export const getComment = async (commentId: string) => {
	try {
		const comment = await prisma.comment.findUnique({
			where: {
				id: commentId,
			},
		})
		return comment
	} catch (error) {
		console.error(`<< Comment >> Error getting comment ${commentId}: `, error)
	}
}

export const getAllChildComments = async (parentId: string) => {
	try {
		const childComments = await prisma.comment.findMany({
			where: {
				parentId: parentId,
			},
		})
		return childComments
	} catch (error) {
		console.error("<< Comment >> Error getting all child comments: ", error)
	}
}

export const getCommentCounts = async ({
	commentId,
	parentId,
}: { commentId: string; parentId: string }) => {
	try {
		const noReactions = await prisma.commentReaction.count({
			where: { commentId: commentId },
		})

		let noComments = 0
		if (commentId !== parentId)
			noComments = await prisma.comment.count({
				where: { parentId: commentId },
			})

		const noShares = await prisma.share.count({
			where: { commentId: commentId },
		})

		return {
			noReactions: noReactions || 0,
			noComments: noComments || 0,
			noShares: noShares || 0,
		}
	} catch (error) {
		console.error("<< Comment >> Error fetching comment counts:", error)
		return {
			noReactions: 0,
			noComments: 0,
			noShares: 0,
		}
	}
}

export const getCommentReaction = async ({
	userId,
	commentId,
}: { userId?: string; commentId: string }) => {
	try {
		if (userId) {
			const commentReaction = await prisma.commentReaction.findFirst({
				where: { userId, commentId },
			})
			return commentReaction
		}
		console.error("<< Comment >> Missing userId when getting comment reaction")
	} catch (error) {
		console.error("<< Comment >> Error fetching comment reaction: ", error)
	}
}

export const createCommentReaction = async ({
	userId,
	commentId,
}: { userId?: string; commentId: string }) => {
	try {
		if (userId) {
			const existingReaction = await getCommentReaction({ userId, commentId })

			if (existingReaction) {
				// If the user has already reacted to the post, delete the reaction
				await deleteCommentReaction({ userId, commentId })
			} else {
				// If the user has not reacted to the post
				const newCommentReaction = await prisma.commentReaction.create({
					data: { userId: userId, commentId },
				})
				return newCommentReaction
			}
		}
		console.log("<< Comment >> Missing userId when creating reaction")
	} catch (error) {
		console.error("<< Comment >> Error creating reaction: ", error)
	}
}

export const deleteCommentReaction = async ({
	userId,
	commentId,
}: { userId: string; commentId: string }) => {
	try {
		if (userId) {
			const existingReaction = await getCommentReaction({ userId, commentId })

			if (existingReaction) {
				const deletedCommentReaction: CommentReaction =
					await prisma.commentReaction.delete({
						where: {
							id: existingReaction.id,
						},
					})
				console.log("<< Comment >> Deleted reaction: ", deletedCommentReaction)
			} else {
				console.log("<< Comment >> No existing reaction found to delete")
			}
		} else {
			console.log("<< Comment >> User ID not found")
		}
	} catch (error) {
		console.error("<< Comment >> Error deleting: ", error)
		throw error
	}
}

export const getAllCommentsByPost = async ({ postId }: { postId: string }) => {
	try {
		const postComments = await prisma.comment.findMany({
			where: {
				postId: postId,
			},
		})
		return postComments
	} catch (error) {
		console.error("[POST_COMMENT] Error: ", error)
	}
}

================
File: queries/server/follow.ts
================
"use server"

import { prisma } from "@prisma/createClient"

/*
 * When A follow B, the request must be accepted by B.
 * Public profile can be viewed by anyone.
 * Private profile can only be viewed by (accepted) followers.
 */

export type CreateFollowProps = {
	followerId: string | null // User who follows
	followeeId: string | null // User who is followed
}

export const createFollow = async ({
	followerId,
	followeeId,
}: CreateFollowProps) => {
	try {
		if (followerId && followeeId) {
			// Get the followee's privacy mode
			const followee = await prisma.appUser.findUnique({
				where: { id: followeeId },
				select: { privacyMode: true },
			})

			if (!followee) {
				console.log("[FOLLOW] Followee not found")
				return
			}

			// Determine the request status based on the followee's privacy mode
			const requestStatus =
				followee.privacyMode === "PRIVATE" ? "PENDING" : "ACCEPTED"

			// Create the follow record with the appropriate request status
			const newFollow = await prisma.follow.create({
				data: {
					followerId: followerId,
					followeeId: followeeId,
					requestStatus: requestStatus,
				},
			})

			return newFollow
		}
		console.log("[FOLLOW] Missing followerId or followeeId when creating")
	} catch (error) {
		console.error("[FOLLOW] Error when creating: ", error)
	}
}

// Delete follow
export const deleteFollow = async ({
	followerId,
	followeeId,
}: CreateFollowProps) => {
	try {
		if (followerId && followeeId) {
			const deletedFollow = await prisma.follow.deleteMany({
				where: {
					followerId: followerId,
					followeeId: followeeId,
				},
			})
			return deletedFollow
		}
	} catch (error) {
		console.log(
			"[FOLLOW] Missing followerId or followeeId when deleting",
			error,
		)
	}
}

// Check if the follow relationship exists
export const checkIsFollowing = async ({
	followerId,
	followeeId,
}: CreateFollowProps) => {
	try {
		if (followerId && followeeId) {
			const existingFollow = await prisma.follow.findFirst({
				where: {
					followerId: followerId,
					followeeId: followeeId,
				},
			})
			return existingFollow
		}
		console.log("[FOLLOW] Missing followerId or followeeId when finding")
	} catch (error) {
		console.error("[FOLLOW] Error when finding: ", error)
	}
}

type UserFollowerProps = {
	userId: string
}

// Get all user's followers
export const getAllFollowers = async ({ userId }: UserFollowerProps) => {
	try {
		const followers = await prisma.follow.findMany({
			where: {
				followeeId: userId,
			},
		})
		return followers
	} catch (error) {
		console.error("Error getting all user's followers", error)
	}
}

// Get the avatar URLs of the first three followers of a user
export const getFirstThreeFollowerAvatarUrls = async ({
	userId,
}: UserFollowerProps) => {
	try {
		const followers = await prisma.follow.findMany({
			where: {
				followeeId: userId,
			},
			select: {
				follower: {
					select: {
						fullName: true,
						avatarUrl: true,
					},
				},
			},
			take: 3,
		})
		return followers.map((follower) => ({
			name: follower?.follower?.fullName ?? "unknown",
			image: follower?.follower?.avatarUrl ?? "https://via.placeholder.com/150",
		}))
	} catch (error) {
		console.error("Error getting three user follower avatar URLs", error)
	}
}

// Count the number of followers a user has
export const countUserFollowers = async ({ userId }: UserFollowerProps) => {
	try {
		const count = await prisma.follow.count({ where: { followeeId: userId } })
		return count
	} catch (error) {
		console.error("Error counting user's followers", error)
	}
}

================
File: queries/server/noti.ts
================
"use server"

import type { $Enums } from "@prisma/client"
import { prisma } from "@prisma/createClient"

export type NotiType = "FOLLOW" | "COMMENT" | "REPLY" | "MENTION"

type NotiProps = {
	senderId?: string | null
	receiverId?: string | null
	notiType?: $Enums.NotificationType
}

export const createNotification = async ({
	senderId,
	receiverId,
	notiType,
}: NotiProps) => {
	try {
		if (senderId) {
			const sender = await prisma.appUser.findUnique({
				where: { id: senderId },
				select: {
					userName: true,
					avatarUrl: true,
				},
			})

			if (!sender) {
				throw new Error(
					`<< Noti >> Error getting userName and avatarUrl for senderId: ${senderId}.`,
				)
			}

			if (receiverId) {
				const noti = await prisma.notification.create({
					data: {
						senderId: senderId,
						receiverId: receiverId,
						notificationType: notiType,
						senderUserName: sender.userName,
						senderAvatarUrl: sender.avatarUrl,
					},
				})
				console.log("<< Noti >> Created: \n", noti)
			} else {
				console.error("<< Noti >> Missing receiverId when creating")
			}
		} else {
			console.error("<< Noti >> Missing senderId when creating")
		}
	} catch (error) {
		console.error("[NOTI] Error when creating notification: ", error)
	}
}

export const getNotification = async ({
	notificationId,
}: { notificationId: number }) => {
	try {
		if (notificationId) {
			console.log(`Getting notification with ID ${notificationId} ...`)
			const noti = await prisma.notification.findUnique({
				where: {
					id: notificationId,
				},
				include: {
					sender: {
						select: {
							userName: true,
							avatarUrl: true,
						},
					},
				},
			})
			if (noti) {
				console.log(
					`Got notification with ID ${notificationId}:\n${JSON.stringify(noti, null, 2)}`,
				)
				return noti
			}
			console.error(
				`<< Noti >> Notification with ID ${notificationId} not found`,
			)
		} else {
			console.error("<< Noti >> Missing notificationId when getting")
		}
	} catch (error) {
		console.error("[NOTI] Error getting notification: ", error)
	}
}

export const getAllNotifications = async ({
	receiverId,
}: { receiverId: string }) => {
	try {
		if (receiverId) {
			console.log(`Getting all notifications for user ${receiverId} ...`)
			const notis = await prisma.notification.findMany({
				where: {
					receiverId: receiverId,
				},
				include: {
					sender: {
						select: {
							userName: true,
							avatarUrl: true,
						},
					},
				},
			})
			console.log(`Got all notifications for user ${receiverId}:\n${notis}`)
			return notis
		}
		console.error("<< Noti >> Missing receiverId when getting")
	} catch (error) {
		console.error("[NOTI] Error getting all notification: ", error)
	}
}

================
File: queries/server/post.ts
================
"use server"

import type { $Enums } from "@prisma/client"
import { prisma } from "@prisma/createClient"

export type CreatePostProps = {
	id: string
	userId: string | null
	userName: string | null
	userAvatarUrl: string | null
	content: string
	visibility: $Enums.PostVisibility
	createdAt: Date
}

export const createPost = async ({
	id,
	userId,
	userName,
	userAvatarUrl,
	content,
	visibility,
}: CreatePostProps) => {
	try {
		if (userId) {
			const newPost = await prisma.post.create({
				data: {
					id: id,
					userId: userId,
					userName: userName,
					userAvatarUrl: userAvatarUrl,
					content: content,
					visibility: visibility,
				},
			})
			console.log("Created post: ", newPost)
			return newPost
		}
		console.log("[POST] Missing userId when creating post")
	} catch (error) {
		console.error("[POST] Error when creating: ", error)
	}
}

export const getPostCounts = async ({ postId }: { postId: string }) => {
	try {
		const noReactions = await prisma.postReaction.count({
			where: { postId: postId },
		})

		const noComments = await prisma.comment.count({
			where: { postId: postId },
		})

		const noShares = await prisma.share.count({
			where: { postId: postId },
		})

		return {
			noReactions: noReactions || 0,
			noComments: noComments || 0,
			noShares: noShares || 0,
		}
	} catch (error) {
		console.error("Error fetching post counts:", error)
		return {
			noReactions: 0,
			noComments: 0,
			noShares: 0,
		}
	}
}

export const getAllPosts = async () => {
	const posts = await prisma.post.findMany({
		orderBy: {
			createdAt: "desc",
		},
	})
	return posts
}

export const getPost = async (postId: string) => {
	try {
		const post = await prisma.post.findUnique({
			where: {
				id: postId,
			},
		})
		return post
	} catch (error) {
		console.error(`<< Post >> Error getting post ${postId}: `, error)
	}
}

export const getAllUserPosts = async (userId: string) => {
	try {
		const posts = await prisma.post.findMany({
			where: { userId: userId },
		})
		console.log(`<< Post >> Got all posts of user ${userId}:\n`, posts)
		return posts
	} catch (error) {
		console.error(`<< Post >> Error getting posts of user ${userId}:\n`, error)
	}
}

================
File: queries/server/postReaction.ts
================
"use server"

import type { PostReaction } from "@prisma/client"
import { prisma } from "@prisma/createClient"

export type PostReactionProps = {
	userId?: string
	postId: string
}

export const getPostReaction = async ({
	userId,
	postId,
}: PostReactionProps) => {
	return await prisma.postReaction.findFirst({
		where: { userId, postId },
	})
}

// CREATE a new post reaction or DELETE the existing one
export const createPostReaction = async ({
	userId,
	postId,
}: PostReactionProps) => {
	try {
		if (userId) {
			const existingReaction = await getPostReaction({ userId, postId })

			if (existingReaction) {
				// If the user has already reacted to the post, delete the reaction
				await deletePostReaction({ userId, postId })
			} else {
				// If the user has not reacted to the post
				const newPostReaction = await prisma.postReaction.create({
					data: { userId, postId },
				})
				return newPostReaction
			}
		} else {
			console.log("[POST_REACTION] User ID not found")
		}
	} catch (error) {
		console.error("[POST_REACTION] Error creating: ", error)
	}
}

// DELETE a post reaction
export const deletePostReaction = async ({
	userId,
	postId,
}: PostReactionProps) => {
	try {
		if (userId) {
			const existingReaction = await getPostReaction({ userId, postId })

			// If the user has already reacted to the post, delete the reaction
			if (existingReaction) {
				const deletedPostReaction: PostReaction =
					await prisma.postReaction.delete({
						where: {
							id: existingReaction.id,
						},
					})
				console.log("[POST_REACTION] Deleted: ", deletedPostReaction)
			} else {
				console.log("[POST_REACTION] No existing reaction found to delete")
			}
		} else {
			console.log("[POST_REACTION] User ID not found")
		}
	} catch (error) {
		console.error("[POST_REACTION] Error deleting: ", error)
		throw error // Rethrow the error to handle it in the component
	}
}

================
File: queries/server/report.ts
================
"use server"

// export const createReportedPost = async ({
// 	userId,
// 	postId,
// 	content,
// }: PostReportProps) => {
// 	try {
// 		const reportedPost = await prisma..create({
// 			data: { userId, postId, content },
// 		})
// 		console.log("[POST] Reported post:", reportedPost)
// 	} catch (error) {
// 		console.error("[POST] Error reporting:", error)
// 	}
// }

================
File: queries/server/saved.ts
================
"use server"

import type { PostSaveProps } from "@components/ui/post/PostDropdownMenu"
import { prisma } from "@prisma/createClient"
import { generateBase64uuid } from "@utils/uuid.helpers"

export const createSavedPost = async ({ userId, postId }: PostSaveProps) => {
	try {
		const savedPost = await prisma.savedPost.create({
			data: { id: generateBase64uuid(), userId, postId },
		})
		console.log("[POST] Saved post:", savedPost)
	} catch (error) {
		console.error("[POST] Error saving:", error)
	}
}

================
File: queries/server/user.ts
================
"use server"

import type { SearchResultProps } from "@components/ui/search/SearchList"
import { PrismaClient } from "@prisma/client"
import { prisma } from "@prisma/createClient"
import prismaRandom from "prisma-extension-random"

export const getViewingUserInfo = async (userName: string) => {
	try {
		const user = await prisma.appUser.findUnique({
			where: { userName: userName },
		})
		return user
	} catch (error) {
		console.error("[USER] Error when fetching: ", error)
	}
}

export const getRandomUserList = async (
	appUserId: string | null | undefined,
	no_users: number,
) => {
	try {
		if (appUserId !== null && appUserId !== undefined) {
			const randomUserList: SearchResultProps = await new PrismaClient()
				.$extends(prismaRandom())
				.appUser.findManyRandom(no_users, {
					where: {
						NOT: {
							id: appUserId,
						},
					},
					select: {
						userName: true,
						fullName: true,
						avatarUrl: true,
					},
				})
			console.log("<< User >> Got random user list: \n", randomUserList)
			return randomUserList
		}
		console.log("<< User >> Missing appUserId in getting random user list")
	} catch (error) {
		console.error("< User >> Error getting random user list: \n", error)
	}
}

================
File: queries/getQueryClient.ts
================
import {
	QueryClient,
	defaultShouldDehydrateQuery,
	isServer,
} from "@tanstack/react-query"

function createQueryClient() {
	return new QueryClient({
		defaultOptions: {
			queries: {
				staleTime: 60 * 1000,
			},
			dehydrate: {
				// include pending queries in dehydration
				shouldDehydrateQuery: (query) =>
					defaultShouldDehydrateQuery(query) ||
					query.state.status === "pending",
			},
		},
	})
}

let browserQueryClient: QueryClient | undefined = undefined

export function getQueryClient() {
	if (isServer) {
		// Server: always make a new query client
		return createQueryClient()
	}
	// Browser: make a new query client if we don't already have one
	// This is very important, so we don't re-make a new client if React
	// suspends during the initial render. This may not be needed if we
	// have a suspense boundary BELOW the creation of the query client
	if (!browserQueryClient) browserQueryClient = createQueryClient()
	return browserQueryClient
}

================
File: styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@layer base {
	:root {
		--background: 0 0% 100%;
		--foreground: 240 10% 3.9%;
		--card: 0 0% 100%;
		--card-foreground: 240 10% 3.9%;
		--popover: 0 0% 100%;
		--popover-foreground: 240 10% 3.9%;
		--primary: 240 5.9% 10%;
		--primary-foreground: 0 0% 98%;
		--secondary: 240 4.8% 95.9%;
		--secondary-foreground: 240 5.9% 10%;
		--muted: 240 4.8% 95.9%;
		--muted-foreground: 240 3.8% 46.1%;
		--accent: 240 4.8% 95.9%;
		--accent-foreground: 240 5.9% 10%;
		--destructive: 0 84.2% 60.2%;
		--destructive-foreground: 0 0% 98%;
		--border: 240 5.9% 90%;
		--input: 240 5.9% 90%;
		--ring: 240 5.9% 10%;
		--radius: 0.5rem;
		--chart-1: 12 76% 61%;
		--chart-2: 173 58% 39%;
		--chart-3: 197 37% 24%;
		--chart-4: 43 74% 66%;
		--chart-5: 27 87% 67%;
	}

	.dark {
		--background: 240 10% 3.9%;
		--foreground: 0 0% 98%;
		--card: 240 10% 3.9%;
		--card-foreground: 0 0% 98%;
		--popover: 240 10% 3.9%;
		--popover-foreground: 0 0% 98%;
		--primary: 0 0% 98%;
		--primary-foreground: 240 5.9% 10%;
		--secondary: 240 3.7% 15.9%;
		--secondary-foreground: 0 0% 98%;
		--muted: 240 3.7% 15.9%;
		--muted-foreground: 240 5% 64.9%;
		--accent: 240 3.7% 15.9%;
		--accent-foreground: 0 0% 98%;
		--destructive: 0 62.8% 30.6%;
		--destructive-foreground: 0 0% 98%;
		--border: 240 3.7% 15.9%;
		--input: 240 3.7% 15.9%;
		--ring: 240 4.9% 83.9%;
		--chart-1: 220 70% 50%;
		--chart-2: 160 60% 45%;
		--chart-3: 30 80% 55%;
		--chart-4: 280 65% 60%;
		--chart-5: 340 75% 55%;

		/* CUSTOM */
		--background-item: 0 0% 9%;
	}
}

/* COMMON COLORS */
.dark-common {
	background-color: rgb(10, 10, 10);
	color: white;
}

.light-common {
	background-color: white;
	color: black;
}

/* HEIGHT */
.h-screen-auto {
	min-height: 100vh;
	overflow: auto;
	height: auto;
}

/* TEXT */
.text.wrap-balance {
	text-wrap: balance;
}

.text-wrap-pretty {
	text-wrap: pretty;
}

/* FLEX */
.flex-col {
	display: flex;
	flex-direction: column;
}

.flex-center {
	display: flex;
	justify-content: center;
	align-items: center;
}

.flex-col-center {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
}

.flex-y-center {
	display: flex;
	align-items: center;
}

.flex-between {
	display: flex;
	align-items: center;
	justify-content: space-between;
}

.flex-around {
	display: flex;
	align-items: center;
	justify-content: space-around;
}

.flex-start {
	display: flex;
	justify-content: flex-start;
}

.flex-start-center {
	display: flex;
	justify-content: flex-start;
	align-items: center;
}

/* SCREENS */
.desktop-only {
	display: none;

	@media (min-width: 768px) {
		display: block;
	}
}

.mobile-only {
	display: block;

	@media (min-width: 768px) {
		display: none;
	}
}

================
File: utils/cn.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: utils/comment-tree.helpers.ts
================
import type { CommentWithChildren } from "@components/ui/comment"
import type { Comment as IComment } from "@prisma/client"

export const buildCommentTree = (comments: IComment[], rootId?: string) => {
	const commentMap: { [key: string]: CommentWithChildren } = {}
	const roots: CommentWithChildren[] = []

	// Initialize all comments in a map (for quick access)
	for (const comment of comments) {
		commentMap[comment.id] = { ...comment, children: [] }
	}

	if (rootId) {
		for (const comment of comments) {
			if (comment.parentId === rootId && comment.id !== comment.parentId) {
				// Initialize roots
				roots.push(commentMap[comment.id])
			} else {
				// and link children to their respective parents
				if (commentMap[comment.parentId]) {
					commentMap[comment.parentId].children?.push(commentMap[comment.id])
				}
			}
		}
	} else {
		for (const comment of comments) {
			if (comment.id === comment.parentId) {
				// Initialize roots
				roots.push(commentMap[comment.id])
			} else {
				// and link children to their respective parents
				if (commentMap[comment.parentId]) {
					commentMap[comment.parentId].children?.push(commentMap[comment.id])
				}
			}
		}
	}

	// Append children to their respective parents recursively
	// Traverses the tree & ensures that all nested comments are correctly added to their parents
	function addChildren(parent: CommentWithChildren) {
		// biome-ignore lint/style/noNonNullAssertion: <explanation>
		for (const child of parent.children!) {
			// biome-ignore lint/style/noNonNullAssertion: <explanation>
			if (commentMap[child.id].children!.length! > 0) {
				addChildren(commentMap[child.id])
			}
		}
	}

	for (const root of roots) {
		addChildren(root)
	}

	return roots
}

export const extractFromCommentTreeById = (
	comments: CommentWithChildren[],
	extractId: string,
): CommentWithChildren[] => {
	for (const comment of comments) {
		if (comment.id === extractId) {
			return [comment]
		}
		if (comment.children && comment.children.length > 0) {
			const result = extractFromCommentTreeById(comment.children, extractId)
			if (result.length > 0) {
				return result
			}
		}
	}
	return []
}

================
File: utils/image.helpers.ts
================
export const avatarPlaceholder =
	"https://static.vecteezy.com/system/resources/thumbnails/025/337/669/small_2x/default-male-avatar-profile-icon-social-media-chatting-online-user-free-vector.jpg"

================
File: utils/navigation.helpers.tsx
================
"use client"

import { usePathname, useSearchParams } from "next/navigation"
import { useEffect } from "react"

export default function NavigationEvents() {
	const pathname = usePathname()
	const searchParams = useSearchParams()

	useEffect(() => {
		const url = `${pathname}?${searchParams}`
		console.log(url)
		// You can now use the current URL
		// ...
	}, [pathname, searchParams])
	return null
}

================
File: utils/page.helpers.ts
================
// Returns true if the page was reloaded, otherwise return false.
export const isPageReload = () => {
	const navigationEntries = performance.getEntriesByType(
		"navigation",
	) as PerformanceNavigationTiming[]
	if (navigationEntries.length > 0) {
		const navigationType = navigationEntries[0].type
		if (navigationType === "reload") {
			return true
		}
	}
	return false
}

================
File: utils/queryKeyFactory.ts
================
export const queryKey = {
	user: {
		all: ["users"] as const,
		// user - select
		selects: () => [...queryKey.user.all, "select"] as const,
		// user - select - main
		selectMain: () => [...queryKey.user.all, "select", "main"] as const,
		// user - select - { id }
		selectId: (id: string) => [...queryKey.user.selects(), id] as const,
	},
	post: {
		all: ["posts"] as const,
		// posts - insert
		insert: () => [...queryKey.post.all, "insert"] as const,
		// posts - select
		selects: () => [...queryKey.post.all, "select"] as const,
		// posts - select - { id }
		selectId: (id: string) => [...queryKey.post.selects(), id] as const,
		// posts - select - { id } - counts
		selectCount: (id: string) =>
			[...queryKey.post.selectId(id), "count"] as const,
		// posts - select - { id } - reactions - { userId }
		selectReactionByUser: ({
			userId,
			postId,
		}: { userId?: string; postId: string }) =>
			[...queryKey.post.selectId(postId), "reaction", userId] as const,
	},
	comment: {
		all: ["comments"] as const,
		// comments - insert
		insert: () => [...queryKey.comment.all, "insert"] as const,
		// comments - post - { postId }
		selectPost: (postId: string) =>
			[...queryKey.comment.all, "post", postId] as const,
		// comments - select
		selects: () => [...queryKey.comment.all, "select"] as const,
		// comments - select - { id }
		selectId: (id: string) => [...queryKey.comment.selects(), id] as const,
		// comments - select - { id } - child
		selectIdChild: (id: string) =>
			[...queryKey.comment.selects(), id, "child"] as const,
		// comments - select - { id } - count
		selectCountByPost: (id: string) =>
			[...queryKey.comment.selectId(id), "count"] as const,
		// comments - select - { id } - count - { parentId }
		selectCountByComment: ({
			commentId,
			parentId,
		}: { commentId: string; parentId: string }) =>
			[...queryKey.comment.selectId(commentId), "count", parentId] as const,
		// comments - select - { id } - reactions - { userId }
		selectReactionByUser: ({
			userId,
			commentId,
		}: { userId?: string; commentId: string }) =>
			[...queryKey.comment.selectId(commentId), "reaction", userId] as const,
	},
	noti: {
		all: ["notis"] as const,
		// notis - select
		selects: () => [...queryKey.noti.all, "select"] as const,
		// notis - select - { id }
		selectId: (id: number) => [...queryKey.noti.selects(), id] as const,
	},
}

================
File: utils/string.helpers.ts
================
export async function firstLetterToUpper(str: string) {
	return str
		.split(" ")
		.map((word) => word.charAt(0).toUpperCase() + word.slice(1))
		.join(" ")
}

================
File: utils/time.helpers.ts
================
export const getTimeDiffStatus = (createdAt: Date, updatedAt: Date | null) => {
	const currentTime = new Date()
	const givenTime = updatedAt ?? createdAt

	// Calculate the difference in milliseconds
	const differenceInMilliseconds = currentTime.getTime() - givenTime?.getTime()

	// Convert milliseconds to seconds, minutes, hours, days
	const seconds = Math.floor(differenceInMilliseconds / 1000)
	const minutes = Math.floor(differenceInMilliseconds / (1000 * 60))
	const hours = Math.floor(differenceInMilliseconds / (1000 * 60 * 60))
	const days = Math.floor(differenceInMilliseconds / (1000 * 60 * 60 * 24))

	let timeAgo = `${seconds} seconds ago`

	// If more than 1 minute
	if (seconds > 60) {
		timeAgo = `${minutes} minutes ago`
	}

	// If more than 1 hour
	if (minutes > 60) {
		timeAgo = `${hours} hours ago`
	}

	// If more than 1 day
	if (hours > 24) {
		timeAgo = `${days} days ago`
	}

	// If post in being saved on db (createdAt is currently null)
	if (!createdAt || seconds === 0) return "Just now"

	return timeAgo
}

================
File: utils/uuid.helpers.ts
================
import { v4 as uuidv4 } from "uuid"

export const generateBase64uuid = () => {
	const uuid = uuidv4()

	// Remove dashes from the UUID and convert it to a byte array
	const hex = uuid.replace(/-/g, "")

	const matches = hex.match(/.{1,2}/g)
	if (!matches) {
		throw new Error("Failed to match hex string")
	}

	const byteArray = new Uint8Array(
		matches.map((byte) => Number.parseInt(byte, 16)),
	)

	// Convert the byte array to a binary string
	let binaryString = ""
	for (let i = 0; i < byteArray.length; i++) {
		binaryString += String.fromCharCode(byteArray[i])
	}

	// Encode the binary string to Base64
	const base64 = btoa(binaryString)

	// Replace Base64 special characters (+, /) with URL-friendly ones (-, _)
	return base64.replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "") // Remove any padding
}

================
File: .gitignore
================
# dependencies
/node_modules
/.pnp
.yarn/install-state.gz

# testing
/coverage # next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# prisma generators
/generated

================
File: .stylelintrc.json
================
{ "extends": ["stylelint-config-standard"] }

================
File: biome.jsonc
================
{
	"$schema": "https://biomejs.dev/schemas/1.8.3/schema.json",
	"organizeImports": {
		"enabled": true
	},
	"formatter": {
		"enabled": true,
		"formatWithErrors": true,
		"indentStyle": "tab",
		"indentWidth": 2,
		"lineWidth": 80
	},
	"javascript": {
		"formatter": {
			"arrowParentheses": "always",
			"bracketSameLine": false,
			"bracketSpacing": true,
			"jsxQuoteStyle": "double",
			"quoteProperties": "asNeeded",
			"semicolons": "asNeeded",
			"trailingCommas": "all"
		}
	},
	"json": {
		"parser": {
			"allowComments": true
		},
		"formatter": {
			"trailingCommas": "none"
		}
	},
	"css": {
		"formatter": {
			"enabled": true
		},
		"linter": {
			"enabled": true
		}
	},
	"linter": {
		"enabled": true,
		"rules": {
			"recommended": true,
			"a11y": {
				"noAriaUnsupportedElements": "warn",
				"noBlankTarget": "off",
				"noSvgWithoutTitle": "off",
				"useAltText": "warn",
				"useAriaPropsForRole": "warn",
				"useValidAriaProps": "warn",
				"useValidAriaValues": "warn"
			},
			"correctness": {
				"noUnusedVariables": {
					"level": "warn",
					"fix": "none"
				},
				"noUnusedImports": {
					"level": "warn",
					"fix": "safe"
				}
			},
			"nursery": {
				// sort TailwindCSS classes
				"useSortedClasses": {
					"level": "info",
					"fix": "unsafe",
					"options": {
						"attributes": ["classList", "className", "cn"],
						"functions": ["clsx", "cva", "tw"]
					}
				}
			},
			"style": {
				"useNamingConvention": {
					"level": "off",
					"fix": "safe",
					"options": {
						"strictCase": true,
						"requireAscii": true,
						"enumMemberCase": "CONSTANT_CASE"
					}
				},
				"useConst": {
					"level": "warn",
					"fix": "unsafe"
				},
				"useTemplate": {
					"level": "warn",
					"fix": "safe"
				}
			}
		}
	}
}

================
File: components.json
================
{
	"$schema": "https://ui.shadcn.com/schema.json",
	"style": "default",
	"rsc": true,
	"tsx": true,
	"tailwind": {
		"config": "tailwind.config.ts",
		"css": "./styles/globals.css",
		"baseColor": "slate",
		"cssVariables": true,
		"prefix": ""
	},
	"aliases": {
		"components": "@components",
		"utils": "@utils/cn"
	}
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
	transpilePackages: ["lucide-react", "jotai-devtools"],
	experimental: {
		typedRoutes: true,
	},
	reactStrictMode: true,
	rewrites: async () => [
		{
			source: "/doc",
			destination: "/doc/index.html",
		},
	],
}

export default nextConfig

================
File: package.json
================
{
	"private": true,
	"scripts": {
		"postinstall": "prisma generate",
		"vercel-build": "prisma generate && prisma migrate deploy && next build",
		"dev": "next dev",
		"build": "next build",
		"start": "next start",
		"db:pull": "npx prisma db pull",
		"db:generate": "npx prisma generate",
		"db:push": "npx prisma generate && npx prisma db push",
		"db:migrate": "npx prisma generate && npx prisma migrate dev",
		"db:reset": "npx prisma migrate reset",
		"db:status": "npx prisma migrate status",
		"db:studio": "npx prisma studio"
	},
	"dependencies": {
		"@hookform/resolvers": "^3.9.0",
		"@prisma/client": "^5.19.1",
		"@radix-ui/react-alert-dialog": "^1.1.1",
		"@radix-ui/react-avatar": "^1.1.0",
		"@radix-ui/react-context-menu": "^2.2.1",
		"@radix-ui/react-dialog": "^1.1.1",
		"@radix-ui/react-dropdown-menu": "^2.1.1",
		"@radix-ui/react-label": "^2.1.0",
		"@radix-ui/react-menubar": "^1.1.1",
		"@radix-ui/react-navigation-menu": "^1.2.0",
		"@radix-ui/react-progress": "^1.1.0",
		"@radix-ui/react-select": "^2.1.1",
		"@radix-ui/react-separator": "^1.1.0",
		"@radix-ui/react-tabs": "^1.1.0",
		"@radix-ui/react-toast": "^1.2.1",
		"@radix-ui/react-toggle": "^1.1.0",
		"@radix-ui/react-toggle-group": "^1.1.0",
		"@radix-ui/react-tooltip": "^1.1.2",
		"@supabase/ssr": "latest",
		"@supabase/supabase-js": "latest",
		"@tanstack/query-core": "^5.52.0",
		"@tanstack/query-sync-storage-persister": "^5.52.0",
		"@tanstack/react-query": "^5.52.1",
		"@tanstack/react-query-devtools": "^5.52.1",
		"@tanstack/react-query-next-experimental": "^5.52.1",
		"@tanstack/react-query-persist-client": "^5.52.1",
		"@uidotdev/usehooks": "^2.4.1",
		"@vercel/analytics": "^1.3.1",
		"@vercel/speed-insights": "^1.0.12",
		"autoprefixer": "10.4.17",
		"class-variance-authority": "^0.7.0",
		"clsx": "^2.1.1",
		"cmdk": "^1.0.0",
		"date-fns": "^3.6.0",
		"embla-carousel-react": "^8.2.0",
		"framer-motion": "^11.3.30",
		"geist": "^1.3.1",
		"input-otp": "^1.2.4",
		"jotai": "^2.9.3",
		"jotai-devtools": "^0.10.1",
		"jotai-resetter": "^1.0.9",
		"jotai-tanstack-query": "^0.8.7",
		"lucide-react": "^0.418.0",
		"mysql2": "^3.11.4",
		"next": "^14.2.6",
		"next-themes": "^0.3.0",
		"nextjs-toploader": "^3.6.15",
		"pnpm": "^9.8.0",
		"prisma-extension-random": "^0.2.2",
		"react": "18.2.0",
		"react-day-picker": "8.10.1",
		"react-dom": "18.2.0",
		"react-hook-form": "^7.53.0",
		"react-resizable-panels": "^2.1.1",
		"recharts": "^2.12.7",
		"sharp": "^0.33.5",
		"sonner": "^1.5.0",
		"tailwind-merge": "^2.5.2",
		"use-dehydrated-state": "^0.1.0",
		"uuid": "^10.0.0",
		"vaul": "^0.9.1",
		"zod": "^3.23.8"
	},
	"devDependencies": {
		"@faker-js/faker": "^8.4.1",
		"@mermaid-js/mermaid-cli": "^10.9.1",
		"@radix-ui/react-slot": "^1.1.0",
		"@types/node": "^20.16.1",
		"@types/react": "^18.3.4",
		"@types/react-dom": "^18.3.0",
		"@types/uuid": "^10.0.0",
		"postcss": "^8.4.41",
		"prisma": "^5.19.1",
		"prisma-dbml-generator": "^0.12.0",
		"prisma-docs-generator": "^0.8.0",
		"prisma-erd-generator": "^1.11.2",
		"tailwindcss": "^3.4.10",
		"tailwindcss-animate": "^1.0.7",
		"typescript": "^5.5.4"
	}
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
<a href="https://demo-nextjs-with-supabase.vercel.app/">
  <img alt="Next.js and Supabase Starter Kit - the fastest way to build apps with Next.js and Supabase" src="https://demo-nextjs-with-supabase.vercel.app/opengraph-image.png">
  <h1 align="center">Next.js and Supabase Starter Kit</h1>
</a>

<p align="center">
 The fastest way to build apps with Next.js and Supabase
</p>

<p align="center">
  <a href="#features"><strong>Features</strong></a> ·
  <a href="#demo"><strong>Demo</strong></a> ·
  <a href="#deploy-to-vercel"><strong>Deploy to Vercel</strong></a> ·
  <a href="#clone-and-run-locally"><strong>Clone and run locally</strong></a> ·
  <a href="#feedback-and-issues"><strong>Feedback and issues</strong></a>
  <a href="#more-supabase-examples"><strong>More Examples</strong></a>
</p>
<br/>

## Features

- Works across the entire [Next.js](https://nextjs.org) stack
  - App Router
  - Pages Router
  - Middleware
  - Client
  - Server
  - It just works!
- supabase-ssr. A package to configure Supabase Auth to use cookies
- Styling with [Tailwind CSS](https://tailwindcss.com)
- Optional deployment with [Supabase Vercel Integration and Vercel deploy](#deploy-your-own)
  - Environment variables automatically assigned to Vercel project

## Demo

You can view a fully working demo at [demo-nextjs-with-supabase.vercel.app](https://demo-nextjs-with-supabase.vercel.app/).

## Deploy to Vercel

Vercel deployment will guide you through creating a Supabase account and project.

After installation of the Supabase integration, all relevant environment variables will be assigned to the project so the deployment is fully functioning.

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&project-name=nextjs-with-supabase&repository-name=nextjs-with-supabase&demo-title=nextjs-with-supabase&demo-description=This%20starter%20configures%20Supabase%20Auth%20to%20use%20cookies%2C%20making%20the%20user's%20session%20available%20throughout%20the%20entire%20Next.js%20app%20-%20Client%20Components%2C%20Server%20Components%2C%20Route%20Handlers%2C%20Server%20Actions%20and%20Middleware.&demo-url=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2F&external-id=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&demo-image=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2Fopengraph-image.png&integration-ids=oac_VqOgBHqhEoFTPzGkPd7L0iH6)

The above will also clone the Starter kit to your GitHub, you can clone that locally and develop locally.

If you wish to just develop locally and not deploy to Vercel, [follow the steps below](#clone-and-run-locally).

## Clone and run locally

1. You'll first need a Supabase project which can be made [via the Supabase dashboard](https://database.new)

2. Create a Next.js app using the Supabase Starter template npx command

   ```bash
   npx create-next-app -e with-supabase
   ```

3. Use `cd` to change into the app's directory

   ```bash
   cd name-of-new-app
   ```

4. Rename `.env.local.example` to `.env.local` and update the following:

   ```
   NEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]
   NEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]
   ```

   Both `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` can be found in [your Supabase project's API settings](https://app.supabase.com/project/_/settings/api)

5. You can now run the Next.js local development server:

   ```bash
   npm run dev
   ```

   The starter kit should now be running on [localhost:3000](http://localhost:3000/).

> Check out [the docs for Local Development](https://supabase.com/docs/guides/getting-started/local-development) to also run Supabase locally.

## Feedback and issues

Please file feedback and issues over on the [Supabase GitHub org](https://github.com/supabase/supabase/issues/new/choose).

## More Supabase examples

- [Next.js Subscription Payments Starter](https://github.com/vercel/nextjs-subscription-payments)
- [Cookie-based Auth and the Next.js 13 App Router (free course)](https://youtube.com/playlist?list=PL5S4mPUpp4OtMhpnp93EFSo42iQ40XjbF)
- [Supabase Auth and the Next.js App Router](https://github.com/supabase/supabase/tree/master/examples/auth/nextjs)

================
File: renovate.json
================
{
	"$schema": "https://docs.renovatebot.com/renovate-schema.json",
	"extends": ["config:recommended"]
}

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss"
import plugin from "tailwindcss/plugin"

const config = {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		// "./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		screens: {
			mobile_s: "320px",
			mobile_m: "375px",
			mobile_l: "425px",
			tablet: "768px",
			laptop: "1024px",
			laptop_l: "1440px",
			"2xl": "1400px",
		},
		container: {
			center: true,
			padding: "2rem",
		},
		extend: {
			colors: {
				border: "hsl(var(--border))",
				input: "hsl(var(--input))",
				ring: "hsl(var(--ring))",
				background: "hsl(var(--background))",
				foreground: "hsl(var(--foreground))",
				primary: {
					DEFAULT: "hsl(var(--primary))",
					foreground: "hsl(var(--primary-foreground))",
				},
				secondary: {
					DEFAULT: "hsl(var(--secondary))",
					foreground: "hsl(var(--secondary-foreground))",
				},
				destructive: {
					DEFAULT: "hsl(var(--destructive))",
					foreground: "hsl(var(--destructive-foreground))",
				},
				muted: {
					DEFAULT: "hsl(var(--muted))",
					foreground: "hsl(var(--muted-foreground))",
				},
				accent: {
					DEFAULT: "hsl(var(--accent))",
					foreground: "hsl(var(--accent-foreground))",
				},
				popover: {
					DEFAULT: "hsl(var(--popover))",
					foreground: "hsl(var(--popover-foreground))",
				},
				card: {
					DEFAULT: "hsl(var(--card))",
					foreground: "hsl(var(--card-foreground))",
				},
				"background-item": {
					DEFAULT: "hsl(var(--background-item))",
					foreground: "hsl(var(--foreground))",
				},
			},
			borderRadius: {
				lg: "var(--radius)",
				md: "calc(var(--radius) - 2px)",
				sm: "calc(var(--radius) - 4px)",
			},
			animation: {
				accordionDown: "accordionDown 0.2s ease-out",
				accordionUp: "accordionUp 0.2s ease-out",
				caretBlink: "caretBlink 1.25s ease-out infinite",
				bounceOnce: "bounceOnce 1s ease-out",
				flipWords: "flipWords 8s infinite",
				fillHeart: "fillHeart 1s forwards",
				unfillHeart: "unfillHeart 1s forwards",
			},
			keyframes: {
				accordionDown: {
					from: { height: "0" },
					to: { height: "var(--radix-accordion-content-height)" },
				},
				accordionUp: {
					from: { height: "var(--radix-accordion-content-height)" },
					to: { height: "0" },
				},
				caretBlink: {
					"0%,70%,100%": { opacity: "1" },
					"20%,50%": { opacity: "0" },
				},
				bounceOnce: {
					"20%, 50%, 80%, 100%": {
						transform: "translateY(0)",
					},
					"40%": {
						transform: "translateY(-30px)",
					},
					"60%": {
						transform: "translateY(-15px)",
					},
				},
				flipWords: {
					"10%": { transform: "translateY(-112%)" },
					"25%": { transform: "translateY(-100%)" },
					"35%": { transform: "translateY(-212%)" },
					"50%": { transform: "translateY(-200%)" },
					"60%": { transform: "translateY(-312%)" },
					"75%": { transform: "translateY(-300%)" },
					"85%": { transform: "translateY(-412%)" },
					"100%": { transform: "translateY(-400%)" },
				},
				fillHeart: {
					"0%": { fill: "rgb(9, 9, 11)" },
					"100%": { fill: "red" },
				},
				unfillHeart: {
					"0%": { fill: "red" },
					"100%": { fill: "rgb(9, 9, 11)" },
				},
			},
		},
	},
	plugins: [
		require("tailwindcss-animate"),
		plugin(({ addComponents, theme }) => {
			addComponents({
				".hidden md:block": {
					backgroundColor: theme("colors.white"),
					borderRadius: theme("borderRadius.lg"),
					padding: theme("spacing.6"),
					boxShadow: theme("boxShadow.xl"),
				},
			})
		}),
	],
} satisfies Config

export default config

================
File: tsconfig.json
================
{
	"compilerOptions": {
		"target": "es5",
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		"strict": true,
		"forceConsistentCasingInFileNames": true,
		"noEmit": true,
		"esModuleInterop": true,
		"module": "esnext",
		"moduleResolution": "bundler",
		"resolveJsonModule": true,
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true,
		"plugins": [
			{
				"name": "next"
			}
		],
		"paths": {
			"@app/*": ["./app/*"],
			"@assets/*": ["./assets/*"],
			"@styles/*": ["./styles/*"],
			"@components/*": ["./components/*"],
			"@constants/*": ["./constants/*"],
			"@utils/*": ["./utils/*"],
			"@models/*": ["./models/*"],
			"@services/*": ["./services/*"],
			"@providers/*": ["./providers/*"],
			"@hooks/*": ["./hooks/*"],
			"@schemas/*": ["./schemas/*"],
			"@prisma/*": ["./prisma/*"],
			"@supabase/*": ["./supabase/*"],
			"@stores/*": ["./stores/*"],
			"@queries/*": ["./queries/*"],
			"@atoms/*": ["./atoms/*"]
		}
	},
	"include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
	"exclude": ["node_modules", "node_modules/@radix-ui/**"]
}
