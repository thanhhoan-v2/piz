generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch", "prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AppUser {
  id                    String         @id @map("id") @db.Uuid
  email                 String         @unique @map("email")
  fullName              String         @unique @map("full_name")
  userName              String         @map("user_name")
  avatarUrl             String?        @map("avatar_url")
  bio                   String?        @map("bio")
  isActive              Boolean?       @default(false) @map("is_active")
  privacyMode           privacyMode?   @default(PUBLIC) @map("privacy_mode")
  createdAt             DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?      @map("updated_at") @db.Timestamptz(6)
  isDeleted             Boolean?       @default(false) @map("is_deleted")
  password              String         @map("password")
  comments              Comment[]
  followedUsers         Follow[]       @relation("Follow_followee_idToAppUser")
  followers             Follow[]       @relation("Follow_follower_idToAppUser")
  receivedNotifications Notification[] @relation("Notification_receiver_idToAppUser")
  sentNotifications     Notification[] @relation("Notification_sender_idToAppUser")
  posts                 Post[]
  reactions             Reaction[]

  @@map("app_user")
}

model Attachment {
  id             Int               @id @default(autoincrement()) @map("id")
  postId         Int               @map("post_id")
  commentId      Int               @map("comment_id")
  storageUrl     String            @map("storage_url")
  soundDuration  String?           @map("sound_duration")
  attachmentType attachmentType?   @map("attachment_type")
  format         attachmentFormat? @map("format")
  isDeleted      Boolean?          @default(false) @map("is_deleted")
  contentType    contentType?      @map("content_type")
  createdAt      DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  comment        Comment           @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post           Post              @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("attachment")
}

model Comment {
  id            Int            @id @default(autoincrement()) @map("id")
  userId        String?        @map("user_id") @db.Uuid
  postId        Int            @map("post_id")
  parentId      Int            @map("parent_id")
  content       String         @map("content")
  degree        Int?           @default(0) @map("degree")
  createdAt     DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?      @map("updated_at") @db.Timestamptz(6)
  isDeleted     Boolean?       @default(false) @map("is_deleted")
  attachments   Attachment[]
  parentComment Comment        @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies       Comment[]      @relation("CommentToComment")
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          AppUser?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notifications Notification[]
  reactions     Reaction[]

  @@map("comment")
}

model Follow {
  id            Int           @id @default(autoincrement()) @map("id")
  followerId    String?       @map("follower_id") @db.Uuid
  followeeId    String?       @map("followee_id") @db.Uuid
  requestStatus followStatus? @default(PENDING) @map("request_status")
  followedAt    DateTime?     @default(now()) @map("followed_at") @db.Timestamptz(6)
  acceptedAt    DateTime?     @map("accepted_at") @db.Timestamptz(6)
  followee      AppUser?      @relation("Follow_followee_idToAppUser", fields: [followeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  follower      AppUser?      @relation("Follow_follower_idToAppUser", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([followerId, followeeId])
  @@map("follow")
}

model Notification {
  id               Int               @id @default(autoincrement()) @map("id")
  senderId         String?           @map("sender_id") @db.Uuid
  receiverId       String?           @map("receiver_id") @db.Uuid
  postId           Int               @map("post_id")
  commentId        Int               @map("comment_id")
  reactionId       Int               @map("reaction_id")
  tagId            Int               @map("tag_id")
  notificationType notificationType? @map("notification_type")
  createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  isRead           Boolean?          @default(false) @map("is_read")
  comment          Comment           @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post             Post              @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reaction         Reaction          @relation(fields: [reactionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  receiver         AppUser?          @relation("Notification_receiver_idToAppUser", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender           AppUser?          @relation("Notification_sender_idToAppUser", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notification")
}

model Post {
  id            Int             @id @unique @default(autoincrement()) @map("id")
  userId        String          @map("user_id") @db.Uuid
  content       String          @map("content")
  noShares      Int?            @default(0) @map("no_shares")
  visibility    postVisibility? @default(PUBLIC) @map("visibility")
  createdAt     DateTime        @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?       @map("updated_at") @db.Timestamptz(6)
  isDeleted     Boolean?        @default(false) @map("is_deleted")
  userName      String          @default("") @map("user_name")
  userAvatarUrl String?         @map("user_avatar_url")
  attachments   Attachment[]
  comments      Comment[]
  notifications Notification[]
  user          AppUser         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reactions     Reaction[]

  @@map("post")
}

model Reaction {
  /// Reaction ID
  id           Int            @id @default(autoincrement()) @map("id")
  /// Person who reacted
  userId       String?        @map("user_id") @db.Uuid
  /// Reacted post
  postId       Int            @map("post_id")
  /// Reacted comment
  commentId    Int            @map("comment_id")
  /// Type of reaction
  reactionType reactionType?  @map("reaction_type")
  /// When it was created
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  notification Notification[]
  comment      Comment        @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         AppUser?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("reaction")
}
