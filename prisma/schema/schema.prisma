generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch", "prismaSchemaFolder"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  includeRelationFromFields = true
  theme                     = "neutral"
  output                    = "../../generated/ERD.svg"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../generated/docs"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AppUser {
  id          String       @id @db.Uuid
  email       String       @unique
  fullName    String       @unique
  userName    String       @unique
  password    String
  avatarUrl   String?      @unique
  bio         String?
  isActive    Boolean?     @default(false)
  privacyMode PrivacyMode? @default(PUBLIC)
  createdAt   DateTime     @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt   DateTime?    @db.Timestamptz(6)
  isDeleted   Boolean?     @default(false)

  blockedUsers          Block[]           @relation("blockBlockedIdToAppUser")
  blockingUsers         Block[]           @relation("blockBlockerIdToAppUser")
  comments              Comment[]
  followedUsers         Follow[]          @relation("followFolloweeIdToAppUser")
  followers             Follow[]          @relation("followFollowerIdToAppUser")
  receivedNotifications Notification[]    @relation("notificationReceiverIdToAppUser")
  sentNotifications     Notification[]    @relation("notificationSenderIdToAppUser")
  postsByAvatarUrl      Post[]            @relation("postUserAvatarUrlToAppUser")
  posts                 Post[]
  postsByUserName       Post[]            @relation("postUserNameToAppUser")
  postReactions         PostReaction[]
  reports               ReportUser[]      @relation("reportUserIdToAppUser")
  sharesReceived        Share[]           @relation("shareReceiverIdToAppUser")
  sharesSent            Share[]           @relation("shareSenderIdToAppUser")
  tagsTagged            Tag[]             @relation("tagTaggedIdToAppUser")
  tagsTaggedBy          Tag[]             @relation("tagTaggerIdToAppUser")
  CommentReaction       CommentReaction[]
}

model Attachment {
  id             Int               @id @default(autoincrement())
  postId         Int
  commentId      Int
  storageUrl     String
  soundDuration  String?
  attachmentType AttachmentType?
  format         AttachmentFormat?
  isDeleted      Boolean?          @default(false)
  contentType    ContentType?
  createdAt      DateTime          @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  comment        Comment           @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post           Post              @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Comment {
  id               Int               @id @default(autoincrement())
  userId           String?           @db.Uuid
  postId           Int
  degree           Int?              @default(0)
  parentId         Int?
  content          String
  createdAt        DateTime          @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt        DateTime?
  isDeleted        Boolean?          @default(false)
  attachments      Attachment[]
  parentComment    Comment?          @relation("commentToComment", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies          Comment[]         @relation("commentToComment")
  post             Post              @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             AppUser?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  commentReactions CommentReaction[]
  notifications    Notification[]
  shares           Share[]
  tags             Tag[]
}

model Follow {
  id            Int          @id @default(autoincrement())
  followerId    String       @db.Uuid
  followeeId    String       @db.Uuid
  requestStatus FollowStatus @default(PENDING)
  followedAt    DateTime?    @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  acceptedAt    DateTime     @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  followee      AppUser?     @relation("followFolloweeIdToAppUser", fields: [followeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  follower      AppUser?     @relation("followFollowerIdToAppUser", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([followerId, followeeId])
}

model Block {
  id        Int       @id @default(autoincrement())
  blockerId String    @db.Uuid
  blockedId String    @db.Uuid
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  blocker   AppUser   @relation("blockBlockerIdToAppUser", fields: [blockerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  blocked   AppUser   @relation("blockBlockedIdToAppUser", fields: [blockedId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([blockerId, blockedId])
}

model Tag {
  id                Int            @id @default(autoincrement())
  taggedId          String         @db.Uuid
  taggerId          String         @db.Uuid
  postId            Int
  createdAt         DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  post              Post           @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tagger            AppUser        @relation("tagTaggerIdToAppUser", fields: [taggerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tagged            AppUser        @relation("tagTaggedIdToAppUser", fields: [taggedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notifications     Notification[]
  Comment           Comment?       @relation(fields: [commentId], references: [id])
  commentId         Int?
  postReactionId    Int?
  commentReactionId Int?

  @@unique([taggerId, taggedId, postId])
}

model Notification {
  id                Int               @id @default(autoincrement())
  senderId          String?           @db.Uuid
  receiverId        String?           @db.Uuid
  postId            Int
  commentId         Int
  postReactionId    Int
  commentReactionId Int
  tagId             Int
  notificationType  NotificationType?
  createdAt         DateTime          @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  isRead            Boolean?          @default(false)
  comment           Comment           @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  commentReaction   CommentReaction   @relation(fields: [commentReactionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post              Post              @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  postReaction      PostReaction      @relation(fields: [postReactionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  receiver          AppUser?          @relation("notificationReceiverIdToAppUser", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender            AppUser?          @relation("notificationSenderIdToAppUser", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag               Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Post {
  id                 Int            @id @default(autoincrement())
  userId             String         @db.Uuid
  userName           String?
  userAvatarUrl      String?
  visibility         PostVisibility @default(PUBLIC)
  content            String
  createdAt          DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt          DateTime?
  isDeleted          Boolean?       @default(false)
  attachments        Attachment[]
  comments           Comment[]
  notifications      Notification[]
  appUserByAvatarUrl AppUser?       @relation("postUserAvatarUrlToAppUser", fields: [userAvatarUrl], references: [avatarUrl], onDelete: NoAction, onUpdate: NoAction)
  user               AppUser?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  appUserByUserName  AppUser?       @relation("postUserNameToAppUser", fields: [userName], references: [userName], onDelete: NoAction, onUpdate: NoAction)
  postReactions      PostReaction[]
  reports            ReportPost[]
  shares             Share[]
  tags               Tag[]
}

model Share {
  id          Int          @id @default(autoincrement())
  senderId    String?      @db.Uuid
  receiverId  String?      @db.Uuid
  postId      Int
  commentId   Int
  contentType ContentType?
  createdAt   DateTime     @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  isDeleted   Boolean?     @default(false)
  comment     Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post        Post         @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  receiver    AppUser?     @relation("shareReceiverIdToAppUser", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender      AppUser?     @relation("shareSenderIdToAppUser", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

//                                 ╭───────────╮
//                                 │ Reactions │
//                                 ╰───────────╯
model PostReaction {
  id            Int            @id @default(autoincrement())
  userId        String?        @db.Uuid
  postId        Int
  isDeleted     Boolean?       @default(false)
  createdAt     DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt     DateTime?
  notifications Notification[]
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          AppUser?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, postId], map: "uniquePostReaction")
}

model CommentReaction {
  id            Int            @id @default(autoincrement())
  userId        String?        @db.Uuid
  commentId     Int
  isDeleted     Boolean?       @default(false)
  createdAt     DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt     DateTime?
  notifications Notification[]
  comment       Comment        @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          AppUser?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, commentId], map: "uniqueCommentReaction")
}

//                               ╭──────────────╮
//                               │ Post Actions │
//                               ╰──────────────╯

model SavedPost {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  postId    Int
  isDeleted Boolean? @default(false)
  createdAt DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
}

/// Post report
model ReportPost {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  postId    Int
  content   String
  createdAt DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  post      Post     @relation(fields: [postId], references: [id])
}

/// User report
model ReportUser {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  content   String
  createdAt DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  appUser   AppUser? @relation("reportUserIdToAppUser", fields: [userId], references: [id])
}
