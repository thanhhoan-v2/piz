model AppUser {
  id                    String         @id @db.Uuid
  email                 String         @unique
  full_name             String         @unique
  user_name             String         @unique
  user_password         String
  avatar_url            String?
  bio                   String?
  is_active             Boolean?       @default(false)
  privacy_mode          privacy_mode?  @default(PUBLIC)
  created_at            DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?      @db.Timestamptz(6)
  is_deleted            Boolean?       @default(false)
  comments              Comment[]
  posts                 Post[]
  reactions             Reaction[]
  reports               Report[]
  receivedPostActions   PostAction[]   @relation("PostAction_receiver_idToAppUser")
  sentPostActions       PostAction[]   @relation("PostAction_user_idToAppUser")
  blockedUsers          Block[]        @relation("Block_blocked_idToAppUser")
  blockedByUsers        Block[]        @relation("Block_blocker_idToAppUser")
  followedUsers         Follow[]       @relation("Follow_followee_idToAppUser")
  followers             Follow[]       @relation("Follow_follower_idToAppUser")
  receivedNotifications Notification[] @relation("Notification_receiver_idToAppUser")
  sentNotifications     Notification[] @relation("Notification_sender_idToAppUser")
  receivedSharedPosts   SharedPost[]   @relation("SharedPost_receiver_idToAppUser")
  sentSharedPosts       SharedPost[]   @relation("SharedPost_sender_idToAppUser")
  taggedIn              Tag[]          @relation("Tag_tagged_idToAppUser")
  taggedBy              Tag[]          @relation("Tag_tagger_idToAppUser")
  postActions           PostAction[]

  @@map("app_user")
}

model Attachment {
  id              Int                @id @default(autoincrement())
  post_id         Int
  comment_id      Int
  storage_url     String
  sound_duration  String?
  attachment_type attachment_type?
  format          attachment_format?
  is_deleted      Boolean?           @default(false)
  content_type    content_type?
  created_at      DateTime?          @default(now()) @db.Timestamptz(6)
  comment         Comment            @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post            Post               @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("attachment")
}

model Block {
  id         Int       @id @default(autoincrement())
  blocker_id String?   @db.Uuid
  blocked_id String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  blocker    AppUser?  @relation("Block_blocker_idToAppUser", fields: [blocker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  blocked    AppUser?  @relation("Block_blocked_idToAppUser", fields: [blocked_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("block")
}

model Comment {
  id            Int            @id @default(autoincrement())
  user_id       String?        @db.Uuid
  post_id       Int
  parent_id     Int
  content       String
  degree        Int?           @default(0)
  created_at    DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?      @db.Timestamptz(6)
  is_deleted    Boolean?       @default(false)
  attachments   Attachment[]
  parentComment Comment        @relation("CommentToComment", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies       Comment[]      @relation("CommentToComment")
  post          Post           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          AppUser?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notifications Notification[]
  reactions     Reaction[]
  reports       Report[]
  tags          Tag[]

  @@map("comment")
}

model Follow {
  id             Int            @id @default(autoincrement())
  follower_id    String?        @db.Uuid
  followee_id    String?        @db.Uuid
  request_status follow_status? @default(PENDING)
  followed_at    DateTime?      @default(now()) @db.Timestamptz(6)
  accepted_at    DateTime?      @db.Timestamptz(6)
  follower       AppUser?       @relation("Follow_follower_idToAppUser", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  followee       AppUser?       @relation("Follow_followee_idToAppUser", fields: [followee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([follower_id, followee_id])
  @@map("follow")
}

model Notification {
  id                Int                @id @default(autoincrement())
  sender_id         String?            @db.Uuid
  receiver_id       String?            @db.Uuid
  post_id           Int
  comment_id        Int
  reaction_id       Int
  tag_id            Int
  notification_type notification_type?
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  is_read           Boolean?           @default(false)
  comment           Comment            @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post              Post               @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reaction          Reaction           @relation(fields: [reaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  receiver          AppUser?           @relation("Notification_receiver_idToAppUser", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender            AppUser?           @relation("Notification_sender_idToAppUser", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag               Tag                @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notification")
}

model Post {
  id            Int              @id @default(autoincrement())
  user_id       String?          @db.Uuid
  content       String
  no_shares     Int?             @default(0)
  visibility    post_visibility? @default(PUBLIC)
  created_at    DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?        @db.Timestamptz(6)
  is_deleted    Boolean?         @default(false)
  attachments   Attachment[]
  comments      Comment[]
  notifications Notification[]
  user          AppUser?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  postActions   PostAction[]
  reactions     Reaction[]
  reports       Report[]
  sharedPosts   SharedPost[]
  tags          Tag[]

  @@map("post")
}

model PostAction {
  id          Int               @id @default(autoincrement())
  user_id     String?           @db.Uuid
  receiver_id String?           @db.Uuid
  post_id     Int
  is_deleted  Boolean?          @default(false)
  action      post_action_type?
  post        Post              @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  receiver    AppUser?          @relation("PostAction_receiver_idToAppUser", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        AppUser?          @relation("PostAction_user_idToAppUser", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  AppUser     AppUser?          @relation(fields: [appUserId], references: [id])
  appUserId   String?           @db.Uuid

  @@map("post_action")
}

model Reaction {
  id            Int            @id @default(autoincrement())
  user_id       String?        @db.Uuid
  post_id       Int
  comment_id    Int
  reaction_type reaction_type?
  is_deleted    Boolean?       @default(false)
  content_type  content_type?
  created_at    DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?      @db.Timestamptz(6)
  notifications Notification[]
  comment       Comment        @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post          Post           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          AppUser?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, comment_id, content_type], map: "unique_comment_reaction")
  @@unique([user_id, post_id, content_type], map: "unique_post_reaction")
  @@map("reaction")
}

model Report {
  id           Int           @id @default(autoincrement())
  reporter_id  String?       @db.Uuid
  post_id      Int
  comment_id   Int
  report_type  report_type?
  content      String?
  content_type content_type?
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  comment      Comment       @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post         Post          @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reporter     AppUser?      @relation(fields: [reporter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("report")
}

model SharedPost {
  id          Int       @id @default(autoincrement())
  sender_id   String?   @db.Uuid
  receiver_id String?   @db.Uuid
  post_id     Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  is_deleted  Boolean?  @default(false)
  post        Post      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  receiver    AppUser?  @relation("SharedPost_receiver_idToAppUser", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender      AppUser?  @relation("SharedPost_sender_idToAppUser", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("shared_post")
}

model Tag {
  id            Int            @id @default(autoincrement())
  tagger_id     String?        @db.Uuid
  tagged_id     String?        @db.Uuid
  post_id       Int
  comment_id    Int
  content_type  content_type?
  is_deleted    Boolean?       @default(false)
  created_at    DateTime?      @default(now()) @db.Timestamptz(6)
  notifications Notification[]
  comment       Comment        @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post          Post           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tagged        AppUser?       @relation("Tag_tagged_idToAppUser", fields: [tagged_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tagger        AppUser?       @relation("Tag_tagger_idToAppUser", fields: [tagger_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("tag")
}
