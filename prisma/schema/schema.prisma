generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Comment {
  id              String            @id
  userId          String
  postId          String
  degree          Int               @default(0)
  parentId        String?
  content         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  isDeleted       Boolean           @default(false)
  Comment         Comment?          @relation("CommentToComment", fields: [parentId], references: [id])
  other_Comment   Comment[]         @relation("CommentToComment")
  Post            Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  CommentReaction CommentReaction[]
  Notification    Notification[]

  @@index([parentId], map: "Comment_parentId_fkey_unique")
}

model CommentReaction {
  id          Int          @id @default(autoincrement())
  userId      String
  commentId   String
  contentType ContentType?
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?
  Comment     Comment      @relation(fields: [commentId], references: [id])
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId], map: "CommentReaction_commentId_fkey_unique")
}

model Follow {
  id         Int       @id @default(autoincrement())
  followerId String
  followeeId String
  followedAt DateTime  @default(now())
  acceptedAt DateTime?

  @@unique([followerId, followeeId])
  @@index([followeeId], map: "Follow_followeeId_fkey_unique")
}

model Notification {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  senderId         String
  receiverId       String
  postId           String?
  commentId        String?
  notificationType NotificationType?
  isRead           Boolean           @default(false)
  isDeleted        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?
  Comment          Comment?          @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Post             Post?             @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
  id                       String         @id(map: "post_pkey")
  userId                   String
  userName                 String?
  userAvatarUrl            String?
  content                  String
  createdAt                DateTime       @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @db.Timestamp(6)
  isDeleted                Boolean        @default(false)
  postImageUrl             String?
  postVideoUrl             String?
  snippetId                String?
  Comment                  Comment[]
  Notification             Notification[]
  Snippet                  Snippet?       @relation(fields: [snippetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Post_userIdToUser   User           @relation("Post_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)
  User_Post_userNameToUser User?          @relation("Post_userNameToUser", fields: [userName], references: [userName], onDelete: Cascade)
  PostReaction             PostReaction[]
}

model PostReaction {
  id        Int       @id @default(autoincrement())
  userId    String
  postId    String
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, map: "PostReaction_postId_fkey_unique")
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId], map: "PostReaction_postId_fkey")
}

model User {
  id                       String            @id(map: "user_pkey")
  email                    String            @unique
  userName                 String?           @unique
  userAvatarUrl            String?
  bio                      String?
  isActive                 Boolean           @default(false)
  createdAt                DateTime          @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?         @db.Timestamp(6)
  isDeleted                Boolean           @default(false)
  Comment                  Comment[]
  CommentReaction          CommentReaction[]
  Post_Post_userIdToUser   Post[]            @relation("Post_userIdToUser")
  Post_Post_userNameToUser Post[]            @relation("Post_userNameToUser")
  PostReaction             PostReaction[]
  Snippet                  Snippet[]
}

model Snippet {
  id         String   @id
  created_at DateTime @default(now()) @db.Timestamptz(6)
  value      String?
  lang       String?  @default("\"plain\"")
  userId     String?
  theme      String?
  Post       Post[]
  User       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ContentType {
  POST
  COMMENT
}

enum NotificationType {
  FOLLOW
  COMMENT
  COMMENT_REACTION
  POST
  POST_REACTION
}

enum Privacy {
  PUBLIC
  PRIVATE
}

enum MediaFormat {
  AUDIO
  IMAGE
  VIDEO
}

enum PostActionType {
  SAVE
  IGNORE
}
