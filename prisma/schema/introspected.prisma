model block {
  id                                  Int       @id @default(autoincrement())
  blocker_id                          String?   @db.Uuid
  blocked_id                          String?   @db.Uuid
  created_at                          DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at                          DateTime? @db.Timestamptz(6)
  app_user_block_blocked_idToapp_user AppUser?  @relation("block_blocked_idToapp_user", fields: [blocked_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user_block_blocker_idToapp_user AppUser?  @relation("block_blocker_idToapp_user", fields: [blocker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_action {
  id                                         Int             @id @default(autoincrement())
  user_id                                    String?         @db.Uuid
  receiver_id                                String?         @db.Uuid
  post_id                                    Int             @default(autoincrement())
  is_deleted                                 Boolean?        @default(false)
  action                                     PostActionType?
  post                                       Post            @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user_post_action_receiver_idToapp_user AppUser?        @relation("post_action_receiver_idToapp_user", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user_post_action_user_idToapp_user     AppUser?        @relation("post_action_user_idToapp_user", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model report {
  id           Int          @id @default(autoincrement())
  reporter_id  String?      @db.Uuid
  post_id      Int          @default(autoincrement())
  comment_id   Int          @default(autoincrement())
  report_type  ReportType?
  content      String?
  content_type ContentType?
  created_at   DateTime?    @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  comment      Comment      @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post         Post         @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user     AppUser?     @relation(fields: [reporter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tag {
  id                               Int            @id @default(autoincrement())
  tagger_id                        String?        @db.Uuid
  tagged_id                        String?        @db.Uuid
  post_id                          Int            @default(autoincrement())
  comment_id                       Int            @default(autoincrement())
  content_type                     ContentType?
  id_deleted                       Boolean?       @default(false)
  created_at                       DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  notification                     Notification[]
  comment                          Comment        @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post                             Post           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user_tag_tagged_idToapp_user AppUser?       @relation("tag_tagged_idToapp_user", fields: [tagged_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user_tag_tagger_idToapp_user AppUser?       @relation("tag_tagger_idToapp_user", fields: [tagger_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comment_reaction {
  id            Int            @id @default(autoincrement())
  user_id       String?        @db.Uuid
  comment_id    Int            @default(autoincrement())
  reaction_type ReactionType?
  content_type  ContentType?
  is_deleted    Boolean?       @default(false)
  created_at    DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at    DateTime?      @db.Timestamptz(6)
  comment       Comment        @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user      AppUser?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notification  Notification[]

  @@unique([user_id, comment_id], map: "unique_comment_reaction")
}
